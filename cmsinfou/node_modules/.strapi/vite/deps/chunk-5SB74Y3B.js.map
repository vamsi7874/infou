{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/pages/Settings/pages/TransferTokens/EditView.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Box, Flex, Grid, Typography } from '@strapi/design-system';\nimport { Formik, Form, FormikErrors, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useNavigate, useMatch } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport {\n  useCreateTransferTokenMutation,\n  useGetTransferTokenQuery,\n  useUpdateTransferTokenMutation,\n} from '../../../../services/transferTokens';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../utils/translatedErrors';\nimport { TRANSFER_TOKEN_TYPE } from '../../components/Tokens/constants';\nimport { FormHead } from '../../components/Tokens/FormHead';\nimport { LifeSpanInput } from '../../components/Tokens/LifeSpanInput';\nimport { TokenBox } from '../../components/Tokens/TokenBox';\nimport { TokenDescription } from '../../components/Tokens/TokenDescription';\nimport { TokenName } from '../../components/Tokens/TokenName';\nimport { TokenTypeSelect } from '../../components/Tokens/TokenTypeSelect';\n\nimport type {\n  TransferToken,\n  SanitizedTransferToken,\n} from '../../../../../../shared/contracts/transfer';\n\nconst schema = yup.object().shape({\n  name: yup.string().max(100).required(translatedErrors.required.id),\n  description: yup.string().nullable(),\n  lifespan: yup.number().integer().min(0).nullable().defined(translatedErrors.required.id),\n  permissions: yup.string().required(translatedErrors.required.id),\n});\n\n/* -------------------------------------------------------------------------------------------------\n * EditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditView = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const navigate = useNavigate();\n  const { state: locationState } = useLocation();\n  const [transferToken, setTransferToken] = React.useState<\n    TransferToken | SanitizedTransferToken | null\n  >(\n    locationState && 'accessKey' in locationState.transferToken\n      ? {\n          ...locationState.transferToken,\n        }\n      : null\n  );\n  const { trackUsage } = useTracking();\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens']\n  );\n  const {\n    allowedActions: { canCreate, canUpdate, canRegenerate },\n  } = useRBAC(permissions);\n  const match = useMatch('/settings/transfer-tokens/:id');\n\n  const id = match?.params?.id;\n  const isCreating = id === 'create';\n\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  React.useEffect(() => {\n    trackUsage(isCreating ? 'didAddTokenFromList' : 'didEditTokenFromList', {\n      tokenType: TRANSFER_TOKEN_TYPE,\n    });\n  }, [isCreating, trackUsage]);\n\n  const { data, error } = useGetTransferTokenQuery(id!, {\n    skip: isCreating || transferToken !== null || !id,\n  });\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  React.useEffect(() => {\n    if (data) {\n      setTransferToken(data);\n    }\n  }, [data]);\n\n  const [createToken] = useCreateTransferTokenMutation();\n  const [updateToken] = useUpdateTransferTokenMutation();\n\n  const handleSubmit = async (body: FormValues, formik: FormikHelpers<FormValues>) => {\n    trackUsage(isCreating ? 'willCreateToken' : 'willEditToken', {\n      tokenType: TRANSFER_TOKEN_TYPE,\n    });\n\n    const permissions = body.permissions.split('-');\n\n    const isPermissionsTransferPermission = (\n      permission: string[]\n    ): permission is Array<'push' | 'pull'> => {\n      if (permission.length === 1) {\n        return permission[0] === 'push' || permission[0] === 'pull';\n      }\n\n      return permission[0] === 'push' && permission[1] === 'pull';\n    };\n\n    // this type-guard is necessary to satisfy the type for `permissions` in the request body,\n    // because String.split returns stringp[]\n    if (isPermissionsTransferPermission(permissions)) {\n      try {\n        if (isCreating) {\n          const res = await createToken({\n            ...body,\n            // lifespan must be \"null\" for unlimited (0 would mean instantly expired and isn't accepted)\n            lifespan:\n              body?.lifespan && body.lifespan !== '0'\n                ? parseInt(body.lifespan.toString(), 10)\n                : null,\n            permissions,\n          });\n\n          if ('error' in res) {\n            if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n              formik.setErrors(formatValidationErrors(res.error));\n            } else {\n              toggleNotification({\n                type: 'danger',\n                message: formatAPIError(res.error),\n              });\n            }\n\n            return;\n          }\n\n          setTransferToken(res.data);\n\n          toggleNotification({\n            type: 'success',\n            message: formatMessage({\n              id: 'notification.success.transfertokencreated',\n              defaultMessage: 'Transfer Token successfully created',\n            }),\n          });\n\n          trackUsage('didCreateToken', {\n            type: transferToken?.permissions,\n            tokenType: TRANSFER_TOKEN_TYPE,\n          });\n\n          navigate(`../transfer-tokens/${res.data.id.toString()}`, {\n            replace: true,\n            state: { transferToken: res.data },\n          });\n        } else {\n          const res = await updateToken({\n            id: id!,\n            name: body.name,\n            description: body.description,\n            permissions,\n          });\n\n          if ('error' in res) {\n            if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n              formik.setErrors(formatValidationErrors(res.error));\n            } else {\n              toggleNotification({\n                type: 'danger',\n                message: formatAPIError(res.error),\n              });\n            }\n\n            return;\n          }\n\n          setTransferToken(res.data);\n\n          toggleNotification({\n            type: 'success',\n            message: formatMessage({\n              id: 'notification.success.transfertokenedited',\n              defaultMessage: 'Transfer Token successfully edited',\n            }),\n          });\n\n          trackUsage('didEditToken', {\n            type: transferToken?.permissions,\n            tokenType: TRANSFER_TOKEN_TYPE,\n          });\n        }\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'notification.error',\n            defaultMessage: 'Something went wrong',\n          }),\n        });\n      }\n    }\n  };\n\n  const canEditInputs = (canUpdate && !isCreating) || (canCreate && isCreating);\n  const isLoading = !isCreating && !transferToken;\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Transfer Tokens',\n          }\n        )}\n      </Page.Title>\n      <Formik\n        validationSchema={schema}\n        validateOnChange={false}\n        initialValues={\n          {\n            name: transferToken?.name || '',\n            description: transferToken?.description || '',\n            lifespan: transferToken?.lifespan || null,\n            /**\n             * We need to cast the permissions to satisfy the type for `permissions`\n             * in the request body incase we don't have a transferToken and instead\n             * use an empty string.\n             */\n            permissions: (transferToken?.permissions.join('-') ?? '') as FormValues['permissions'],\n          } satisfies FormValues\n        }\n        enableReinitialize\n        onSubmit={(body, actions) => handleSubmit(body, actions)}\n      >\n        {({ errors, handleChange, isSubmitting, values }) => {\n          return (\n            <Form>\n              <FormHead\n                title={{\n                  id: 'Settings.transferTokens.createPage.title',\n                  defaultMessage: 'TokenCreate Transfer Token',\n                }}\n                token={transferToken}\n                setToken={setTransferToken}\n                canShowToken={false}\n                canEditInputs={canEditInputs}\n                canRegenerate={canRegenerate}\n                isSubmitting={isSubmitting}\n                regenerateUrl=\"/admin/transfer/tokens/\"\n              />\n              <Layouts.Content>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                  {transferToken &&\n                    Boolean(transferToken?.name) &&\n                    'accessKey' in transferToken && (\n                      <TokenBox token={transferToken.accessKey} tokenType={TRANSFER_TOKEN_TYPE} />\n                    )}\n                  <FormTransferTokenContainer\n                    errors={errors}\n                    onChange={handleChange}\n                    canEditInputs={canEditInputs}\n                    isCreating={isCreating}\n                    values={values}\n                    transferToken={transferToken}\n                  />\n                </Flex>\n              </Layouts.Content>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Page.Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedEditView\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedEditView = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['transfer-tokens'].read\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditView />\n    </Page.Protect>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * FormTransferTokenContainer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FormValues extends Pick<TransferToken, 'description' | 'name' | 'lifespan'> {\n  permissions: Extract<TransferToken['permissions'][number], string>;\n}\n\ninterface FormTransferTokenContainerProps {\n  errors: FormikErrors<FormValues>;\n  onChange: ({ target: { name, value } }: { target: { name: string; value: string } }) => void;\n  canEditInputs: boolean;\n  values: FormValues;\n  isCreating: boolean;\n  transferToken: Partial<TransferToken> | null;\n}\n\nconst FormTransferTokenContainer = ({\n  errors = {},\n  onChange,\n  canEditInputs,\n  isCreating,\n  values,\n  transferToken = {},\n}: FormTransferTokenContainerProps) => {\n  const { formatMessage } = useIntl();\n\n  const typeOptions = [\n    {\n      value: 'push',\n      label: {\n        id: 'Settings.transferTokens.types.push',\n        defaultMessage: 'Push',\n      },\n    },\n    {\n      value: 'pull',\n      label: {\n        id: 'Settings.transferTokens.types.pull',\n        defaultMessage: 'Pull',\n      },\n    },\n    {\n      value: 'push-pull',\n      label: {\n        id: 'Settings.transferTokens.types.push-pull',\n        defaultMessage: 'Full Access',\n      },\n    },\n  ];\n\n  return (\n    <Box\n      background=\"neutral0\"\n      hasRadius\n      shadow=\"filterShadow\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Typography variant=\"delta\" tag=\"h2\">\n          {formatMessage({\n            id: 'global.details',\n            defaultMessage: 'Details',\n          })}\n        </Typography>\n        <Grid.Root gap={5}>\n          <Grid.Item key=\"name\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <TokenName\n              error={errors['name']}\n              value={values['name']}\n              canEditInputs={canEditInputs}\n              onChange={onChange}\n            />\n          </Grid.Item>\n          <Grid.Item key=\"description\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <TokenDescription\n              error={errors['description']}\n              value={values['description']}\n              canEditInputs={canEditInputs}\n              onChange={onChange}\n            />\n          </Grid.Item>\n          <Grid.Item key=\"lifespan\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <LifeSpanInput\n              isCreating={isCreating}\n              error={errors['lifespan']}\n              value={values['lifespan']}\n              onChange={onChange}\n              token={transferToken}\n            />\n          </Grid.Item>\n          <Grid.Item key=\"permissions\" col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n            <TokenTypeSelect\n              name=\"permissions\"\n              value={values['permissions']}\n              error={errors['permissions']}\n              label={{\n                id: 'Settings.tokens.form.type',\n                defaultMessage: 'Token type',\n              }}\n              // @ts-expect-error – DS Select passes number | string, will be fixed in V2\n              onChange={(value: string) => {\n                onChange({ target: { name: 'permissions', value } });\n              }}\n              options={typeOptions}\n              canEditInputs={canEditInputs}\n            />\n          </Grid.Item>\n        </Grid.Root>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { EditView, ProtectedEditView };\n"],
  "mappings": "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",
  "names": ["schema", "object", "shape", "name", "string", "max", "required", "translatedErrors", "id", "description", "nullable", "lifespan", "number", "integer", "min", "defined", "permissions", "EditView", "formatMessage", "useIntl", "toggleNotification", "useNotification", "navigate", "useNavigate", "state", "locationState", "useLocation", "transferToken", "setTransferToken", "useState", "trackUsage", "useTracking", "useTypedSelector", "admin_app", "settings", "allowedActions", "canCreate", "canUpdate", "canRegenerate", "useRBAC", "match", "useMatch", "params", "isCreating", "_unstableFormatAPIError", "formatAPIError", "_unstableFormatValidationErrors", "formatValidationErrors", "useAPIErrorHandler", "React", "useEffect", "tokenType", "TRANSFER_TOKEN_TYPE", "data", "error", "useGetTransferTokenQuery", "skip", "type", "message", "createToken", "useCreateTransferTokenMutation", "updateToken", "useUpdateTransferTokenMutation", "handleSubmit", "body", "formik", "split", "isPermissionsTransferPermission", "permission", "length", "res", "parseInt", "toString", "isBaseQueryError", "setErrors", "defaultMessage", "replace", "err", "canEditInputs", "isLoading", "_jsx", "Page", "Loading", "_jsxs", "Main", "Title", "Formik", "validationSchema", "validateOnChange", "initialValues", "join", "enableReinitialize", "onSubmit", "actions", "errors", "handleChange", "isSubmitting", "values", "Form", "FormHead", "title", "token", "setToken", "canShowToken", "regenerateUrl", "Layouts", "Content", "Flex", "direction", "alignItems", "gap", "Boolean", "TokenBox", "accessKey", "FormTransferTokenContainer", "onChange", "ProtectedEditView", "read", "Protect", "typeOptions", "value", "label", "Box", "background", "hasRadius", "shadow", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "Typography", "variant", "tag", "Grid", "Root", "Item", "col", "xs", "TokenName", "TokenDescription", "LifeSpanInput", "TokenTypeSelect", "target", "options"]
}
