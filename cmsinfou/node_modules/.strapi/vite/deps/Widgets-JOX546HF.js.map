{
  "version": 3,
  "sources": ["../../../@strapi/review-workflows/admin/src/components/Widgets.tsx"],
  "sourcesContent": ["import { Widget, useTracking } from '@strapi/admin/strapi-admin';\nimport { DocumentStatus, RelativeTime } from '@strapi/content-manager/strapi-admin';\nimport { Box, IconButton, Table, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport { Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { StageColumn } from '../routes/content-manager/model/components/TableColumns';\nimport { useGetRecentlyAssignedDocumentsQuery } from '../services/content-manager';\n\nimport type { RecentDocument } from '../../../shared/contracts/homepage';\n\nconst CellTypography = styled(Typography)`\n  display: block;\n  max-width: 14.4rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst RecentDocumentsTable = ({\n  documents,\n  type,\n}: {\n  documents: RecentDocument[];\n  type: 'assigned';\n}) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n\n  const getEditViewLink = (document: RecentDocument): string => {\n    const isSingleType = document.kind === 'singleType';\n    const kindPath = isSingleType ? 'single-types' : 'collection-types';\n    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : '';\n\n    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? '' : '/' + document.documentId}${queryParams}`;\n  };\n\n  const handleRowClick = (document: RecentDocument) => () => {\n    trackUsage('willEditEntryFromHome', { entryType: type });\n    const link = getEditViewLink(document);\n    navigate(link);\n  };\n\n  return (\n    <Table colCount={6} rowCount={documents?.length ?? 0}>\n      <Tbody>\n        {documents?.map((document) => (\n          <Tr onClick={handleRowClick(document)} cursor=\"pointer\" key={document.documentId}>\n            <Td>\n              <CellTypography title={document.title} variant=\"omega\" textColor=\"neutral800\">\n                {document.title}\n              </CellTypography>\n            </Td>\n            <Td>\n              <CellTypography variant=\"omega\" textColor=\"neutral600\">\n                {document.kind === 'singleType'\n                  ? formatMessage({\n                      id: 'content-manager.widget.last-edited.single-type',\n                      defaultMessage: 'Single-Type',\n                    })\n                  : formatMessage({\n                      id: document.contentTypeDisplayName,\n                      defaultMessage: document.contentTypeDisplayName,\n                    })}\n              </CellTypography>\n            </Td>\n            <Td>\n              <Box display=\"inline-block\">\n                {document.status ? (\n                  <DocumentStatus status={document.status} />\n                ) : (\n                  <Typography textColor=\"neutral600\" aria-hidden>\n                    -\n                  </Typography>\n                )}\n              </Box>\n            </Td>\n            <Td>\n              <Typography textColor=\"neutral600\">\n                <RelativeTime timestamp={new Date(document.updatedAt)} />\n              </Typography>\n            </Td>\n            <Td>\n              <StageColumn strapi_stage={document.strapi_stage} />\n            </Td>\n            <Td onClick={(e) => e.stopPropagation()}>\n              <Box display=\"inline-block\">\n                <IconButton\n                  tag={Link}\n                  to={getEditViewLink(document)}\n                  onClick={() => trackUsage('willEditEntryFromHome', { entryType: type })}\n                  label={formatMessage({\n                    id: 'content-manager.actions.edit.label',\n                    defaultMessage: 'Edit',\n                  })}\n                  variant=\"ghost\"\n                >\n                  <Pencil />\n                </IconButton>\n              </Box>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * AssignedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst AssignedWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentlyAssignedDocumentsQuery();\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'review-workflows.widget.assigned.no-data',\n          defaultMessage: 'No entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} type=\"assigned\" />;\n};\n\nexport { AssignedWidget };\n"],
  "mappings": "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",
  "names": ["CellTypography", "styled", "Typography", "RecentDocumentsTable", "documents", "type", "formatMessage", "useIntl", "trackUsage", "useTracking", "navigate", "useNavigate", "getEditViewLink", "document", "isSingleType", "kind", "kindPath", "queryParams", "locale", "contentTypeUid", "documentId", "handleRowClick", "entryType", "link", "_jsx", "Table", "colCount", "rowCount", "length", "Tbody", "map", "_jsxs", "Tr", "onClick", "cursor", "Td", "title", "variant", "textColor", "id", "defaultMessage", "contentTypeDisplayName", "Box", "display", "status", "DocumentStatus", "aria-hidden", "RelativeTime", "timestamp", "Date", "updatedAt", "StageColumn", "strapi_stage", "e", "stopPropagation", "IconButton", "tag", "Link", "to", "label", "Pencil", "AssignedWidget", "data", "isLoading", "error", "useGetRecentlyAssignedDocumentsQuery", "Widget", "Loading", "Error", "NoData"]
}
