{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/content-manager.ts", "../../../@strapi/content-manager/admin/src/history/components/HistoryAction.tsx", "../../../@strapi/content-manager/admin/src/history/index.ts", "../../../@strapi/content-manager/admin/src/modules/reducers.ts", "../../../@strapi/content-manager/admin/src/preview/components/PreviewSidePanel.tsx", "../../../@strapi/content-manager/admin/src/preview/index.ts", "../../../@strapi/content-manager/admin/src/index.ts"],
  "sourcesContent": ["/* eslint-disable check-file/filename-naming-convention */\nimport { INJECTION_ZONES } from './components/InjectionZone';\nimport { PLUGIN_ID } from './constants/plugin';\nimport {\n  DEFAULT_ACTIONS,\n  type DocumentActionPosition,\n  type DocumentActionDescription,\n} from './pages/EditView/components/DocumentActions';\nimport {\n  DEFAULT_HEADER_ACTIONS,\n  type HeaderActionDescription,\n} from './pages/EditView/components/Header';\nimport { ActionsPanel, type PanelDescription } from './pages/EditView/components/Panels';\nimport {\n  DEFAULT_BULK_ACTIONS,\n  type BulkActionDescription,\n} from './pages/ListView/components/BulkActions/Actions';\nimport { DEFAULT_TABLE_ROW_ACTIONS } from './pages/ListView/components/TableActions';\n\nimport type { Document } from './hooks/useDocument';\nimport type { DocumentMetadata } from '../../shared/contracts/collection-types';\nimport type { DescriptionComponent, PluginConfig } from '@strapi/admin/strapi-admin';\n\n/* -------------------------------------------------------------------------------------------------\n * Configuration Types\n * -----------------------------------------------------------------------------------------------*/\n\ntype DescriptionReducer<Config extends object> = (prev: Config[]) => Config[];\n\ninterface EditViewContext {\n  /**\n   * This will ONLY be null, if the content-type\n   * does not have draft & published enabled.\n   */\n  activeTab: 'draft' | 'published' | null;\n  /**\n   * Will be either 'single-types' | 'collection-types'\n   */\n  collectionType: string;\n  /**\n   * this will be undefined if someone is creating an entry.\n   */\n  document?: Document;\n  /**\n   * this will be undefined if someone is creating an entry.\n   */\n  documentId?: string;\n  /**\n   * this will be undefined if someone is creating an entry.\n   */\n  meta?: DocumentMetadata;\n  /**\n   * The current content-type's model.\n   */\n  model: string;\n}\n\ninterface ListViewContext {\n  /**\n   * Will be either 'single-types' | 'collection-types'\n   */\n  collectionType: string;\n  /**\n   * The current selected documents in the table\n   */\n  documents: Document[];\n  /**\n   * The current content-type's model.\n   */\n  model: string;\n}\n\ninterface PanelComponentProps extends EditViewContext {}\n\ninterface PanelComponent extends DescriptionComponent<PanelComponentProps, PanelDescription> {\n  /**\n   * The defaults are added by Strapi only, if you're providing your own component,\n   * you do not need to provide this.\n   */\n  type?: 'actions' | 'releases';\n}\n\ninterface DocumentActionProps extends EditViewContext {}\n\ninterface DocumentActionComponent\n  extends DescriptionComponent<DocumentActionProps, DocumentActionDescription> {\n  type?:\n    | 'clone'\n    | 'configure-the-view'\n    | 'delete'\n    | 'discard'\n    | 'edit'\n    | 'edit-the-model'\n    | 'history'\n    | 'publish'\n    | 'unpublish'\n    | 'update';\n  position?: DocumentActionDescription['position'];\n}\n\ninterface HeaderActionProps extends EditViewContext {}\n\ninterface HeaderActionComponent\n  extends DescriptionComponent<HeaderActionProps, HeaderActionDescription> {}\n\ninterface BulkActionComponentProps extends ListViewContext {}\n\ninterface BulkActionComponent\n  extends DescriptionComponent<BulkActionComponentProps, BulkActionDescription> {\n  type?: 'delete' | 'publish' | 'unpublish';\n}\n\n/* -------------------------------------------------------------------------------------------------\n * ContentManager plugin\n * -----------------------------------------------------------------------------------------------*/\n\nclass ContentManagerPlugin {\n  /**\n   * The following properties are the stored ones provided by any plugins registering with\n   * the content-manager. The function calls however, need to be called at runtime in the\n   * application, so instead we collate them and run them later with the complete list incl.\n   * ones already registered & the context of the view.\n   */\n  bulkActions: BulkActionComponent[] = [...DEFAULT_BULK_ACTIONS];\n  documentActions: DocumentActionComponent[] = [\n    ...DEFAULT_ACTIONS,\n    ...DEFAULT_TABLE_ROW_ACTIONS,\n    ...DEFAULT_HEADER_ACTIONS,\n  ];\n  editViewSidePanels: PanelComponent[] = [ActionsPanel];\n  headerActions: HeaderActionComponent[] = [];\n\n  constructor() {}\n\n  addEditViewSidePanel(panels: DescriptionReducer<PanelComponent>): void;\n  addEditViewSidePanel(panels: PanelComponent[]): void;\n  addEditViewSidePanel(panels: DescriptionReducer<PanelComponent> | PanelComponent[]) {\n    if (Array.isArray(panels)) {\n      this.editViewSidePanels = [...this.editViewSidePanels, ...panels];\n    } else if (typeof panels === 'function') {\n      this.editViewSidePanels = panels(this.editViewSidePanels);\n    } else {\n      throw new Error(\n        `Expected the \\`panels\\` passed to \\`addEditViewSidePanel\\` to be an array or a function, but received ${getPrintableType(\n          panels\n        )}`\n      );\n    }\n  }\n\n  addDocumentAction(actions: DescriptionReducer<DocumentActionComponent>): void;\n  addDocumentAction(actions: DocumentActionComponent[]): void;\n  addDocumentAction(\n    actions: DescriptionReducer<DocumentActionComponent> | DocumentActionComponent[]\n  ) {\n    if (Array.isArray(actions)) {\n      this.documentActions = [...this.documentActions, ...actions];\n    } else if (typeof actions === 'function') {\n      this.documentActions = actions(this.documentActions);\n    } else {\n      throw new Error(\n        `Expected the \\`actions\\` passed to \\`addDocumentAction\\` to be an array or a function, but received ${getPrintableType(\n          actions\n        )}`\n      );\n    }\n  }\n\n  addDocumentHeaderAction(actions: DescriptionReducer<HeaderActionComponent>): void;\n  addDocumentHeaderAction(actions: HeaderActionComponent[]): void;\n  addDocumentHeaderAction(\n    actions: DescriptionReducer<HeaderActionComponent> | HeaderActionComponent[]\n  ) {\n    if (Array.isArray(actions)) {\n      this.headerActions = [...this.headerActions, ...actions];\n    } else if (typeof actions === 'function') {\n      this.headerActions = actions(this.headerActions);\n    } else {\n      throw new Error(\n        `Expected the \\`actions\\` passed to \\`addDocumentHeaderAction\\` to be an array or a function, but received ${getPrintableType(\n          actions\n        )}`\n      );\n    }\n  }\n\n  addBulkAction(actions: DescriptionReducer<BulkActionComponent>): void;\n  addBulkAction(actions: BulkActionComponent[]): void;\n  addBulkAction(actions: DescriptionReducer<BulkActionComponent> | BulkActionComponent[]) {\n    if (Array.isArray(actions)) {\n      this.bulkActions = [...this.bulkActions, ...actions];\n    } else if (typeof actions === 'function') {\n      this.bulkActions = actions(this.bulkActions);\n    } else {\n      throw new Error(\n        `Expected the \\`actions\\` passed to \\`addBulkAction\\` to be an array or a function, but received ${getPrintableType(\n          actions\n        )}`\n      );\n    }\n  }\n\n  get config() {\n    return {\n      id: PLUGIN_ID,\n      name: 'Content Manager',\n      injectionZones: INJECTION_ZONES,\n      apis: {\n        addBulkAction: this.addBulkAction.bind(this),\n        addDocumentAction: this.addDocumentAction.bind(this),\n        addDocumentHeaderAction: this.addDocumentHeaderAction.bind(this),\n        addEditViewSidePanel: this.addEditViewSidePanel.bind(this),\n        getBulkActions: () => this.bulkActions,\n        getDocumentActions: (position?: DocumentActionPosition) => {\n          /**\n           * When possible, pre-filter the actions by the components static position property.\n           * This avoids rendering the actions in multiple places where they weren't displayed,\n           * which wasn't visible but created issues with useEffect for instance.\n           * The response should still be filtered by the position, as the static property is new\n           * and not mandatory to avoid a breaking change.\n           */\n          if (position) {\n            return this.documentActions.filter((action) => {\n              return action.position == undefined || [action.position].flat().includes(position);\n            });\n          }\n\n          return this.documentActions;\n        },\n        getEditViewSidePanels: () => this.editViewSidePanels,\n        getHeaderActions: () => this.headerActions,\n      },\n    } satisfies PluginConfig;\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * getPrintableType\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n * @description Gets the human-friendly printable type name for the given value, for instance it will yield\n * `array` instead of `object`, as the native `typeof` operator would do.\n */\nconst getPrintableType = (value: unknown): string => {\n  const nativeType = typeof value;\n\n  if (nativeType === 'object') {\n    if (value === null) return 'null';\n    if (Array.isArray(value)) return 'array';\n    if (value instanceof Object && value.constructor.name !== 'Object') {\n      return value.constructor.name;\n    }\n  }\n\n  return nativeType;\n};\n\nexport { ContentManagerPlugin };\nexport type {\n  EditViewContext,\n  ListViewContext,\n  BulkActionComponent,\n  BulkActionComponentProps,\n  BulkActionDescription,\n  DescriptionComponent,\n  DescriptionReducer,\n  PanelComponentProps,\n  PanelComponent,\n  PanelDescription,\n  DocumentActionComponent,\n  DocumentActionDescription,\n  DocumentActionProps,\n  HeaderActionComponent,\n  HeaderActionDescription,\n  HeaderActionProps,\n};\n", "import { useQueryParams, useTracking } from '@strapi/admin/strapi-admin';\nimport { ClockCounterClockwise } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport type { DocumentActionComponent } from '../../content-manager';\n\nconst HistoryAction: DocumentActionComponent = ({ model, document }) => {\n  const { formatMessage } = useIntl();\n  const [{ query }] = useQueryParams<{ plugins?: Record<string, unknown> }>();\n  const navigate = useNavigate();\n  const { trackUsage } = useTracking();\n  const { pathname } = useLocation();\n  const pluginsQueryParams = stringify({ plugins: query.plugins }, { encode: false });\n\n  if (!window.strapi.features.isEnabled('cms-content-history')) {\n    return null;\n  }\n\n  const handleOnClick = () => {\n    const destination = { pathname: 'history', search: pluginsQueryParams };\n    trackUsage('willNavigate', {\n      from: pathname,\n      to: `${pathname}/${destination.pathname}`,\n    });\n    navigate(destination);\n  };\n\n  return {\n    icon: <ClockCounterClockwise />,\n    label: formatMessage({\n      id: 'content-manager.history.document-action',\n      defaultMessage: 'Content History',\n    }),\n    onClick: handleOnClick,\n    disabled:\n      /**\n       * The user is creating a new document.\n       * It hasn't been saved yet, so there's no history to go to\n       */\n      !document ||\n      /**\n       * The document has been created but the current dimension has never been saved.\n       * For example, the user is creating a new locale in an existing document,\n       * so there's no history for the document in that locale\n       */\n      !document.id ||\n      /**\n       * History is only available for content types created by the user.\n       * These have the `api::` prefix, as opposed to the ones created by Strapi or plugins,\n       * which start with `admin::` or `plugin::`\n       */\n      !model.startsWith('api::'),\n    position: 'header',\n  };\n};\n\nHistoryAction.type = 'history';\nHistoryAction.position = 'header';\n\nexport { HistoryAction };\n", "/* eslint-disable check-file/no-index */\n\nimport { type ContentManagerPlugin } from '../content-manager';\n\nimport { HistoryAction } from './components/HistoryAction';\n\nimport type { StrapiApp } from '@strapi/admin/strapi-admin';\nimport type { Plugin } from '@strapi/types';\n\nconst historyAdmin: Partial<Plugin.Config.AdminInput> = {\n  bootstrap(app: StrapiApp) {\n    const { addDocumentAction } = app.getPlugin('content-manager').apis as {\n      addDocumentAction: ContentManagerPlugin['addDocumentAction'];\n    };\n\n    /**\n     * Register the document action here using the public API, and not by setting the action in the\n     * Content Manager directly, because this API lets us control the order of the actions array.\n     * We want history to be the last non-delete action in the array.\n     */\n    addDocumentAction((actions) => {\n      const indexOfDeleteAction = actions.findIndex((action) => action.type === 'delete');\n      actions.splice(indexOfDeleteAction, 0, HistoryAction);\n      return actions;\n    });\n  },\n};\n\nexport { historyAdmin };\n", "import { combineReducers } from '@reduxjs/toolkit';\n\nimport { reducer as appReducer } from './app';\n\nconst reducer = combineReducers({\n  app: appReducer,\n});\n\ntype State = ReturnType<typeof reducer>;\n\nexport { reducer };\nexport type { State };\n", "import * as React from 'react';\n\nimport { useQueryParams, useTracking, useForm } from '@strapi/admin/strapi-admin';\nimport { Box, Button, Tooltip, type TooltipProps } from '@strapi/design-system';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { useGetPreviewUrlQuery } from '../services/preview';\n\nimport type { PanelComponent } from '@strapi/content-manager/strapi-admin';\nimport type { UID } from '@strapi/types';\n\ninterface ConditionalTooltipProps {\n  isShown: boolean;\n  label: TooltipProps['label'];\n  children: React.ReactNode;\n}\n\nconst ConditionalTooltip = ({ isShown, label, children }: ConditionalTooltipProps) => {\n  if (isShown) {\n    return <Tooltip label={label}>{children}</Tooltip>;\n  }\n\n  return children;\n};\n\nconst PreviewSidePanel: PanelComponent = ({ model, documentId, document }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { pathname } = useLocation();\n  const [{ query }] = useQueryParams();\n  const isModified = useForm('PreviewSidePanel', (state) => state.modified);\n  const isUnsaved = Boolean(!document || !document.id);\n\n  const title = formatMessage({\n    id: 'content-manager.preview.panel.title',\n    defaultMessage: 'Preview',\n  });\n\n  /**\n   * The preview URL isn't used in this component, we just fetch it to know if preview is enabled\n   * for the content type. If it's not, the panel is not displayed. If it is, we display a link to\n   * /preview, and the URL will already be loaded in the RTK query cache.\n   */\n  const { data, error } = useGetPreviewUrlQuery(\n    {\n      params: {\n        contentType: model as UID.ContentType,\n      },\n      query: {\n        documentId,\n        locale: document?.locale,\n        status: document?.status,\n      },\n    },\n    // Don't bother making the request since we won't show any UI\n    { skip: isUnsaved }\n  );\n\n  if (isUnsaved) {\n    return null;\n  }\n\n  // Preview was not configured but not disabled either (otherwise it would be a success 204).\n  // So we encourage the user to set it up.\n  if (error && error.name === 'NotFoundError') {\n    return {\n      title,\n      content: (\n        <Button\n          variant=\"tertiary\"\n          tag={Link}\n          to=\"https://docs.strapi.io/cms/features/preview\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          width=\"100%\"\n        >\n          {formatMessage({\n            id: 'content-manager.preview.panel.button-configuration',\n            defaultMessage: 'Set up preview',\n          })}\n        </Button>\n      ),\n    };\n  }\n\n  if (!data?.data?.url || error) {\n    return null;\n  }\n\n  const trackNavigation = () => {\n    // Append /preview to the current URL\n    const destinationPathname = pathname.replace(/\\/$/, '') + '/preview';\n    trackUsage('willNavigate', { from: pathname, to: destinationPathname });\n  };\n\n  return {\n    title,\n    content: (\n      <ConditionalTooltip\n        label={formatMessage({\n          id: 'content-manager.preview.panel.button-disabled-tooltip',\n          defaultMessage: 'Please save to open the preview',\n        })}\n        isShown={isModified}\n      >\n        <Box cursor=\"not-allowed\" width=\"100%\">\n          <Button\n            variant=\"tertiary\"\n            tag={Link}\n            to={{ pathname: 'preview', search: stringify(query, { encode: false }) }}\n            onClick={trackNavigation}\n            width=\"100%\"\n            disabled={isModified}\n            pointerEvents={isModified ? 'none' : undefined}\n            tabIndex={isModified ? -1 : undefined}\n          >\n            {formatMessage({\n              id: 'content-manager.preview.panel.button',\n              defaultMessage: 'Open preview',\n            })}\n          </Button>\n        </Box>\n      </ConditionalTooltip>\n    ),\n  };\n};\n\nexport { PreviewSidePanel };\n", "/* eslint-disable check-file/no-index */\n\nimport { PreviewSidePanel } from './components/PreviewSidePanel';\n\nimport type { ContentManagerPlugin } from '../content-manager';\nimport type { PluginDefinition } from '@strapi/admin/strapi-admin';\n\nconst previewAdmin: Partial<PluginDefinition> = {\n  bootstrap(app) {\n    const contentManagerPluginApis = app.getPlugin('content-manager')\n      .apis as ContentManagerPlugin['config']['apis'];\n\n    contentManagerPluginApis.addEditViewSidePanel([PreviewSidePanel]);\n  },\n};\n\nexport { previewAdmin };\n", "import { CheckCircle, Feather, Pencil, PuzzlePiece } from '@strapi/icons';\n\nimport { PLUGIN_ID } from './constants/plugin';\nimport { ContentManagerPlugin } from './content-manager';\nimport { historyAdmin } from './history';\nimport { reducer } from './modules/reducers';\nimport { previewAdmin } from './preview';\nimport { routes } from './router';\nimport { prefixPluginTranslations } from './utils/translations';\n\nimport type { WidgetArgs } from '@strapi/admin/strapi-admin';\n\n// NOTE: we have to preload it to ensure chunks will have it available as global\nimport 'prismjs';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  register(app: any) {\n    const cm = new ContentManagerPlugin();\n\n    app.addReducers({\n      [PLUGIN_ID]: reducer,\n    });\n\n    app.addMenuLink({\n      to: PLUGIN_ID,\n      icon: Feather,\n      intlLabel: {\n        id: `content-manager.plugin.name`,\n        defaultMessage: 'Content Manager',\n      },\n      permissions: [],\n      position: 1,\n    });\n\n    app.router.addRoute({\n      path: 'content-manager/*',\n      lazy: async () => {\n        const { Layout } = await import('./layout');\n\n        return {\n          Component: Layout,\n        };\n      },\n      children: routes,\n    });\n\n    app.registerPlugin(cm.config);\n\n    app.widgets.register((widgets: WidgetArgs[]) => {\n      const lastEditedWidget: WidgetArgs = {\n        icon: Pencil,\n        title: {\n          id: `${PLUGIN_ID}.widget.last-edited.title`,\n          defaultMessage: 'Last edited entries',\n        },\n        component: async () => {\n          const { LastEditedWidget } = await import('./components/Widgets');\n          return LastEditedWidget;\n        },\n        pluginId: PLUGIN_ID,\n        id: 'last-edited-entries',\n        permissions: [{ action: 'plugin::content-manager.explorer.read' }],\n      };\n      const lastPublishedWidget: WidgetArgs = {\n        icon: CheckCircle,\n        title: {\n          id: `${PLUGIN_ID}.widget.last-published.title`,\n          defaultMessage: 'Last published entries',\n        },\n        component: async () => {\n          const { LastPublishedWidget } = await import('./components/Widgets');\n          return LastPublishedWidget;\n        },\n        pluginId: PLUGIN_ID,\n        id: 'last-published-entries',\n        permissions: [{ action: 'plugin::content-manager.explorer.read' }],\n      };\n      const entriesWidget: WidgetArgs = {\n        icon: PuzzlePiece,\n        title: {\n          id: `${PLUGIN_ID}.widget.chart-entries.title`,\n          defaultMessage: 'Entries',\n        },\n        component: async () => {\n          const { ChartEntriesWidget } = await import('./components/Widgets');\n          return ChartEntriesWidget;\n        },\n        pluginId: PLUGIN_ID,\n        id: 'chart-entries',\n        permissions: [{ action: 'plugin::content-manager.explorer.read' }],\n      };\n\n      const profileInfoIndex = widgets.findIndex(\n        (widget) => widget.id === 'profile-info' && widget.pluginId === 'admin'\n      );\n\n      // Insert chart-entries after the profile-info widget\n      if (profileInfoIndex !== -1) {\n        const newWidgets: WidgetArgs[] = [...widgets];\n        newWidgets.splice(profileInfoIndex + 1, 0, entriesWidget);\n        return [lastEditedWidget, lastPublishedWidget, ...newWidgets];\n      }\n\n      // Fallback: add to the end if the target widget aren't found\n      return [lastEditedWidget, lastPublishedWidget, ...widgets, entriesWidget];\n    });\n  },\n  bootstrap(app: any) {\n    if (typeof historyAdmin.bootstrap === 'function') {\n      historyAdmin.bootstrap(app);\n    }\n    if (typeof previewAdmin.bootstrap === 'function') {\n      previewAdmin.bootstrap(app);\n    }\n  },\n  async registerTrads({ locales }: { locales: string[] }) {\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, PLUGIN_ID),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n\nexport * from './exports';\n"],
  "mappings": "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",
  "names": ["ContentManagerPlugin", "addEditViewSidePanel", "panels", "Array", "isArray", "editViewSidePanels", "Error", "getPrintableType", "addDocumentAction", "actions", "documentActions", "addDocumentHeaderAction", "headerActions", "addBulkAction", "bulkActions", "config", "id", "PLUGIN_ID", "name", "injectionZones", "INJECTION_ZONES", "apis", "bind", "getBulkActions", "getDocumentActions", "position", "filter", "action", "undefined", "flat", "includes", "getEditViewSidePanels", "getHeaderActions", "constructor", "DEFAULT_BULK_ACTIONS", "DEFAULT_ACTIONS", "DEFAULT_TABLE_ROW_ACTIONS", "DEFAULT_HEADER_ACTIONS", "ActionsPanel", "value", "nativeType", "Object", "HistoryAction", "model", "document", "formatMessage", "useIntl", "query", "useQueryParams", "navigate", "useNavigate", "trackUsage", "useTracking", "pathname", "useLocation", "pluginsQueryParams", "stringify", "plugins", "encode", "window", "strapi", "features", "isEnabled", "handleOnClick", "destination", "search", "from", "to", "icon", "_jsx", "ClockCounterClockwise", "label", "id", "defaultMessage", "onClick", "disabled", "startsWith", "position", "type", "historyAdmin", "bootstrap", "app", "addDocumentAction", "getPlugin", "apis", "actions", "indexOfDeleteAction", "findIndex", "action", "type", "splice", "HistoryAction", "reducer", "combineReducers", "app", "appReducer", "ConditionalTooltip", "isShown", "label", "children", "_jsx", "Tooltip", "PreviewSidePanel", "model", "documentId", "document", "formatMessage", "useIntl", "trackUsage", "useTracking", "pathname", "useLocation", "query", "useQueryParams", "isModified", "useForm", "state", "modified", "isUnsaved", "Boolean", "id", "title", "defaultMessage", "data", "error", "useGetPreviewUrlQuery", "params", "contentType", "locale", "status", "skip", "name", "content", "Button", "variant", "tag", "Link", "to", "target", "rel", "width", "url", "trackNavigation", "destinationPathname", "replace", "from", "Box", "cursor", "search", "stringify", "encode", "onClick", "disabled", "pointerEvents", "undefined", "tabIndex", "previewAdmin", "bootstrap", "app", "contentManagerPluginApis", "getPlugin", "apis", "addEditViewSidePanel", "PreviewSidePanel", "register", "app", "cm", "ContentManagerPlugin", "addReducers", "PLUGIN_ID", "reducer", "addMenuLink", "to", "icon", "Feather", "intlLabel", "id", "defaultMessage", "permissions", "position", "router", "addRoute", "path", "lazy", "Layout", "Component", "children", "routes", "registerPlugin", "config", "widgets", "lastEditedWidget", "Pencil", "title", "component", "LastEditedWidget", "pluginId", "action", "lastPublishedWidget", "CheckCircle", "LastPublishedWidget", "entriesWidget", "PuzzlePiece", "ChartEntriesWidget", "profileInfoIndex", "findIndex", "widget", "newWidgets", "splice", "bootstrap", "historyAdmin", "previewAdmin", "registerTrads", "locales", "importedTrads", "Promise", "all", "map", "locale", "then", "default", "data", "prefixPluginTranslations", "catch", "resolve"]
}
