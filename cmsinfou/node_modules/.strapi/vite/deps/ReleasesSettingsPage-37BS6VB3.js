import {
  useTypedSelector
} from "./chunk-2ZCF7N2H.js";
import {
  SETTINGS_SCHEMA
} from "./chunk-2FGGTBQB.js";
import {
  getTimezones,
  useGetReleaseSettingsQuery,
  useUpdateReleaseSettingsMutation
} from "./chunk-U6DSTNCE.js";
import "./chunk-AFZ24I3W.js";
import "./chunk-4XS7Z5LD.js";
import "./chunk-D7AMZXYN.js";
import "./chunk-DEERFX6N.js";
import "./chunk-EEYROK26.js";
import "./chunk-AMSXMRAB.js";
import "./chunk-BKGE5ZOB.js";
import "./chunk-QIJGNK42.js";
import "./chunk-OIGTTOI3.js";
import "./chunk-VQ4JZ5N6.js";
import "./chunk-HXN2VPUA.js";
import "./chunk-M3M76QTB.js";
import "./chunk-I4IZI7RC.js";
import "./chunk-O37WYNET.js";
import {
  GradientBadgeWithIcon
} from "./chunk-6MW6LE7M.js";
import "./chunk-7BUSV5CZ.js";
import "./chunk-WVIDZ4FG.js";
import {
  Form,
  useField
} from "./chunk-UIPCSNOH.js";
import "./chunk-OGKULF3S.js";
import "./chunk-4YDGLXO7.js";
import "./chunk-GYFXEBO7.js";
import "./chunk-FVARHVPW.js";
import "./chunk-EPLSEZ4D.js";
import {
  useRBAC
} from "./chunk-URAEHY46.js";
import "./chunk-UA3SUHF3.js";
import "./chunk-BTEHI67G.js";
import "./chunk-LHECCKXZ.js";
import "./chunk-JQCIHEJC.js";
import "./chunk-RSMRWHAJ.js";
import "./chunk-JHQVPJBC.js";
import "./chunk-ZPXBPYDE.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-BMIYS5WN.js";
import "./chunk-NQSRW5O3.js";
import "./chunk-LCMMDJZX.js";
import {
  Layouts
} from "./chunk-EBMOQY7X.js";
import "./chunk-KPVRSNVY.js";
import "./chunk-IJEBTNWR.js";
import "./chunk-OHWPYT75.js";
import "./chunk-PQINNV4N.js";
import "./chunk-ZPH6YYXY.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-6OPSPQRR.js";
import "./chunk-OZMR6ZG7.js";
import "./chunk-SQAPSDHR.js";
import {
  useNotification
} from "./chunk-UKEHYBHN.js";
import {
  isFetchError
} from "./chunk-OP4OIIKW.js";
import "./chunk-VG57EMON.js";
import "./chunk-5AMSERGP.js";
import "./chunk-CQG5XAX6.js";
import "./chunk-ZGCR6WZZ.js";
import "./chunk-QOUV5O5E.js";
import {
  Button,
  Combobox,
  Field,
  Flex,
  Grid,
  Option,
  Typography,
  useIntl
} from "./chunk-FR3G64L6.js";
import "./chunk-SPTT7VBO.js";
import "./chunk-MEXSUURY.js";
import "./chunk-2MEY62DJ.js";
import {
  ForwardRef$4N
} from "./chunk-VKBWGUCP.js";
import {
  require_jsx_runtime
} from "./chunk-YHVPSBF3.js";
import "./chunk-VLINXRKQ.js";
import "./chunk-3ZCHZDHB.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-releases/dist/admin/pages/ReleasesSettingsPage.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var ReleasesSettingsPage = () => {
  const { formatMessage } = useIntl();
  const { formatAPIError } = useAPIErrorHandler();
  const { toggleNotification } = useNotification();
  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();
  const [updateReleaseSettings, { isLoading: isSubmittingForm }] = useUpdateReleaseSettingsMutation();
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions["settings"]) == null ? void 0 : _a["releases"];
  });
  const { allowedActions: { canUpdate } } = useRBAC(permissions);
  const { timezoneList } = getTimezones(/* @__PURE__ */ new Date());
  const handleSubmit = async (body, { setErrors }) => {
    const { defaultTimezone } = body;
    const formattedDefaultTimezone = defaultTimezone;
    const isBodyTimezoneValid = timezoneList.some((timezone) => timezone.value === formattedDefaultTimezone);
    if (!isBodyTimezoneValid && defaultTimezone) {
      const errorMessage = formatMessage({
        id: "components.Input.error.validation.combobox.invalid",
        defaultMessage: "The value provided is not valid"
      });
      setErrors({
        defaultTimezone: errorMessage
      });
      toggleNotification({
        type: "danger",
        message: errorMessage
      });
      return;
    }
    const newBody = !defaultTimezone || !isBodyTimezoneValid ? {
      defaultTimezone: null
    } : {
      defaultTimezone: formattedDefaultTimezone
    };
    try {
      const response = await updateReleaseSettings(newBody);
      if ("data" in response) {
        toggleNotification({
          type: "success",
          message: formatMessage({
            id: "content-releases.pages.Settings.releases.setting.default-timezone-notification-success",
            defaultMessage: "Default timezone updated."
          })
        });
      } else if (isFetchError(response.error)) {
        toggleNotification({
          type: "danger",
          message: formatAPIError(response.error)
        });
      } else {
        toggleNotification({
          type: "danger",
          message: formatMessage({
            id: "notification.error",
            defaultMessage: "An error occurred"
          })
        });
      }
    } catch (error) {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  if (isLoadingSettings) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  const releasePageTitle = formatMessage({
    id: "content-releases.pages.Releases.title",
    defaultMessage: "Releases"
  });
  return (0, import_jsx_runtime.jsxs)(Layouts.Root, {
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: formatMessage({
          id: "Settings.PageTitle",
          defaultMessage: "Settings - {name}"
        }, {
          name: releasePageTitle
        })
      }),
      (0, import_jsx_runtime.jsx)(Page.Main, {
        "aria-busy": isLoadingSettings,
        tabIndex: -1,
        children: (0, import_jsx_runtime.jsx)(Form, {
          method: "PUT",
          initialValues: {
            defaultTimezone: data == null ? void 0 : data.data.defaultTimezone
          },
          onSubmit: handleSubmit,
          validationSchema: SETTINGS_SCHEMA,
          children: ({ modified, isSubmitting }) => {
            return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
              children: [
                (0, import_jsx_runtime.jsx)(Layouts.Header, {
                  primaryAction: canUpdate ? (0, import_jsx_runtime.jsx)(Button, {
                    disabled: !modified || isSubmittingForm,
                    loading: isSubmitting,
                    startIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4N, {}),
                    type: "submit",
                    children: formatMessage({
                      id: "global.save",
                      defaultMessage: "Save"
                    })
                  }) : null,
                  secondaryAction: (0, import_jsx_runtime.jsx)(GradientBadgeWithIcon, {
                    label: formatMessage({
                      id: "components.premiumFeature.title",
                      defaultMessage: "Premium feature"
                    })
                  }),
                  title: releasePageTitle,
                  subtitle: formatMessage({
                    id: "content-releases.pages.Settings.releases.description",
                    defaultMessage: "Create and manage content updates"
                  })
                }),
                (0, import_jsx_runtime.jsx)(Layouts.Content, {
                  children: (0, import_jsx_runtime.jsxs)(Flex, {
                    direction: "column",
                    background: "neutral0",
                    alignItems: "stretch",
                    padding: 6,
                    gap: 6,
                    shadow: "filterShadow",
                    hasRadius: true,
                    children: [
                      (0, import_jsx_runtime.jsx)(Typography, {
                        variant: "delta",
                        tag: "h2",
                        children: formatMessage({
                          id: "content-releases.pages.Settings.releases.preferences.title",
                          defaultMessage: "Preferences"
                        })
                      }),
                      (0, import_jsx_runtime.jsx)(Grid.Root, {
                        children: (0, import_jsx_runtime.jsx)(Grid.Item, {
                          col: 6,
                          s: 12,
                          direction: "column",
                          alignItems: "stretch",
                          children: (0, import_jsx_runtime.jsx)(TimezoneDropdown, {})
                        })
                      })
                    ]
                  })
                })
              ]
            });
          }
        })
      })
    ]
  });
};
var TimezoneDropdown = () => {
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions["settings"]) == null ? void 0 : _a["releases"];
  });
  const { allowedActions: { canUpdate } } = useRBAC(permissions);
  const { formatMessage } = useIntl();
  const { timezoneList } = getTimezones(/* @__PURE__ */ new Date());
  const field = useField("defaultTimezone");
  return (0, import_jsx_runtime.jsxs)(Field.Root, {
    name: "defaultTimezone",
    hint: formatMessage({
      id: "content-releases.pages.Settings.releases.timezone.hint",
      defaultMessage: "The timezone of every release can still be changed individually."
    }),
    error: field.error,
    children: [
      (0, import_jsx_runtime.jsx)(Field.Label, {
        children: formatMessage({
          id: "content-releases.pages.Settings.releases.timezone.label",
          defaultMessage: "Default timezone"
        })
      }),
      (0, import_jsx_runtime.jsx)(Combobox, {
        autocomplete: {
          type: "list",
          filter: "contains"
        },
        onTextValueChange: (value) => field.onChange("defaultTimezone", value),
        onChange: (value) => {
          if (field.value && value || !field.value) {
            field.onChange("defaultTimezone", value);
          }
        },
        onClear: () => field.onChange("defaultTimezone", ""),
        value: field.value,
        disabled: !canUpdate,
        children: timezoneList.map((timezone) => (0, import_jsx_runtime.jsx)(Option, {
          value: timezone.value,
          children: timezone.value.replace(/&/, " ")
        }, timezone.value))
      }),
      (0, import_jsx_runtime.jsx)(Field.Hint, {}),
      (0, import_jsx_runtime.jsx)(Field.Error, {})
    ]
  });
};
var ProtectedReleasesSettingsPage = () => {
  const permissions = useTypedSelector((state) => {
    var _a, _b;
    return (_b = (_a = state.admin_app.permissions["settings"]) == null ? void 0 : _a["releases"]) == null ? void 0 : _b.read;
  });
  return (0, import_jsx_runtime.jsx)(Page.Protect, {
    permissions,
    children: (0, import_jsx_runtime.jsx)(ReleasesSettingsPage, {})
  });
};
export {
  ProtectedReleasesSettingsPage
};
//# sourceMappingURL=ReleasesSettingsPage-37BS6VB3.js.map
