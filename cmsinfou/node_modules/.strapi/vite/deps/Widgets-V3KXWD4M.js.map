{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/components/Widgets.tsx"],
  "sourcesContent": ["import { useAuth, useTracking } from '@strapi/admin/strapi-admin';\nimport { Avatar, Badge, Box, Flex, Typography } from '@strapi/design-system';\nimport { Earth, Images, User, Key, Files, Layout, Graph, Webhooks } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { useGetCountDocumentsQuery, useGetKeyStatisticsQuery } from '../services/homepage';\nimport { getDisplayName, getInitials } from '../utils/users';\n\nimport { Widget } from './WidgetHelpers';\n\n/* -------------------------------------------------------------------------------------------------\n * ProfileWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst DisplayNameTypography = styled(Typography)`\n  font-size: 2.4rem;\n`;\n\nconst ProfileWidget = () => {\n  const user = useAuth('User', (state) => state.user);\n  const userDisplayName = getDisplayName(user);\n  const initials = getInitials(user);\n\n  return (\n    <Flex direction=\"column\" gap={3} height=\"100%\" justifyContent=\"center\">\n      <Avatar.Item delayMs={0} fallback={initials} />\n      {userDisplayName && (\n        <DisplayNameTypography fontWeight=\"bold\" textTransform=\"none\" textAlign=\"center\">\n          {userDisplayName}\n        </DisplayNameTypography>\n      )}\n      {user?.email && (\n        <Typography variant=\"omega\" textColor=\"neutral600\">\n          {user?.email}\n        </Typography>\n      )}\n      {user?.roles?.length && (\n        <Flex marginTop={2} gap={1} wrap=\"wrap\">\n          {user?.roles?.map((role) => <Badge key={role.id}>{role.name}</Badge>)}\n        </Flex>\n      )}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Key Statistics\n * -----------------------------------------------------------------------------------------------*/\nconst Grid = styled(Box)`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0;\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  overflow: hidden;\n`;\n\nconst GridCell = styled(Box)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.neutral200};\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral200};\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n\n  &:nth-child(2n) {\n    border-right: none;\n  }\n  &:nth-last-child(-n + 2) {\n    border-bottom: none;\n  }\n`;\n\nconst formatNumber = ({ locale, number }: { locale: string; number: number }) => {\n  return new Intl.NumberFormat(locale, {\n    notation: 'compact',\n    maximumFractionDigits: 1,\n  }).format(number);\n};\n\nconst LinkCell = styled(Link)`\n  text-decoration: none;\n  padding: ${({ theme }) => theme.spaces[3]};\n`;\n\nconst KeyStatisticsWidget = () => {\n  const { trackUsage } = useTracking();\n  const { formatMessage, locale } = useIntl();\n  const { data: countDocuments, isLoading: isLoadingCountDocuments } = useGetCountDocumentsQuery();\n  const { data: countKeyStatistics, isLoading: isLoadingKeyStatistics } =\n    useGetKeyStatisticsQuery();\n\n  if (isLoadingKeyStatistics || isLoadingCountDocuments) {\n    return <Widget.Loading />;\n  }\n\n  if (!countKeyStatistics || !countDocuments) {\n    return <Widget.Error />;\n  }\n\n  const keyStatisticsList = {\n    entries: {\n      label: {\n        id: 'widget.key-statistics.list.entries',\n        defaultMessage: 'Entries',\n      },\n      icon: {\n        component: <Files />,\n        background: 'primary100',\n        color: 'primary600',\n      },\n      link: '/content-manager',\n    },\n    assets: {\n      label: {\n        id: 'widget.key-statistics.list.assets',\n        defaultMessage: 'Assets',\n      },\n      icon: {\n        component: <Images />,\n        background: 'warning100',\n        color: 'warning600',\n      },\n      link: '/plugins/upload',\n    },\n    contentTypes: {\n      label: {\n        id: 'widget.key-statistics.list.contentTypes',\n        defaultMessage: 'Content-Types',\n      },\n      icon: {\n        component: <Layout />,\n        background: 'secondary100',\n        color: 'secondary600',\n      },\n      link: '/plugins/content-type-builder',\n    },\n    components: {\n      label: {\n        id: 'widget.key-statistics.list.components',\n        defaultMessage: 'Components',\n      },\n      icon: {\n        component: <Graph />,\n        background: 'alternative100',\n        color: 'alternative600',\n      },\n      link: '/plugins/content-type-builder',\n    },\n    locales: {\n      label: {\n        id: 'widget.key-statistics.list.locales',\n        defaultMessage: 'Locales',\n      },\n      icon: {\n        component: <Earth />,\n        background: 'success100',\n        color: 'success600',\n      },\n      link: '/settings/internationalization',\n    },\n    admins: {\n      label: {\n        id: 'widget.key-statistics.list.admins',\n        defaultMessage: 'Admins',\n      },\n      icon: {\n        component: <User />,\n        background: 'danger100',\n        color: 'danger600',\n      },\n      link: '/settings/users?pageSize=10&page=1&sort=firstname',\n    },\n    webhooks: {\n      label: {\n        id: 'widget.key-statistics.list.webhooks',\n        defaultMessage: 'Webhooks',\n      },\n      icon: {\n        component: <Webhooks />,\n        background: 'alternative100',\n        color: 'alternative600',\n      },\n      link: '/settings/webhooks',\n    },\n    apiTokens: {\n      label: {\n        id: 'widget.key-statistics.list.apiTokens',\n        defaultMessage: 'API Tokens',\n      },\n      icon: {\n        component: <Key />,\n        background: 'neutral100',\n        color: 'neutral600',\n      },\n      link: '/settings/api-tokens?sort=name:ASC',\n    },\n  };\n\n  const { draft, published, modified } = countDocuments ?? {\n    draft: 0,\n    published: 0,\n    modified: 0,\n  };\n\n  const totalCountEntries = draft + published + modified;\n\n  return (\n    <Grid>\n      {Object.entries(keyStatisticsList).map(([key, item]) => {\n        const value = countKeyStatistics?.[key as keyof typeof countKeyStatistics];\n        return (\n          value !== null && (\n            <GridCell\n              as={LinkCell}\n              to={item.link}\n              key={`key-statistics-${key}`}\n              data-testid={`stat-${key}`}\n              onClick={() => trackUsage('didOpenKeyStatisticsWidgetLink', { itemKey: key })}\n            >\n              <Flex alignItems=\"center\" gap={2}>\n                <Flex\n                  padding={2}\n                  borderRadius={1}\n                  background={item.icon.background}\n                  color={item.icon.color}\n                >\n                  {item.icon.component}\n                </Flex>\n                <Flex direction=\"column\" alignItems=\"flex-start\">\n                  <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"neutral500\">\n                    {formatMessage(item.label)}\n                  </Typography>\n                  <Typography variant=\"omega\" fontWeight=\"bold\" textColor=\"neutral800\">\n                    {formatNumber({\n                      locale,\n                      number: key === 'entries' ? totalCountEntries : value,\n                    })}\n                  </Typography>\n                </Flex>\n              </Flex>\n            </GridCell>\n          )\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport { ProfileWidget, KeyStatisticsWidget };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,IAAMA,wBAAwBC,GAAOC,UAAAA;;;AAIrC,IAAMC,gBAAgB,MAAA;;AACpB,QAAMC,OAAOC,QAAQ,QAAQ,CAACC,UAAUA,MAAMF,IAAI;AAClD,QAAMG,kBAAkBC,eAAeJ,IAAAA;AACvC,QAAMK,WAAWC,YAAYN,IAAAA;AAE7B,aACEO,yBAACC,MAAAA;IAAKC,WAAU;IAASC,KAAK;IAAGC,QAAO;IAAOC,gBAAe;;UAC5DC,wBAACC,OAAOC,MAAI;QAACC,SAAS;QAAGC,UAAUZ;;MAClCF,uBACCU,wBAACjB,uBAAAA;QAAsBsB,YAAW;QAAOC,eAAc;QAAOC,WAAU;QACrEjB,UAAAA;;OAGJH,6BAAMqB,cACLR,wBAACf,YAAAA;QAAWwB,SAAQ;QAAQC,WAAU;kBACnCvB,6BAAMqB;;QAGVrB,kCAAMwB,UAANxB,mBAAayB,eACZZ,wBAACL,MAAAA;QAAKkB,WAAW;QAAGhB,KAAK;QAAGiB,MAAK;QAC9B3B,WAAAA,kCAAMwB,UAANxB,mBAAa4B,IAAI,CAACC,aAAShB,wBAACiB,OAAAA;UAAqBD,UAAAA,KAAKE;QAAfF,GAAAA,KAAKG,EAAE;;;;AAKzD;AAKA,IAAMC,OAAOpC,GAAOqC,GAAAA;;;;sBAIE,CAAC,EAAEC,MAAK,MAAOA,MAAMC,OAAOC,UAAU;mBACzC,CAAC,EAAEF,MAAK,MAAOA,MAAMG,YAAY;;;AAIpD,IAAMC,WAAW1C,GAAOqC,GAAAA;6BACK,CAAC,EAAEC,MAAK,MAAOA,MAAMC,OAAOC,UAAU;4BACvC,CAAC,EAAEF,MAAK,MAAOA,MAAMC,OAAOC,UAAU;;;;;;;;;;;;AAalE,IAAMG,eAAe,CAAC,EAAEC,QAAQC,OAAM,MAAsC;AAC1E,SAAO,IAAIC,KAAKC,aAAaH,QAAQ;IACnCI,UAAU;IACVC,uBAAuB;EACzB,CAAA,EAAGC,OAAOL,MAAAA;AACZ;AAEA,IAAMM,WAAWnD,GAAOoD,IAAAA;;aAEX,CAAC,EAAEd,MAAK,MAAOA,MAAMe,OAAO,CAAA,CAAE;;AAG3C,IAAMC,sBAAsB,MAAA;AAC1B,QAAM,EAAEC,WAAU,IAAKC,YAAAA;AACvB,QAAM,EAAEC,eAAeb,OAAM,IAAKc,QAAAA;AAClC,QAAM,EAAEC,MAAMC,gBAAgBC,WAAWC,wBAAuB,IAAKC,0BAAAA;AACrE,QAAM,EAAEJ,MAAMK,oBAAoBH,WAAWI,uBAAsB,IACjEC,yBAAAA;AAEF,MAAID,0BAA0BH,yBAAyB;AACrD,eAAO9C,wBAACmD,OAAOC,SAAO,CAAA,CAAA;EACxB;AAEA,MAAI,CAACJ,sBAAsB,CAACJ,gBAAgB;AAC1C,eAAO5C,wBAACmD,OAAOE,OAAK,CAAA,CAAA;EACtB;AAEA,QAAMC,oBAAoB;IACxBC,SAAS;MACPC,OAAO;QACLrC,IAAI;QACJsC,gBAAgB;MAClB;MACAC,MAAM;QACJC,eAAW3D,wBAAC4D,eAAAA,CAAAA,CAAAA;QACZC,YAAY;QACZC,OAAO;MACT;MACAC,MAAM;IACR;IACAC,QAAQ;MACNR,OAAO;QACLrC,IAAI;QACJsC,gBAAgB;MAClB;MACAC,MAAM;QACJC,eAAW3D,wBAACiE,eAAAA,CAAAA,CAAAA;QACZJ,YAAY;QACZC,OAAO;MACT;MACAC,MAAM;IACR;IACAG,cAAc;MACZV,OAAO;QACLrC,IAAI;QACJsC,gBAAgB;MAClB;MACAC,MAAM;QACJC,eAAW3D,wBAACmE,eAAAA,CAAAA,CAAAA;QACZN,YAAY;QACZC,OAAO;MACT;MACAC,MAAM;IACR;IACAK,YAAY;MACVZ,OAAO;QACLrC,IAAI;QACJsC,gBAAgB;MAClB;MACAC,MAAM;QACJC,eAAW3D,wBAACqE,eAAAA,CAAAA,CAAAA;QACZR,YAAY;QACZC,OAAO;MACT;MACAC,MAAM;IACR;IACAO,SAAS;MACPd,OAAO;QACLrC,IAAI;QACJsC,gBAAgB;MAClB;MACAC,MAAM;QACJC,eAAW3D,wBAACuE,eAAAA,CAAAA,CAAAA;QACZV,YAAY;QACZC,OAAO;MACT;MACAC,MAAM;IACR;IACAS,QAAQ;MACNhB,OAAO;QACLrC,IAAI;QACJsC,gBAAgB;MAClB;MACAC,MAAM;QACJC,eAAW3D,wBAACyE,cAAAA,CAAAA,CAAAA;QACZZ,YAAY;QACZC,OAAO;MACT;MACAC,MAAM;IACR;IACAW,UAAU;MACRlB,OAAO;QACLrC,IAAI;QACJsC,gBAAgB;MAClB;MACAC,MAAM;QACJC,eAAW3D,wBAAC2E,cAAAA,CAAAA,CAAAA;QACZd,YAAY;QACZC,OAAO;MACT;MACAC,MAAM;IACR;IACAa,WAAW;MACTpB,OAAO;QACLrC,IAAI;QACJsC,gBAAgB;MAClB;MACAC,MAAM;QACJC,eAAW3D,wBAAC6E,eAAAA,CAAAA,CAAAA;QACZhB,YAAY;QACZC,OAAO;MACT;MACAC,MAAM;IACR;EACF;AAEA,QAAM,EAAEe,OAAOC,WAAWC,SAAQ,IAAKpC,kBAAkB;IACvDkC,OAAO;IACPC,WAAW;IACXC,UAAU;EACZ;AAEA,QAAMC,oBAAoBH,QAAQC,YAAYC;AAE9C,aACEhF,wBAACoB,MAAAA;cACE8D,OAAO3B,QAAQD,iBAAmBvC,EAAAA,IAAI,CAAC,CAACoE,KAAKC,IAAK,MAAA;AACjD,YAAMC,QAAQrC,yDAAqBmC;AACnC,aACEE,UAAU,YACRrF,wBAAC0B,UAAAA;QACC4D,IAAInD;QACJoD,IAAIH,KAAKrB;QAETyB,eAAa,QAAQL,GAAAA;QACrBM,SAAS,MAAMlD,WAAW,kCAAkC;UAAEmD,SAASP;QAAI,CAAA;QAE3E,cAAAzF,yBAACC,MAAAA;UAAKgG,YAAW;UAAS9F,KAAK;;gBAC7BG,wBAACL,MAAAA;cACCiG,SAAS;cACTnE,cAAc;cACdoC,YAAYuB,KAAK1B,KAAKG;cACtBC,OAAOsB,KAAK1B,KAAKI;wBAEhBsB,KAAK1B,KAAKC;;gBAEbjE,yBAACC,MAAAA;cAAKC,WAAU;cAAS+F,YAAW;;oBAClC3F,wBAACf,YAAAA;kBAAWwB,SAAQ;kBAAKJ,YAAW;kBAAOK,WAAU;kBAClD+B,UAAAA,cAAc2C,KAAK5B,KAAK;;oBAE3BxD,wBAACf,YAAAA;kBAAWwB,SAAQ;kBAAQJ,YAAW;kBAAOK,WAAU;4BACrDiB,aAAa;oBACZC;oBACAC,QAAQsD,QAAQ,YAAYF,oBAAoBI;kBAClD,CAAA;;;;;;SArBD,kBAAkBF,GAAAA,EAAK;IA4BpC,CAAA;;AAGN;",
  "names": ["DisplayNameTypography", "styled", "Typography", "ProfileWidget", "user", "useAuth", "state", "userDisplayName", "getDisplayName", "initials", "getInitials", "_jsxs", "Flex", "direction", "gap", "height", "justifyContent", "_jsx", "Avatar", "Item", "delayMs", "fallback", "fontWeight", "textTransform", "textAlign", "email", "variant", "textColor", "roles", "length", "marginTop", "wrap", "map", "role", "Badge", "name", "id", "Grid", "Box", "theme", "colors", "neutral200", "borderRadius", "GridCell", "formatNumber", "locale", "number", "Intl", "NumberFormat", "notation", "maximumFractionDigits", "format", "LinkCell", "Link", "spaces", "KeyStatisticsWidget", "trackUsage", "useTracking", "formatMessage", "useIntl", "data", "countDocuments", "isLoading", "isLoadingCountDocuments", "useGetCountDocumentsQuery", "countKeyStatistics", "isLoadingKeyStatistics", "useGetKeyStatisticsQuery", "Widget", "Loading", "Error", "keyStatisticsList", "entries", "label", "defaultMessage", "icon", "component", "Files", "background", "color", "link", "assets", "Images", "contentTypes", "Layout", "components", "Graph", "locales", "Earth", "admins", "User", "webhooks", "Webhooks", "apiTokens", "Key", "draft", "published", "modified", "totalCountEntries", "Object", "key", "item", "value", "as", "to", "data-testid", "onClick", "itemKey", "alignItems", "padding"]
}
