{
  "version": 3,
  "sources": ["../../../semver/internal/debug.js", "../../../semver/internal/constants.js", "../../../semver/internal/re.js", "../../../semver/internal/parse-options.js", "../../../semver/internal/identifiers.js", "../../../semver/classes/semver.js", "../../../semver/functions/parse.js", "../../../semver/functions/valid.js", "../../../semver/functions/compare.js", "../../../semver/functions/lt.js"],
  "sourcesContent": ["const debug = (\r\n  typeof process === 'object' &&\r\n  process.env &&\r\n  process.env.NODE_DEBUG &&\r\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\r\n) ? (...args) => console.error('SEMVER', ...args)\r\n  : () => {}\r\n\r\nmodule.exports = debug\r\n", "// Note: this is the semver.org version of the spec that it implements\r\n// Not necessarily the package version of this code.\r\nconst SEMVER_SPEC_VERSION = '2.0.0'\r\n\r\nconst MAX_LENGTH = 256\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\r\n/* istanbul ignore next */ 9007199254740991\r\n\r\n// Max safe segment length for coercion.\r\nconst MAX_SAFE_COMPONENT_LENGTH = 16\r\n\r\n// Max safe length for a build identifier. The max length minus 6 characters for\r\n// the shortest version with a build 0.0.0+BUILD.\r\nconst MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6\r\n\r\nconst RELEASE_TYPES = [\r\n  'major',\r\n  'premajor',\r\n  'minor',\r\n  'preminor',\r\n  'patch',\r\n  'prepatch',\r\n  'prerelease',\r\n]\r\n\r\nmodule.exports = {\r\n  MAX_LENGTH,\r\n  MAX_SAFE_COMPONENT_LENGTH,\r\n  MAX_SAFE_BUILD_LENGTH,\r\n  MAX_SAFE_INTEGER,\r\n  RELEASE_TYPES,\r\n  SEMVER_SPEC_VERSION,\r\n  FLAG_INCLUDE_PRERELEASE: 0b001,\r\n  FLAG_LOOSE: 0b010,\r\n}\r\n", "const {\r\n  MAX_SAFE_COMPONENT_LENGTH,\r\n  MAX_SAFE_BUILD_LENGTH,\r\n  MAX_LENGTH,\r\n} = require('./constants')\r\nconst debug = require('./debug')\r\nexports = module.exports = {}\r\n\r\n// The actual regexps go on exports.re\r\nconst re = exports.re = []\r\nconst safeRe = exports.safeRe = []\r\nconst src = exports.src = []\r\nconst t = exports.t = {}\r\nlet R = 0\r\n\r\nconst LETTERDASHNUMBER = '[a-zA-Z0-9-]'\r\n\r\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\r\n// used internally via the safeRe object since all inputs in this library get\r\n// normalized first to trim and collapse all extra whitespace. The original\r\n// regexes are exported for userland consumption and lower level usage. A\r\n// future breaking change could export the safer regex only with a note that\r\n// all input should have extra whitespace removed.\r\nconst safeRegexReplacements = [\r\n  ['\\\\s', 1],\r\n  ['\\\\d', MAX_LENGTH],\r\n  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],\r\n]\r\n\r\nconst makeSafeRegex = (value) => {\r\n  for (const [token, max] of safeRegexReplacements) {\r\n    value = value\r\n      .split(`${token}*`).join(`${token}{0,${max}}`)\r\n      .split(`${token}+`).join(`${token}{1,${max}}`)\r\n  }\r\n  return value\r\n}\r\n\r\nconst createToken = (name, value, isGlobal) => {\r\n  const safe = makeSafeRegex(value)\r\n  const index = R++\r\n  debug(name, index, value)\r\n  t[name] = index\r\n  src[index] = value\r\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\r\n  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)\r\n}\r\n\r\n// The following Regular Expressions can be used for tokenizing,\r\n// validating, and parsing SemVer version strings.\r\n\r\n// ## Numeric Identifier\r\n// A single `0`, or a non-zero digit followed by zero or more digits.\r\n\r\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\r\ncreateToken('NUMERICIDENTIFIERLOOSE', '\\\\d+')\r\n\r\n// ## Non-numeric Identifier\r\n// Zero or more digits, followed by a letter or hyphen, and then zero or\r\n// more letters, digits, or hyphens.\r\n\r\ncreateToken('NONNUMERICIDENTIFIER', `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)\r\n\r\n// ## Main Version\r\n// Three dot-separated numeric identifiers.\r\n\r\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\r\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\r\n                   `(${src[t.NUMERICIDENTIFIER]})`)\r\n\r\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\r\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\r\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\r\n\r\n// ## Pre-release Version Identifier\r\n// A numeric identifier, or a non-numeric identifier.\r\n\r\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\r\n}|${src[t.NONNUMERICIDENTIFIER]})`)\r\n\r\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\r\n}|${src[t.NONNUMERICIDENTIFIER]})`)\r\n\r\n// ## Pre-release Version\r\n// Hyphen, followed by one or more dot-separated pre-release version\r\n// identifiers.\r\n\r\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\r\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\r\n\r\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\r\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\r\n\r\n// ## Build Metadata Identifier\r\n// Any combination of digits, letters, or hyphens.\r\n\r\ncreateToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)\r\n\r\n// ## Build Metadata\r\n// Plus sign, followed by one or more period-separated build metadata\r\n// identifiers.\r\n\r\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\r\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\r\n\r\n// ## Full Version String\r\n// A main version, followed optionally by a pre-release version and\r\n// build metadata.\r\n\r\n// Note that the only major, minor, patch, and pre-release sections of\r\n// the version string are capturing groups.  The build metadata is not a\r\n// capturing group, because it should not ever be used in version\r\n// comparison.\r\n\r\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\r\n}${src[t.PRERELEASE]}?${\r\n  src[t.BUILD]}?`)\r\n\r\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\r\n\r\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\r\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\r\n// common in the npm registry.\r\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\r\n}${src[t.PRERELEASELOOSE]}?${\r\n  src[t.BUILD]}?`)\r\n\r\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\r\n\r\ncreateToken('GTLT', '((?:<|>)?=?)')\r\n\r\n// Something like \"2.*\" or \"1.2.x\".\r\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\r\n// Only the first item is strictly required.\r\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\r\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\r\n\r\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\r\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\r\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\r\n                   `(?:${src[t.PRERELEASE]})?${\r\n                     src[t.BUILD]}?` +\r\n                   `)?)?`)\r\n\r\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\r\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\r\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\r\n                        `(?:${src[t.PRERELEASELOOSE]})?${\r\n                          src[t.BUILD]}?` +\r\n                        `)?)?`)\r\n\r\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\r\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\r\n\r\n// Coercion.\r\n// Extract anything that could conceivably be a part of a valid semver\r\ncreateToken('COERCE', `${'(^|[^\\\\d])' +\r\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\r\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\r\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\r\n              `(?:$|[^\\\\d])`)\r\ncreateToken('COERCERTL', src[t.COERCE], true)\r\n\r\n// Tilde ranges.\r\n// Meaning is \"reasonably at or greater than\"\r\ncreateToken('LONETILDE', '(?:~>?)')\r\n\r\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\r\nexports.tildeTrimReplace = '$1~'\r\n\r\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\r\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\r\n\r\n// Caret ranges.\r\n// Meaning is \"at least and backwards compatible with\"\r\ncreateToken('LONECARET', '(?:\\\\^)')\r\n\r\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\r\nexports.caretTrimReplace = '$1^'\r\n\r\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\r\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\r\n\r\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\r\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\r\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\r\n\r\n// An expression to strip any whitespace between the gtlt and the thing\r\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\r\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\r\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\r\nexports.comparatorTrimReplace = '$1$2$3'\r\n\r\n// Something like `1.2.3 - 1.2.4`\r\n// Note that these all use the loose form, because they'll be\r\n// checked against either the strict or loose comparator form\r\n// later.\r\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\r\n                   `\\\\s+-\\\\s+` +\r\n                   `(${src[t.XRANGEPLAIN]})` +\r\n                   `\\\\s*$`)\r\n\r\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\r\n                        `\\\\s+-\\\\s+` +\r\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\r\n                        `\\\\s*$`)\r\n\r\n// Star ranges basically just allow anything at all.\r\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\r\n// >=0.0.0 is like a star\r\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$')\r\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$')\r\n", "// parse out just the options we care about\r\nconst looseOption = Object.freeze({ loose: true })\r\nconst emptyOpts = Object.freeze({ })\r\nconst parseOptions = options => {\r\n  if (!options) {\r\n    return emptyOpts\r\n  }\r\n\r\n  if (typeof options !== 'object') {\r\n    return looseOption\r\n  }\r\n\r\n  return options\r\n}\r\nmodule.exports = parseOptions\r\n", "const numeric = /^[0-9]+$/\r\nconst compareIdentifiers = (a, b) => {\r\n  const anum = numeric.test(a)\r\n  const bnum = numeric.test(b)\r\n\r\n  if (anum && bnum) {\r\n    a = +a\r\n    b = +b\r\n  }\r\n\r\n  return a === b ? 0\r\n    : (anum && !bnum) ? -1\r\n    : (bnum && !anum) ? 1\r\n    : a < b ? -1\r\n    : 1\r\n}\r\n\r\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\r\n\r\nmodule.exports = {\r\n  compareIdentifiers,\r\n  rcompareIdentifiers,\r\n}\r\n", "const debug = require('../internal/debug')\r\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\r\nconst { safeRe: re, t } = require('../internal/re')\r\n\r\nconst parseOptions = require('../internal/parse-options')\r\nconst { compareIdentifiers } = require('../internal/identifiers')\r\nclass SemVer {\r\n  constructor (version, options) {\r\n    options = parseOptions(options)\r\n\r\n    if (version instanceof SemVer) {\r\n      if (version.loose === !!options.loose &&\r\n          version.includePrerelease === !!options.includePrerelease) {\r\n        return version\r\n      } else {\r\n        version = version.version\r\n      }\r\n    } else if (typeof version !== 'string') {\r\n      throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`)\r\n    }\r\n\r\n    if (version.length > MAX_LENGTH) {\r\n      throw new TypeError(\r\n        `version is longer than ${MAX_LENGTH} characters`\r\n      )\r\n    }\r\n\r\n    debug('SemVer', version, options)\r\n    this.options = options\r\n    this.loose = !!options.loose\r\n    // this isn't actually relevant for versions, but keep it so that we\r\n    // don't run into trouble passing this.options around.\r\n    this.includePrerelease = !!options.includePrerelease\r\n\r\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\r\n\r\n    if (!m) {\r\n      throw new TypeError(`Invalid Version: ${version}`)\r\n    }\r\n\r\n    this.raw = version\r\n\r\n    // these are actually numbers\r\n    this.major = +m[1]\r\n    this.minor = +m[2]\r\n    this.patch = +m[3]\r\n\r\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\r\n      throw new TypeError('Invalid major version')\r\n    }\r\n\r\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\r\n      throw new TypeError('Invalid minor version')\r\n    }\r\n\r\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\r\n      throw new TypeError('Invalid patch version')\r\n    }\r\n\r\n    // numberify any prerelease numeric ids\r\n    if (!m[4]) {\r\n      this.prerelease = []\r\n    } else {\r\n      this.prerelease = m[4].split('.').map((id) => {\r\n        if (/^[0-9]+$/.test(id)) {\r\n          const num = +id\r\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\r\n            return num\r\n          }\r\n        }\r\n        return id\r\n      })\r\n    }\r\n\r\n    this.build = m[5] ? m[5].split('.') : []\r\n    this.format()\r\n  }\r\n\r\n  format () {\r\n    this.version = `${this.major}.${this.minor}.${this.patch}`\r\n    if (this.prerelease.length) {\r\n      this.version += `-${this.prerelease.join('.')}`\r\n    }\r\n    return this.version\r\n  }\r\n\r\n  toString () {\r\n    return this.version\r\n  }\r\n\r\n  compare (other) {\r\n    debug('SemVer.compare', this.version, this.options, other)\r\n    if (!(other instanceof SemVer)) {\r\n      if (typeof other === 'string' && other === this.version) {\r\n        return 0\r\n      }\r\n      other = new SemVer(other, this.options)\r\n    }\r\n\r\n    if (other.version === this.version) {\r\n      return 0\r\n    }\r\n\r\n    return this.compareMain(other) || this.comparePre(other)\r\n  }\r\n\r\n  compareMain (other) {\r\n    if (!(other instanceof SemVer)) {\r\n      other = new SemVer(other, this.options)\r\n    }\r\n\r\n    return (\r\n      compareIdentifiers(this.major, other.major) ||\r\n      compareIdentifiers(this.minor, other.minor) ||\r\n      compareIdentifiers(this.patch, other.patch)\r\n    )\r\n  }\r\n\r\n  comparePre (other) {\r\n    if (!(other instanceof SemVer)) {\r\n      other = new SemVer(other, this.options)\r\n    }\r\n\r\n    // NOT having a prerelease is > having one\r\n    if (this.prerelease.length && !other.prerelease.length) {\r\n      return -1\r\n    } else if (!this.prerelease.length && other.prerelease.length) {\r\n      return 1\r\n    } else if (!this.prerelease.length && !other.prerelease.length) {\r\n      return 0\r\n    }\r\n\r\n    let i = 0\r\n    do {\r\n      const a = this.prerelease[i]\r\n      const b = other.prerelease[i]\r\n      debug('prerelease compare', i, a, b)\r\n      if (a === undefined && b === undefined) {\r\n        return 0\r\n      } else if (b === undefined) {\r\n        return 1\r\n      } else if (a === undefined) {\r\n        return -1\r\n      } else if (a === b) {\r\n        continue\r\n      } else {\r\n        return compareIdentifiers(a, b)\r\n      }\r\n    } while (++i)\r\n  }\r\n\r\n  compareBuild (other) {\r\n    if (!(other instanceof SemVer)) {\r\n      other = new SemVer(other, this.options)\r\n    }\r\n\r\n    let i = 0\r\n    do {\r\n      const a = this.build[i]\r\n      const b = other.build[i]\r\n      debug('prerelease compare', i, a, b)\r\n      if (a === undefined && b === undefined) {\r\n        return 0\r\n      } else if (b === undefined) {\r\n        return 1\r\n      } else if (a === undefined) {\r\n        return -1\r\n      } else if (a === b) {\r\n        continue\r\n      } else {\r\n        return compareIdentifiers(a, b)\r\n      }\r\n    } while (++i)\r\n  }\r\n\r\n  // preminor will bump the version up to the next minor release, and immediately\r\n  // down to pre-release. premajor and prepatch work the same way.\r\n  inc (release, identifier, identifierBase) {\r\n    switch (release) {\r\n      case 'premajor':\r\n        this.prerelease.length = 0\r\n        this.patch = 0\r\n        this.minor = 0\r\n        this.major++\r\n        this.inc('pre', identifier, identifierBase)\r\n        break\r\n      case 'preminor':\r\n        this.prerelease.length = 0\r\n        this.patch = 0\r\n        this.minor++\r\n        this.inc('pre', identifier, identifierBase)\r\n        break\r\n      case 'prepatch':\r\n        // If this is already a prerelease, it will bump to the next version\r\n        // drop any prereleases that might already exist, since they are not\r\n        // relevant at this point.\r\n        this.prerelease.length = 0\r\n        this.inc('patch', identifier, identifierBase)\r\n        this.inc('pre', identifier, identifierBase)\r\n        break\r\n      // If the input is a non-prerelease version, this acts the same as\r\n      // prepatch.\r\n      case 'prerelease':\r\n        if (this.prerelease.length === 0) {\r\n          this.inc('patch', identifier, identifierBase)\r\n        }\r\n        this.inc('pre', identifier, identifierBase)\r\n        break\r\n\r\n      case 'major':\r\n        // If this is a pre-major version, bump up to the same major version.\r\n        // Otherwise increment major.\r\n        // 1.0.0-5 bumps to 1.0.0\r\n        // 1.1.0 bumps to 2.0.0\r\n        if (\r\n          this.minor !== 0 ||\r\n          this.patch !== 0 ||\r\n          this.prerelease.length === 0\r\n        ) {\r\n          this.major++\r\n        }\r\n        this.minor = 0\r\n        this.patch = 0\r\n        this.prerelease = []\r\n        break\r\n      case 'minor':\r\n        // If this is a pre-minor version, bump up to the same minor version.\r\n        // Otherwise increment minor.\r\n        // 1.2.0-5 bumps to 1.2.0\r\n        // 1.2.1 bumps to 1.3.0\r\n        if (this.patch !== 0 || this.prerelease.length === 0) {\r\n          this.minor++\r\n        }\r\n        this.patch = 0\r\n        this.prerelease = []\r\n        break\r\n      case 'patch':\r\n        // If this is not a pre-release version, it will increment the patch.\r\n        // If it is a pre-release it will bump up to the same patch version.\r\n        // 1.2.0-5 patches to 1.2.0\r\n        // 1.2.0 patches to 1.2.1\r\n        if (this.prerelease.length === 0) {\r\n          this.patch++\r\n        }\r\n        this.prerelease = []\r\n        break\r\n      // This probably shouldn't be used publicly.\r\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\r\n      case 'pre': {\r\n        const base = Number(identifierBase) ? 1 : 0\r\n\r\n        if (!identifier && identifierBase === false) {\r\n          throw new Error('invalid increment argument: identifier is empty')\r\n        }\r\n\r\n        if (this.prerelease.length === 0) {\r\n          this.prerelease = [base]\r\n        } else {\r\n          let i = this.prerelease.length\r\n          while (--i >= 0) {\r\n            if (typeof this.prerelease[i] === 'number') {\r\n              this.prerelease[i]++\r\n              i = -2\r\n            }\r\n          }\r\n          if (i === -1) {\r\n            // didn't increment anything\r\n            if (identifier === this.prerelease.join('.') && identifierBase === false) {\r\n              throw new Error('invalid increment argument: identifier already exists')\r\n            }\r\n            this.prerelease.push(base)\r\n          }\r\n        }\r\n        if (identifier) {\r\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\r\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\r\n          let prerelease = [identifier, base]\r\n          if (identifierBase === false) {\r\n            prerelease = [identifier]\r\n          }\r\n          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\r\n            if (isNaN(this.prerelease[1])) {\r\n              this.prerelease = prerelease\r\n            }\r\n          } else {\r\n            this.prerelease = prerelease\r\n          }\r\n        }\r\n        break\r\n      }\r\n      default:\r\n        throw new Error(`invalid increment argument: ${release}`)\r\n    }\r\n    this.raw = this.format()\r\n    if (this.build.length) {\r\n      this.raw += `+${this.build.join('.')}`\r\n    }\r\n    return this\r\n  }\r\n}\r\n\r\nmodule.exports = SemVer\r\n", "const SemVer = require('../classes/semver')\r\nconst parse = (version, options, throwErrors = false) => {\r\n  if (version instanceof SemVer) {\r\n    return version\r\n  }\r\n  try {\r\n    return new SemVer(version, options)\r\n  } catch (er) {\r\n    if (!throwErrors) {\r\n      return null\r\n    }\r\n    throw er\r\n  }\r\n}\r\n\r\nmodule.exports = parse\r\n", "const parse = require('./parse')\r\nconst valid = (version, options) => {\r\n  const v = parse(version, options)\r\n  return v ? v.version : null\r\n}\r\nmodule.exports = valid\r\n", "const SemVer = require('../classes/semver')\r\nconst compare = (a, b, loose) =>\r\n  new SemVer(a, loose).compare(new SemVer(b, loose))\r\n\r\nmodule.exports = compare\r\n", "const compare = require('./compare')\r\nconst lt = (a, b, loose) => compare(a, b, loose) < 0\r\nmodule.exports = lt\r\n"],
  "mappings": "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",
  "names": []
}
