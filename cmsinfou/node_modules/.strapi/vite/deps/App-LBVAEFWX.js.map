{
  "version": 3,
  "sources": ["../../../@strapi/plugin-cloud/admin/src/utils/getTrad.ts", "../../../@strapi/plugin-cloud/admin/src/components/CLIDeployTabs.tsx", "../../../@strapi/plugin-cloud/admin/src/components/CloudDeploy.tsx", "../../../@strapi/plugin-cloud/admin/src/components/CloudFree.tsx", "../../../@strapi/plugin-cloud/admin/src/pages/HomePage.tsx", "../../../@strapi/plugin-cloud/admin/src/pages/App.tsx"],
  "sourcesContent": ["import { pluginId } from '../pluginId';\n\nconst getTrad = (id: string) => `${pluginId}.${id}`;\n\nexport { getTrad };\n", "import { useClipboard } from '@strapi/admin/strapi-admin';\nimport { Box, Typography, Tabs, IconButton, Flex, Tooltip } from '@strapi/design-system';\nimport { Duplicate } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../utils/getTrad';\n\nconst CopyCommandButton = ({ command }: { command: string }) => {\n  const { formatMessage } = useIntl();\n\n  const { copy } = useClipboard();\n\n  const copyLabel = formatMessage({\n    id: getTrad('Homepage.deploy.cli.copy'),\n    defaultMessage: 'Copy',\n  });\n\n  const handleCopy = async () => await copy(command);\n\n  return (\n    <Tooltip label={copyLabel}>\n      <IconButton size=\"XS\" variant=\"ghost\" label={copyLabel} onClick={handleCopy}>\n        <Duplicate />\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nconst CLIDeployTabs = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box minWidth=\"28em\" maxWidth=\"28em\" paddingTop={8}>\n      <Tabs.Root defaultValue=\"yarn\">\n        <Tabs.List\n          aria-label={formatMessage({\n            id: getTrad('Homepage.deploy.cli.ariaLabel'),\n            defaultMessage: 'Package manager',\n          })}\n        >\n          <Tabs.Trigger value=\"yarn\">\n            <Typography variant=\"omega\">Yarn</Typography>\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"npm\">\n            <Typography variant=\"omega\">NPM</Typography>\n          </Tabs.Trigger>\n        </Tabs.List>\n\n        <Tabs.Content value=\"yarn\">\n          <Box background=\"neutral100\">\n            <Box padding={4}>\n              <Flex direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                <Typography tag=\"code\" textColor=\"neutral800\">\n                  yarn strapi deploy\n                </Typography>\n                <CopyCommandButton command=\"yarn strapi deploy\" />\n              </Flex>\n            </Box>\n          </Box>\n        </Tabs.Content>\n        <Tabs.Content value=\"npm\">\n          <Box background=\"neutral100\">\n            <Box padding={4}>\n              <Flex direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n                <Typography tag=\"code\" textColor=\"neutral800\">\n                  npm run deploy\n                </Typography>\n                <CopyCommandButton command=\"npm run deploy\" />\n              </Flex>\n            </Box>\n          </Box>\n        </Tabs.Content>\n      </Tabs.Root>\n    </Box>\n  );\n};\n\nexport { CLIDeployTabs };\n", "/*\n *\n * Cloud component\n *\n */\n\nimport {\n  Box,\n  Flex,\n  Typography,\n  Link,\n  LinkButton,\n  Tabs,\n  Badge,\n  BaseLink,\n} from '@strapi/design-system';\nimport { ExternalLink, CloudUpload, Code } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { CLIDeployTabs } from '../components/CLIDeployTabs';\nimport { getTrad } from '../utils/getTrad';\n\nconst CloudDeploy = () => {\n  const { formatMessage } = useIntl();\n\n  const documentationLink = formatMessage({\n    id: getTrad('Homepage.deploy.documentation'),\n    defaultMessage: 'Having trouble? Check our documentation',\n  });\n\n  return (\n    <Box paddingBottom={5}>\n      <Flex direction=\"column\">\n        <Typography variant=\"delta\" paddingBottom={5} paddingTop={2}>\n          {formatMessage({\n            id: getTrad('Homepage.deploy.title'),\n            defaultMessage: 'Choose your preferred deployment method',\n          })}\n        </Typography>\n      </Flex>\n\n      <Tabs.Root defaultValue=\"cloud\" variant=\"simple\">\n        <Flex direction=\"column\">\n          <Tabs.List\n            aria-label={formatMessage({\n              id: getTrad('Homepage.deploy.ariaLabel'),\n              defaultMessage: 'Deployment options',\n            })}\n          >\n            <Tabs.Trigger value=\"cloud\">\n              <Box minWidth={{ initial: '10em', medium: '20em' }}>\n                <Flex direction=\"row\" gap={2} justifyContent=\"center\">\n                  <Typography variant=\"omega\">Cloud</Typography>\n                  <Badge active>\n                    {formatMessage({\n                      id: getTrad('Homepage.deploy.git.badge'),\n                      defaultMessage: 'Recommended',\n                    })}\n                  </Badge>\n                </Flex>\n              </Box>\n            </Tabs.Trigger>\n\n            <Tabs.Trigger value=\"cli\">\n              <Box minWidth={{ initial: '10em', medium: '20em' }}>\n                <Flex justifyContent=\"center\">\n                  <Typography variant=\"omega\">CLI</Typography>\n                </Flex>\n              </Box>\n            </Tabs.Trigger>\n          </Tabs.List>\n        </Flex>\n\n        <Box>\n          <Tabs.Content value=\"cloud\">\n            <Flex direction=\"column\" paddingTop={6}>\n              <Box>\n                <BaseLink\n                  isExternal\n                  href=\"https://cloud.strapi.io/login?utm_campaign=Strapi%20Cloud%20Plugin&utm_source=In-Product&utm_medium=CTA\"\n                >\n                  <CloudUpload height={40} width={40} fill=\"buttonPrimary600\" />\n                </BaseLink>\n              </Box>\n              <Box paddingBottom={2} paddingTop={5}>\n                <Typography variant=\"delta\" textColor=\"neutral1000\">\n                  {formatMessage({\n                    id: getTrad('Homepage.deploy.git.title'),\n                    defaultMessage: 'Deploy to Strapi Cloud',\n                  })}\n                </Typography>\n              </Box>\n              <Typography variant=\"omega\" textColor=\"neutral600\">\n                {formatMessage({\n                  id: getTrad('Homepage.deploy.git.subTitle'),\n                  defaultMessage: 'Deploy a GitHub or GitLab project directly within Strapi Cloud',\n                })}\n              </Typography>\n              <Box paddingTop={8}>\n                <LinkButton\n                  variant=\"default\"\n                  endIcon={<ExternalLink fill=\"neutral0\" />}\n                  href=\"https://cloud.strapi.io/login?utm_campaign=Strapi%20Cloud%20Plugin&utm_source=In-Product&utm_medium=CTA\"\n                  isExternal\n                  size=\"M\"\n                >\n                  {formatMessage({\n                    id: getTrad('Homepage.deploy.git.button'),\n                    defaultMessage: 'Deploy to Strapi Cloud',\n                  })}\n                </LinkButton>\n              </Box>\n              <Box paddingTop={5}>\n                <Link isExternal href=\"https://docs.strapi.io/cloud/getting-started/deployment\">\n                  {documentationLink}\n                </Link>\n              </Box>\n            </Flex>\n          </Tabs.Content>\n\n          <Tabs.Content value=\"cli\">\n            <Flex direction=\"column\" paddingTop={6}>\n              <Code height={40} width={40} fill=\"buttonPrimary600\" />\n              <Box paddingBottom={2} paddingTop={5}>\n                <Typography variant=\"delta\" textColor=\"neutral1000\">\n                  {formatMessage({\n                    id: getTrad('Homepage.deploy.cli.title'),\n                    defaultMessage: 'Deploy via CLI',\n                  })}\n                </Typography>\n              </Box>\n              <Typography variant=\"omega\" textColor=\"neutral600\">\n                {formatMessage({\n                  id: getTrad('Homepage.deploy.cli.subTitle'),\n                  defaultMessage: 'Use the command line to deploy your Strapi project directly',\n                })}\n              </Typography>\n\n              <CLIDeployTabs />\n\n              <Box paddingTop={5}>\n                <Link isExternal href=\"https://docs.strapi.io/cloud/getting-started/deployment-cli\">\n                  {documentationLink}\n                </Link>\n              </Box>\n            </Flex>\n          </Tabs.Content>\n        </Box>\n      </Tabs.Root>\n    </Box>\n  );\n};\n\nexport { CloudDeploy };\n", "import { Box, Flex, Typography } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../utils/getTrad';\n\nconst CloudFree = () => {\n  const { formatMessage } = useIntl();\n\n  const features = [\n    { id: 'api', message: '10K API requests' },\n    { id: 'storage', message: '10 GB storage' },\n    { id: 'bandwidth', message: '10 GB asset bandwidth' },\n    { id: 'cdn', message: 'Global CDN' },\n    { id: 'pushToDeploy', message: 'Push to deploy' },\n  ];\n\n  return (\n    <Box>\n      <Box paddingBottom={10}>\n        <Flex direction=\"column\">\n          <Flex direction=\"row\" wrap=\"wrap\">\n            {features.map(({ id, message }) => (\n              <Flex key={id} paddingRight={5}>\n                <Check fill=\"primary500\" />\n                <Typography variant=\"omega\" paddingLeft={1}>\n                  {formatMessage({\n                    id: getTrad(`Homepage.freePlan.${id}`),\n                    defaultMessage: message,\n                  })}\n                </Typography>\n              </Flex>\n            ))}\n          </Flex>\n        </Flex>\n      </Box>\n    </Box>\n  );\n};\n\nexport { CloudFree };\n", "/*\n *\n * HomePage\n *\n */\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { CloudDeploy } from '../components/CloudDeploy';\nimport { CloudFree } from '../components/CloudFree';\nimport { getTrad } from '../utils/getTrad';\n\nexport const HomePage = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box paddingLeft={6} paddingRight={6} paddingTop={5} paddingBottom={3} background=\"neutral100\">\n      <Flex direction=\"column\" gap={2}>\n        <Typography variant=\"alpha\">\n          {formatMessage({\n            id: getTrad('Homepage.title'),\n            defaultMessage: 'Deploy with Strapi Cloud for Free!',\n          })}\n        </Typography>\n\n        <Flex direction={{ initial: 'row', medium: 'column' }}>\n          <Typography variant=\"epsilon\" textColor=\"neutral600\">\n            {formatMessage({\n              id: getTrad('Homepage.subTitle'),\n              defaultMessage:\n                'Start with our completely free plan - no credit card required, no time limits.',\n            })}\n          </Typography>\n        </Flex>\n      </Flex>\n\n      <Box padding={8}>\n        <CloudFree />\n        <Box paddingTop={8}>\n          <Box padding={6} background=\"neutral0\" shadow=\"tableShadow\">\n            <CloudDeploy />\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n", "/**\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n *\n */\n\nimport { Page } from '@strapi/strapi/admin';\nimport { Routes, Route } from 'react-router-dom';\n\nimport { HomePage } from './HomePage';\n\nconst App = () => {\n  return (\n    <div>\n      <Routes>\n        <Route index element={<HomePage />} />\n        <Route path=\"*\" element={<Page.Error />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport { App };\n"],
  "mappings": "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",
  "names": ["getTrad", "id", "pluginId", "CopyCommandButton", "command", "formatMessage", "useIntl", "copy", "useClipboard", "copyLabel", "id", "getTrad", "defaultMessage", "handleCopy", "_jsx", "Tooltip", "label", "IconButton", "size", "variant", "onClick", "Duplicate", "CLIDeployTabs", "Box", "minWidth", "maxWidth", "paddingTop", "_jsxs", "Tabs", "Root", "defaultValue", "List", "aria-label", "Trigger", "value", "Typography", "Content", "background", "padding", "Flex", "direction", "justifyContent", "alignItems", "tag", "textColor", "CloudDeploy", "formatMessage", "useIntl", "documentationLink", "id", "getTrad", "defaultMessage", "_jsxs", "Box", "paddingBottom", "_jsx", "Flex", "direction", "Typography", "variant", "paddingTop", "Tabs", "Root", "defaultValue", "List", "aria-label", "Trigger", "value", "minWidth", "initial", "medium", "gap", "justifyContent", "Badge", "active", "Content", "BaseLink", "isExternal", "href", "CloudUpload", "height", "width", "fill", "textColor", "LinkButton", "endIcon", "ExternalLink", "size", "Link", "Code", "CLIDeployTabs", "CloudFree", "formatMessage", "useIntl", "features", "id", "message", "_jsx", "Box", "paddingBottom", "Flex", "direction", "wrap", "map", "_jsxs", "paddingRight", "Check", "fill", "Typography", "variant", "paddingLeft", "getTrad", "defaultMessage", "HomePage", "formatMessage", "useIntl", "_jsxs", "Box", "paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "background", "Flex", "direction", "gap", "_jsx", "Typography", "variant", "id", "getTrad", "defaultMessage", "initial", "medium", "textColor", "padding", "CloudFree", "shadow", "CloudDeploy", "App", "_jsx", "div", "_jsxs", "Routes", "Route", "index", "element", "HomePage", "path", "Page", "Error"]
}
