{
  "version": 3,
  "sources": ["../../../@strapi/admin/admin/src/hooks/useOnce.ts", "../../../@strapi/admin/admin/src/pages/Settings/components/Tokens/Table.tsx"],
  "sourcesContent": ["/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from 'react';\n\nexport const useOnce = (effect: React.EffectCallback) => React.useEffect(effect, emptyDeps);\n\nconst emptyDeps: React.DependencyList = [];\n", "import * as React from 'react';\n\nimport {\n  Box,\n  Flex,\n  IconButton,\n  Typography,\n  useCollator,\n  Dialog,\n  LinkButton,\n} from '@strapi/design-system';\nimport { Pencil, Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { ApiToken } from '../../../../../../shared/contracts/api-token';\nimport { SanitizedTransferToken } from '../../../../../../shared/contracts/transfer';\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { tours } from '../../../../components/GuidedTour/Tours';\nimport { RelativeTime } from '../../../../components/RelativeTime';\nimport { Table as TableImpl } from '../../../../components/Table';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useQueryParams } from '../../../../hooks/useQueryParams';\n\nimport type { Data } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * Table\n * -----------------------------------------------------------------------------------------------*/\n\ninterface TableProps\n  extends Pick<TableImpl.Props<SanitizedTransferToken | ApiToken>, 'headers' | 'isLoading'> {\n  onConfirmDelete: (id: Data.ID) => void;\n  permissions: {\n    canRead: boolean;\n    canDelete: boolean;\n    canUpdate: boolean;\n  };\n  tokens: SanitizedTransferToken[] | ApiToken[];\n  tokenType: 'api-token' | 'transfer-token';\n}\n\nconst Table = ({\n  permissions,\n  headers = [],\n  isLoading = false,\n  tokens = [],\n  onConfirmDelete,\n  tokenType,\n}: TableProps) => {\n  const [{ query }] = useQueryParams<{ sort?: string }>();\n  const { formatMessage, locale } = useIntl();\n  const [, sortOrder] = query && query.sort ? query.sort.split(':') : [undefined, 'ASC'];\n  const navigate = useNavigate();\n  const { trackUsage } = useTracking();\n  const formatter = useCollator(locale);\n\n  const sortedTokens = [...tokens].sort((a, b) => {\n    return sortOrder === 'DESC'\n      ? formatter.compare(b.name, a.name)\n      : formatter.compare(a.name, b.name);\n  });\n\n  const { canDelete, canUpdate, canRead } = permissions;\n\n  const handleRowClick = (id: Data.ID) => () => {\n    if (canRead) {\n      trackUsage('willEditTokenFromList', {\n        tokenType,\n      });\n      navigate(id.toString());\n    }\n  };\n\n  return (\n    <TableImpl.Root headers={headers} rows={sortedTokens} isLoading={isLoading}>\n      <TableImpl.Content>\n        <TableImpl.Head>\n          {headers.map((header) => (\n            <TableImpl.HeaderCell key={header.name} {...header} />\n          ))}\n        </TableImpl.Head>\n        <TableImpl.Empty />\n        <TableImpl.Loading />\n        <TableImpl.Body>\n          {sortedTokens.map((token) => {\n            const GuidedTourTooltip =\n              token.name === 'Read Only' ? tours.apiTokens.ManageAPIToken : React.Fragment;\n            return (\n              <TableImpl.Row key={token.id} onClick={handleRowClick(token.id)}>\n                <TableImpl.Cell maxWidth=\"25rem\">\n                  <Typography textColor=\"neutral800\" fontWeight=\"bold\" ellipsis>\n                    {token.name}\n                  </Typography>\n                </TableImpl.Cell>\n                <TableImpl.Cell maxWidth=\"25rem\">\n                  <Typography textColor=\"neutral800\" ellipsis>\n                    {token.description}\n                  </Typography>\n                </TableImpl.Cell>\n                <TableImpl.Cell>\n                  <Typography textColor=\"neutral800\">\n                    {/* @ts-expect-error One of the tokens doesn't have createdAt */}\n                    <RelativeTime timestamp={new Date(token.createdAt)} />\n                  </Typography>\n                </TableImpl.Cell>\n                <TableImpl.Cell>\n                  {token.lastUsedAt && (\n                    <Typography textColor=\"neutral800\">\n                      <RelativeTime\n                        timestamp={new Date(token.lastUsedAt)}\n                        customIntervals={[\n                          {\n                            unit: 'hours',\n                            threshold: 1,\n                            text: formatMessage({\n                              id: 'Settings.apiTokens.lastHour',\n                              defaultMessage: 'last hour',\n                            }),\n                          },\n                        ]}\n                      />\n                    </Typography>\n                  )}\n                </TableImpl.Cell>\n                {canUpdate || canRead || canDelete ? (\n                  <TableImpl.Cell>\n                    <Flex justifyContent=\"end\">\n                      <GuidedTourTooltip>\n                        {canUpdate && <UpdateButton tokenName={token.name} tokenId={token.id} />}\n                      </GuidedTourTooltip>\n                      {canDelete && (\n                        <DeleteButton\n                          tokenName={token.name}\n                          onClickDelete={() => onConfirmDelete?.(token.id)}\n                          tokenType={tokenType}\n                        />\n                      )}\n                    </Flex>\n                  </TableImpl.Cell>\n                ) : null}\n              </TableImpl.Row>\n            );\n          })}\n        </TableImpl.Body>\n      </TableImpl.Content>\n    </TableImpl.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * CRUD Buttons\n * -----------------------------------------------------------------------------------------------*/\n\nconst MESSAGES_MAP = {\n  edit: {\n    id: 'app.component.table.edit',\n    defaultMessage: 'Edit {target}',\n  },\n  read: {\n    id: 'app.component.table.read',\n    defaultMessage: 'Read {target}',\n  },\n};\n\ninterface DefaultButtonProps {\n  tokenName: string;\n  tokenId: Data.ID;\n  buttonType?: 'edit' | 'read';\n  children: React.ReactNode;\n}\n\nconst DefaultButton = ({\n  tokenName,\n  tokenId,\n  buttonType = 'edit',\n  children,\n}: DefaultButtonProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <LinkButtonStyled\n      tag={NavLink}\n      to={tokenId.toString()}\n      onClick={(e: React.MouseEvent) => e.stopPropagation()}\n      title={formatMessage(MESSAGES_MAP[buttonType], { target: tokenName })}\n      variant=\"ghost\"\n      size=\"S\"\n    >\n      {children}\n    </LinkButtonStyled>\n  );\n};\n\nconst LinkButtonStyled = styled(LinkButton)`\n  padding: 0.7rem;\n\n  & > span {\n    display: flex;\n  }\n`;\n\ninterface DeleteButtonProps extends Pick<ButtonProps, 'tokenName'>, Pick<TableProps, 'tokenType'> {\n  onClickDelete: () => void;\n}\n\nconst DeleteButton = ({ tokenName, onClickDelete, tokenType }: DeleteButtonProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const handleClickDelete = () => {\n    trackUsage('willDeleteToken', {\n      tokenType,\n    });\n    onClickDelete();\n  };\n\n  return (\n    <Dialog.Root>\n      <Box<'div'> paddingLeft={1} onClick={(e) => e.stopPropagation()}>\n        <Dialog.Trigger>\n          <IconButton\n            label={formatMessage(\n              {\n                id: 'global.delete-target',\n                defaultMessage: 'Delete {target}',\n              },\n              { target: `${tokenName}` }\n            )}\n            name=\"delete\"\n            variant=\"ghost\"\n          >\n            <Trash />\n          </IconButton>\n        </Dialog.Trigger>\n        <ConfirmDialog onConfirm={handleClickDelete} />\n      </Box>\n    </Dialog.Root>\n  );\n};\n\ninterface ButtonProps {\n  tokenName: string;\n  tokenId: Data.ID;\n}\n\nconst UpdateButton = ({ tokenName, tokenId }: ButtonProps) => {\n  return (\n    <DefaultButton tokenName={tokenName} tokenId={tokenId}>\n      <Pencil />\n    </DefaultButton>\n  );\n};\n\nexport { Table };\nexport type { TableProps };\n"],
  "mappings": "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",
  "names": ["useOnce", "effect", "useEffect", "emptyDeps", "Table", "permissions", "headers", "isLoading", "tokens", "onConfirmDelete", "tokenType", "query", "useQueryParams", "formatMessage", "locale", "useIntl", "sortOrder", "sort", "split", "undefined", "navigate", "useNavigate", "trackUsage", "useTracking", "formatter", "useCollator", "sortedTokens", "a", "b", "compare", "name", "canDelete", "canUpdate", "canRead", "handleRowClick", "id", "toString", "_jsx", "TableImpl", "Root", "rows", "_jsxs", "Content", "Head", "map", "header", "HeaderCell", "Empty", "Loading", "Body", "token", "GuidedTourTooltip", "tours", "apiTokens", "ManageAPIToken", "Fragment", "Row", "onClick", "Cell", "maxWidth", "Typography", "textColor", "fontWeight", "ellipsis", "description", "RelativeTime", "timestamp", "Date", "createdAt", "lastUsedAt", "customIntervals", "unit", "threshold", "text", "defaultMessage", "Flex", "justifyContent", "UpdateButton", "tokenName", "tokenId", "DeleteButton", "onClickDelete", "MESSAGES_MAP", "edit", "read", "DefaultButton", "buttonType", "children", "LinkButtonStyled", "tag", "NavLink", "to", "e", "stopPropagation", "title", "target", "variant", "size", "styled", "LinkButton", "handleClickDelete", "Dialog", "Box", "paddingLeft", "Trigger", "IconButton", "label", "Trash", "ConfirmDialog", "onConfirm", "Pencil"]
}
