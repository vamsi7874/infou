{
  "version": 3,
  "sources": ["../../../@strapi/content-releases/admin/src/components/RelativeTime.tsx", "../../../@strapi/content-releases/admin/src/components/ReleaseModal.tsx", "../../../@strapi/content-releases/admin/src/pages/ReleasesPage.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { Duration, intervalToDuration, isPast } from 'date-fns';\nimport { useIntl } from 'react-intl';\n\nconst intervals: Array<keyof Duration> = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'];\n\ninterface CustomInterval {\n  unit: keyof Duration;\n  text: string;\n  threshold: number;\n}\n\ninterface RelativeTimeProps extends React.ComponentPropsWithoutRef<'time'> {\n  timestamp: Date;\n  customIntervals?: CustomInterval[];\n}\n\n/**\n * Displays the relative time between a given timestamp and the current time.\n * You can display a custom message for given time intervals by passing an array of custom intervals.\n *\n * @example\n * ```jsx\n * <caption>Display \"last hour\" if the timestamp is less than an hour ago</caption>\n * <RelativeTime\n *  timestamp={new Date('2021-01-01')}\n *  customIntervals={[\n *   { unit: 'hours', threshold: 1, text: 'last hour' },\n *  ]}\n * ```\n */\nconst RelativeTime = React.forwardRef<HTMLTimeElement, RelativeTimeProps>(\n  ({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {\n    const { formatRelativeTime, formatDate, formatTime } = useIntl();\n\n    /**\n     * TODO: make this auto-update, like a clock.\n     */\n    const interval = intervalToDuration({\n      start: timestamp,\n      end: Date.now(),\n      // see https://github.com/date-fns/date-fns/issues/2891 â€“ No idea why it's all partial it returns it every time.\n    }) as Required<Duration>;\n\n    const unit = intervals.find((intervalUnit) => {\n      return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);\n    })!;\n\n    const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];\n\n    // Display custom text if interval is less than the threshold\n    const customInterval = customIntervals.find(\n      (custom) => interval[custom.unit] < custom.threshold\n    );\n\n    const displayText = customInterval\n      ? customInterval.text\n      : formatRelativeTime(relativeTime, unit, { numeric: 'auto' });\n\n    return (\n      <time\n        ref={forwardedRef}\n        dateTime={timestamp.toISOString()}\n        role=\"time\"\n        title={`${formatDate(timestamp)} ${formatTime(timestamp)}`}\n        {...restProps}\n      >\n        {displayText}\n      </time>\n    );\n  }\n);\n\nexport { RelativeTime };\nexport type { CustomInterval, RelativeTimeProps };\n", "import * as React from 'react';\n\nimport {\n  Button,\n  Modal,\n  TextInput,\n  Typography,\n  Checkbox,\n  Flex,\n  Box,\n  DatePicker,\n  TimePicker,\n  Combobox,\n  ComboboxOption,\n  Field,\n} from '@strapi/design-system';\nimport { formatISO } from 'date-fns';\nimport { utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';\nimport { Formik, Form, useFormikContext } from 'formik';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\n\nimport { pluginId } from '../pluginId';\nimport { getTimezones } from '../utils/time';\nimport { RELEASE_SCHEMA } from '../validation/schemas';\n\nexport interface FormValues {\n  name: string;\n  date?: string;\n  time: string;\n  timezone: string | null;\n  isScheduled?: boolean;\n  scheduledAt: Date | null;\n}\n\ninterface ReleaseModalProps {\n  handleClose: () => void;\n  handleSubmit: (values: FormValues) => void;\n  isLoading?: boolean;\n  initialValues: FormValues;\n  open?: boolean;\n}\n\nexport const ReleaseModal = ({\n  handleClose,\n  open,\n  handleSubmit,\n  initialValues,\n  isLoading = false,\n}: ReleaseModalProps) => {\n  const { formatMessage } = useIntl();\n  const { pathname } = useLocation();\n  const isCreatingRelease = pathname === `/plugins/${pluginId}`;\n  // Set default first timezone from the list if no system timezone detected\n  const { timezoneList, systemTimezone = { value: 'UTC+00:00-Africa/Abidjan ' } } = getTimezones(\n    initialValues.scheduledAt ? new Date(initialValues.scheduledAt) : new Date()\n  );\n\n  /**\n   * Generate scheduled time using selected date, time and timezone\n   */\n  const getScheduledTimestamp = (values: FormValues) => {\n    const { date, time, timezone } = values;\n    if (!date || !time || !timezone) return null;\n    const timezoneWithoutOffset = timezone.split('&')[1];\n    return zonedTimeToUtc(`${date} ${time}`, timezoneWithoutOffset);\n  };\n\n  /**\n   * Get timezone with offset to show the selected value in the dropdown\n   */\n  const getTimezoneWithOffset = () => {\n    const currentTimezone = timezoneList.find(\n      (timezone) => timezone.value.split('&')[1] === initialValues.timezone\n    );\n    return currentTimezone?.value || systemTimezone.value;\n  };\n\n  return (\n    <Modal.Root open={open} onOpenChange={handleClose}>\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>\n            {formatMessage(\n              {\n                id: 'content-releases.modal.title',\n                defaultMessage:\n                  '{isCreatingRelease, select, true {New release} other {Edit release}}',\n              },\n              { isCreatingRelease: isCreatingRelease }\n            )}\n          </Modal.Title>\n        </Modal.Header>\n        <Formik\n          onSubmit={(values) => {\n            handleSubmit({\n              ...values,\n              timezone: values.timezone ? values.timezone.split('&')[1] : null,\n              scheduledAt: values.isScheduled ? getScheduledTimestamp(values) : null,\n            });\n          }}\n          initialValues={{\n            ...initialValues,\n            timezone: initialValues.timezone ? getTimezoneWithOffset() : systemTimezone.value,\n          }}\n          validationSchema={RELEASE_SCHEMA}\n          validateOnChange={false}\n        >\n          {({ values, errors, handleChange, setFieldValue }) => {\n            return (\n              <Form>\n                <Modal.Body>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    <Field.Root\n                      name=\"name\"\n                      error={\n                        errors.name &&\n                        formatMessage({ id: errors.name, defaultMessage: errors.name })\n                      }\n                      required\n                    >\n                      <Field.Label>\n                        {formatMessage({\n                          id: 'content-releases.modal.form.input.label.release-name',\n                          defaultMessage: 'Name',\n                        })}\n                      </Field.Label>\n                      <TextInput value={values.name} onChange={handleChange} />\n                      <Field.Error />\n                    </Field.Root>\n                    <Box width=\"max-content\">\n                      <Checkbox\n                        name=\"isScheduled\"\n                        checked={values.isScheduled}\n                        onCheckedChange={(checked) => {\n                          setFieldValue('isScheduled', checked);\n                          if (!checked) {\n                            // Clear scheduling info from a release on unchecking schedule release, which reset scheduling info in DB\n                            setFieldValue('date', null);\n                            setFieldValue('time', '');\n                            setFieldValue('timezone', null);\n                          } else {\n                            // On ticking back schedule release date, time and timezone should be restored to the initial state\n                            setFieldValue('date', initialValues.date);\n                            setFieldValue('time', initialValues.time);\n                            setFieldValue(\n                              'timezone',\n                              initialValues.timezone ?? systemTimezone?.value\n                            );\n                          }\n                        }}\n                      >\n                        <Typography\n                          textColor={values.isScheduled ? 'primary600' : 'neutral800'}\n                          fontWeight={values.isScheduled ? 'semiBold' : 'regular'}\n                        >\n                          {formatMessage({\n                            id: 'modal.form.input.label.schedule-release',\n                            defaultMessage: 'Schedule release',\n                          })}\n                        </Typography>\n                      </Checkbox>\n                    </Box>\n                    {values.isScheduled && (\n                      <>\n                        <Flex gap={4} alignItems=\"start\">\n                          <Box width=\"100%\">\n                            <Field.Root\n                              name=\"date\"\n                              error={\n                                errors.date &&\n                                formatMessage({ id: errors.date, defaultMessage: errors.date })\n                              }\n                              required\n                            >\n                              <Field.Label>\n                                {formatMessage({\n                                  id: 'content-releases.modal.form.input.label.date',\n                                  defaultMessage: 'Date',\n                                })}\n                              </Field.Label>\n                              <DatePicker\n                                onChange={(date) => {\n                                  const isoFormatDate = date\n                                    ? formatISO(date, { representation: 'date' })\n                                    : null;\n                                  setFieldValue('date', isoFormatDate);\n                                }}\n                                clearLabel={formatMessage({\n                                  id: 'content-releases.modal.form.input.clearLabel',\n                                  defaultMessage: 'Clear',\n                                })}\n                                onClear={() => {\n                                  setFieldValue('date', null);\n                                }}\n                                value={values.date ? new Date(values.date) : new Date()}\n                                minDate={utcToZonedTime(new Date(), values.timezone.split('&')[1])}\n                              />\n                              <Field.Error />\n                            </Field.Root>\n                          </Box>\n                          <Box width=\"100%\">\n                            <Field.Root\n                              name=\"time\"\n                              error={\n                                errors.time &&\n                                formatMessage({ id: errors.time, defaultMessage: errors.time })\n                              }\n                              required\n                            >\n                              <Field.Label>\n                                {formatMessage({\n                                  id: 'content-releases.modal.form.input.label.time',\n                                  defaultMessage: 'Time',\n                                })}\n                              </Field.Label>\n                              <TimePicker\n                                onChange={(time) => {\n                                  setFieldValue('time', time);\n                                }}\n                                clearLabel={formatMessage({\n                                  id: 'content-releases.modal.form.input.clearLabel',\n                                  defaultMessage: 'Clear',\n                                })}\n                                onClear={() => {\n                                  setFieldValue('time', '');\n                                }}\n                                value={values.time || undefined}\n                              />\n                              <Field.Error />\n                            </Field.Root>\n                          </Box>\n                        </Flex>\n                        <TimezoneComponent timezoneOptions={timezoneList} />\n                      </>\n                    )}\n                  </Flex>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Modal.Close>\n                    <Button variant=\"tertiary\" name=\"cancel\">\n                      {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\n                    </Button>\n                  </Modal.Close>\n                  <Button name=\"submit\" loading={isLoading} type=\"submit\">\n                    {formatMessage(\n                      {\n                        id: 'content-releases.modal.form.button.submit',\n                        defaultMessage: '{isCreatingRelease, select, true {Continue} other {Save}}',\n                      },\n                      { isCreatingRelease: isCreatingRelease }\n                    )}\n                  </Button>\n                </Modal.Footer>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\n/**\n * Generates the list of timezones and user's current timezone(system timezone)\n */\ninterface ITimezoneOption {\n  offset: string;\n  value: string;\n}\n\nconst TimezoneComponent = ({ timezoneOptions }: { timezoneOptions: ITimezoneOption[] }) => {\n  const { values, errors, setFieldValue } = useFormikContext<FormValues>();\n  const { formatMessage } = useIntl();\n  const [timezoneList, setTimezoneList] = React.useState<ITimezoneOption[]>(timezoneOptions);\n\n  React.useEffect(() => {\n    if (values.date) {\n      // Update the timezone offset which varies with DST based on the date selected\n      const { timezoneList } = getTimezones(new Date(values.date));\n      setTimezoneList(timezoneList);\n\n      const updatedTimezone =\n        values.timezone &&\n        timezoneList.find((tz) => tz.value.split('&')[1] === values.timezone!.split('&')[1]);\n      if (updatedTimezone) {\n        setFieldValue('timezone', updatedTimezone!.value);\n      }\n    }\n  }, [setFieldValue, values.date, values.timezone]);\n\n  return (\n    <Field.Root\n      name=\"timezone\"\n      error={\n        errors.timezone && formatMessage({ id: errors.timezone, defaultMessage: errors.timezone })\n      }\n      required\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'content-releases.modal.form.input.label.timezone',\n          defaultMessage: 'Timezone',\n        })}\n      </Field.Label>\n      <Combobox\n        autocomplete={{ type: 'list', filter: 'contains' }}\n        value={values.timezone || undefined}\n        textValue={values.timezone ? values.timezone.replace(/&/, ' ') : undefined} // textValue is required to show the updated DST timezone\n        onChange={(timezone) => {\n          setFieldValue('timezone', timezone);\n        }}\n        onTextValueChange={(timezone) => {\n          setFieldValue('timezone', timezone);\n        }}\n        onClear={() => {\n          setFieldValue('timezone', '');\n        }}\n      >\n        {timezoneList.map((timezone) => (\n          <ComboboxOption key={timezone.value} value={timezone.value}>\n            {timezone.value.replace(/&/, ' ')}\n          </ComboboxOption>\n        ))}\n      </Combobox>\n      <Field.Error />\n    </Field.Root>\n  );\n};\n", "import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  useTracking,\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n  Layouts,\n  GradientBadge,\n} from '@strapi/admin/strapi-admin';\nimport { useLicenseLimits } from '@strapi/admin/strapi-admin/ee';\nimport {\n  Alert,\n  Badge,\n  Box,\n  Button,\n  Divider,\n  EmptyStateLayout,\n  Flex,\n  Grid,\n  Main,\n  Tabs,\n  Typography,\n  Link,\n} from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { format } from 'date-fns';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useLocation, NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { GetReleases, type Release } from '../../../shared/contracts/releases';\nimport { RelativeTime as BaseRelativeTime } from '../components/RelativeTime';\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\nimport { PERMISSIONS } from '../constants';\nimport {\n  useGetReleasesQuery,\n  useGetReleaseSettingsQuery,\n  GetReleasesQueryParams,\n  useCreateReleaseMutation,\n} from '../services/release';\n\n/* -------------------------------------------------------------------------------------------------\n * ReleasesGrid\n * -----------------------------------------------------------------------------------------------*/\ninterface ReleasesGridProps {\n  sectionTitle: 'pending' | 'done';\n  releases?: GetReleases.Response['data'];\n  isError?: boolean;\n}\n\nconst LinkCard = styled(Link)`\n  display: block;\n`;\n\nconst RelativeTime = styled(BaseRelativeTime)`\n  display: inline-block;\n  &::first-letter {\n    text-transform: uppercase;\n  }\n`;\n\nconst getBadgeProps = (status: Release['status']) => {\n  let color;\n  switch (status) {\n    case 'ready':\n      color = 'success';\n      break;\n    case 'blocked':\n      color = 'warning';\n      break;\n    case 'failed':\n      color = 'danger';\n      break;\n    case 'done':\n      color = 'primary';\n      break;\n    case 'empty':\n    default:\n      color = 'neutral';\n  }\n\n  return {\n    textColor: `${color}600`,\n    backgroundColor: `${color}100`,\n    borderColor: `${color}200`,\n  };\n};\n\nconst ReleasesGrid = ({ sectionTitle, releases = [], isError = false }: ReleasesGridProps) => {\n  const { formatMessage } = useIntl();\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  if (releases?.length === 0) {\n    return (\n      <EmptyStateLayout\n        content={formatMessage(\n          {\n            id: 'content-releases.page.Releases.tab.emptyEntries',\n            defaultMessage: 'No releases',\n          },\n          {\n            target: sectionTitle,\n          }\n        )}\n        icon={<EmptyDocuments width=\"16rem\" />}\n      />\n    );\n  }\n\n  return (\n    <Grid.Root gap={4}>\n      {releases.map(({ id, name, scheduledAt, status }) => (\n        <Grid.Item col={3} s={6} xs={12} key={id} direction=\"column\" alignItems=\"stretch\">\n          <LinkCard tag={NavLink} to={`${id}`} isExternal={false}>\n            <Flex\n              direction=\"column\"\n              justifyContent=\"space-between\"\n              padding={4}\n              hasRadius\n              background=\"neutral0\"\n              shadow=\"tableShadow\"\n              height=\"100%\"\n              width=\"100%\"\n              alignItems=\"start\"\n              gap={4}\n            >\n              <Flex direction=\"column\" alignItems=\"start\" gap={1}>\n                <Typography textColor=\"neutral800\" tag=\"h3\" variant=\"delta\" fontWeight=\"bold\">\n                  {name}\n                </Typography>\n                <Typography variant=\"pi\" textColor=\"neutral600\">\n                  {scheduledAt ? (\n                    <RelativeTime timestamp={new Date(scheduledAt)} />\n                  ) : (\n                    formatMessage({\n                      id: 'content-releases.pages.Releases.not-scheduled',\n                      defaultMessage: 'Not scheduled',\n                    })\n                  )}\n                </Typography>\n              </Flex>\n              <Badge {...getBadgeProps(status)}>{status}</Badge>\n            </Flex>\n          </LinkCard>\n        </Grid.Item>\n      ))}\n    </Grid.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleasesPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst StyledAlert = styled(Alert)`\n  button {\n    display: none;\n  }\n  p + div {\n    margin-left: auto;\n  }\n`;\n\nconst INITIAL_FORM_VALUES = {\n  name: '',\n  date: format(new Date(), 'yyyy-MM-dd'),\n  time: '',\n  isScheduled: true,\n  scheduledAt: null,\n  timezone: null,\n} satisfies FormValues;\n\nconst ReleasesPage = () => {\n  const location = useLocation();\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const { formatAPIError } = useAPIErrorHandler();\n  const [{ query }, setQuery] = useQueryParams<GetReleasesQueryParams>();\n  const response = useGetReleasesQuery(query);\n  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();\n  const [createRelease, { isLoading: isSubmittingForm }] = useCreateReleaseMutation();\n  const { getFeature } = useLicenseLimits();\n  const { maximumReleases = 3 } = getFeature('cms-content-releases') as {\n    maximumReleases: number;\n  };\n  const { trackUsage } = useTracking();\n  const {\n    allowedActions: { canCreate },\n  } = useRBAC(PERMISSIONS);\n\n  const { isLoading: isLoadingReleases, isSuccess, isError } = response;\n  const activeTab = response?.currentData?.meta?.activeTab || 'pending';\n\n  // Check if we have some errors and show a notification to the user to explain the error\n  React.useEffect(() => {\n    if (location?.state?.errors) {\n      toggleNotification({\n        type: 'danger',\n        title: formatMessage({\n          id: 'content-releases.pages.Releases.notification.error.title',\n          defaultMessage: 'Your request could not be processed.',\n        }),\n        message: formatMessage({\n          id: 'content-releases.pages.Releases.notification.error.message',\n          defaultMessage: 'Please try again or open another release.',\n        }),\n      });\n      navigate('', { replace: true, state: null });\n    }\n  }, [formatMessage, location?.state?.errors, navigate, toggleNotification]);\n\n  const toggleAddReleaseModal = () => {\n    setReleaseModalShown((prev) => !prev);\n  };\n\n  if (isLoadingReleases || isLoadingSettings) {\n    return <Page.Loading />;\n  }\n\n  const totalPendingReleases = (isSuccess && response.currentData?.meta?.pendingReleasesCount) || 0;\n  const hasReachedMaximumPendingReleases = totalPendingReleases >= maximumReleases;\n\n  const handleTabChange = (tabValue: string) => {\n    setQuery({\n      ...query,\n      page: 1,\n      pageSize: response?.currentData?.meta?.pagination?.pageSize || 16,\n      filters: {\n        releasedAt: {\n          $notNull: tabValue !== 'pending',\n        },\n      },\n    });\n  };\n\n  const handleAddRelease = async ({ name, scheduledAt, timezone }: FormValues) => {\n    const response = await createRelease({\n      name,\n      scheduledAt,\n      timezone,\n    });\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.modal.release-created-notification-success',\n          defaultMessage: 'Release created.',\n        }),\n      });\n\n      trackUsage('didCreateRelease');\n      navigate(response.data.data.id.toString());\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  return (\n    <Main aria-busy={isLoadingReleases || isLoadingSettings}>\n      <Layouts.Header\n        title={formatMessage({\n          id: 'content-releases.pages.Releases.title',\n          defaultMessage: 'Releases',\n        })}\n        secondaryAction={\n          <GradientBadge\n            label={formatMessage({\n              id: 'components.premiumFeature.title',\n              defaultMessage: 'Premium feature',\n            })}\n          />\n        }\n        subtitle={formatMessage({\n          id: 'content-releases.pages.Releases.header-subtitle',\n          defaultMessage: 'Create and manage content updates',\n        })}\n        primaryAction={\n          canCreate ? (\n            <Button\n              startIcon={<Plus />}\n              onClick={toggleAddReleaseModal}\n              disabled={hasReachedMaximumPendingReleases}\n            >\n              {formatMessage({\n                id: 'content-releases.header.actions.add-release',\n                defaultMessage: 'New release',\n              })}\n            </Button>\n          ) : null\n        }\n      />\n      <Layouts.Content>\n        <>\n          {hasReachedMaximumPendingReleases && (\n            <StyledAlert\n              marginBottom={6}\n              action={\n                <Link href=\"https://strapi.io/pricing-cloud\" isExternal>\n                  {formatMessage({\n                    id: 'content-releases.pages.Releases.max-limit-reached.action',\n                    defaultMessage: 'Explore plans',\n                  })}\n                </Link>\n              }\n              title={formatMessage(\n                {\n                  id: 'content-releases.pages.Releases.max-limit-reached.title',\n                  defaultMessage:\n                    'You have reached the {number} pending {number, plural, one {release} other {releases}} limit.',\n                },\n                { number: maximumReleases }\n              )}\n              onClose={() => {}}\n              closeLabel=\"\"\n            >\n              {formatMessage({\n                id: 'content-releases.pages.Releases.max-limit-reached.message',\n                defaultMessage: 'Upgrade to manage an unlimited number of releases.',\n              })}\n            </StyledAlert>\n          )}\n          <Tabs.Root variant=\"simple\" onValueChange={handleTabChange} value={activeTab}>\n            <Box paddingBottom={8}>\n              <Tabs.List\n                aria-label={formatMessage({\n                  id: 'content-releases.pages.Releases.tab-group.label',\n                  defaultMessage: 'Releases list',\n                })}\n              >\n                <Tabs.Trigger value=\"pending\">\n                  {formatMessage(\n                    {\n                      id: 'content-releases.pages.Releases.tab.pending',\n                      defaultMessage: 'Pending ({count})',\n                    },\n                    {\n                      count: totalPendingReleases,\n                    }\n                  )}\n                </Tabs.Trigger>\n                <Tabs.Trigger value=\"done\">\n                  {formatMessage({\n                    id: 'content-releases.pages.Releases.tab.done',\n                    defaultMessage: 'Done',\n                  })}\n                </Tabs.Trigger>\n              </Tabs.List>\n              <Divider />\n            </Box>\n            {/* Pending releases */}\n            <Tabs.Content value=\"pending\">\n              <ReleasesGrid\n                sectionTitle=\"pending\"\n                releases={response?.currentData?.data}\n                isError={isError}\n              />\n            </Tabs.Content>\n            {/* Done releases */}\n            <Tabs.Content value=\"done\">\n              <ReleasesGrid\n                sectionTitle=\"done\"\n                releases={response?.currentData?.data}\n                isError={isError}\n              />\n            </Tabs.Content>\n          </Tabs.Root>\n          <Pagination.Root\n            {...response?.currentData?.meta?.pagination}\n            defaultPageSize={response?.currentData?.meta?.pagination?.pageSize}\n          >\n            <Pagination.PageSize options={['8', '16', '32', '64']} />\n            <Pagination.Links />\n          </Pagination.Root>\n        </>\n      </Layouts.Content>\n      <ReleaseModal\n        open={releaseModalShown}\n        handleClose={toggleAddReleaseModal}\n        handleSubmit={handleAddRelease}\n        isLoading={isSubmittingForm}\n        initialValues={{\n          ...INITIAL_FORM_VALUES,\n          timezone: data?.data.defaultTimezone ? data.data.defaultTimezone.split('&')[1] : null,\n        }}\n      />\n    </Main>\n  );\n};\n\nexport { ReleasesPage, getBadgeProps };\n"],
  "mappings": "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",
  "names": ["intervals", "RelativeTime", "forwardRef", "timestamp", "customIntervals", "restProps", "forwardedRef", "formatRelativeTime", "formatDate", "formatTime", "useIntl", "interval", "intervalToDuration", "start", "end", "Date", "now", "unit", "find", "intervalUnit", "Object", "keys", "includes", "relativeTime", "isPast", "customInterval", "custom", "threshold", "displayText", "text", "numeric", "_jsx", "time", "ref", "dateTime", "toISOString", "role", "title", "ReleaseModal", "handleClose", "open", "handleSubmit", "initialValues", "isLoading", "formatMessage", "useIntl", "pathname", "useLocation", "isCreatingRelease", "pluginId", "timezoneList", "systemTimezone", "value", "getTimezones", "scheduledAt", "Date", "getScheduledTimestamp", "values", "date", "time", "timezone", "timezoneWithoutOffset", "split", "zonedTimeToUtc", "getTimezoneWithOffset", "currentTimezone", "find", "_jsx", "Modal", "Root", "onOpenChange", "_jsxs", "Content", "Header", "Title", "id", "defaultMessage", "Formik", "onSubmit", "isScheduled", "validationSchema", "RELEASE_SCHEMA", "validateOnChange", "errors", "handleChange", "setFieldValue", "Form", "Body", "Flex", "direction", "alignItems", "gap", "Field", "name", "error", "required", "Label", "TextInput", "onChange", "Error", "Box", "width", "Checkbox", "checked", "onCheckedChange", "Typography", "textColor", "fontWeight", "_Fragment", "DatePicker", "isoFormatDate", "formatISO", "representation", "clearLabel", "onClear", "minDate", "utcToZonedTime", "TimePicker", "undefined", "TimezoneComponent", "timezoneOptions", "Footer", "Close", "Button", "variant", "loading", "type", "useFormikContext", "setTimezoneList", "useState", "React", "useEffect", "updatedTimezone", "tz", "Combobox", "autocomplete", "filter", "textValue", "replace", "onTextValueChange", "map", "ComboboxOption", "LinkCard", "styled", "Link", "RelativeTime", "BaseRelativeTime", "getBadgeProps", "status", "color", "textColor", "backgroundColor", "borderColor", "ReleasesGrid", "sectionTitle", "releases", "isError", "formatMessage", "useIntl", "_jsx", "Page", "Error", "length", "EmptyStateLayout", "content", "id", "defaultMessage", "target", "icon", "EmptyDocuments", "width", "Grid", "Root", "gap", "map", "name", "scheduledAt", "Item", "col", "s", "xs", "direction", "alignItems", "tag", "NavLink", "to", "isExternal", "_jsxs", "Flex", "justifyContent", "padding", "hasRadius", "background", "shadow", "height", "Typography", "variant", "fontWeight", "timestamp", "Date", "Badge", "StyledAlert", "Alert", "INITIAL_FORM_VALUES", "date", "format", "time", "isScheduled", "timezone", "ReleasesPage", "location", "useLocation", "releaseModalShown", "setReleaseModalShown", "useState", "toggleNotification", "useNotification", "navigate", "useNavigate", "formatAPIError", "useAPIErrorHandler", "query", "setQuery", "useQueryParams", "response", "useGetReleasesQuery", "data", "isLoading", "isLoadingSettings", "useGetReleaseSettingsQuery", "createRelease", "isSubmittingForm", "useCreateReleaseMutation", "getFeature", "useLicenseLimits", "maximumReleases", "trackUsage", "useTracking", "allowedActions", "canCreate", "useRBAC", "PERMISSIONS", "isLoadingReleases", "isSuccess", "activeTab", "currentData", "meta", "React", "useEffect", "state", "errors", "type", "title", "message", "replace", "toggleAddReleaseModal", "prev", "Loading", "totalPendingReleases", "pendingReleasesCount", "hasReachedMaximumPendingReleases", "handleTabChange", "tabValue", "page", "pageSize", "pagination", "filters", "releasedAt", "$notNull", "handleAddRelease", "toString", "isFetchError", "error", "Main", "aria-busy", "Layouts", "Header", "secondaryAction", "GradientBadge", "label", "subtitle", "primaryAction", "Button", "startIcon", "Plus", "onClick", "disabled", "Content", "_Fragment", "marginBottom", "action", "href", "number", "onClose", "closeLabel", "Tabs", "onValueChange", "value", "Box", "paddingBottom", "List", "aria-label", "Trigger", "count", "Divider", "Pagination", "defaultPageSize", "PageSize", "options", "Links", "ReleaseModal", "open", "handleClose", "handleSubmit", "initialValues", "defaultTimezone", "split"]
}
