import {
  adminApi
} from "./chunk-OP4OIIKW.js";
import {
  lightTheme
} from "./chunk-FR3G64L6.js";

// node_modules/@strapi/review-workflows/dist/admin/constants.mjs
var PLUGIN_ID = "review-workflows";
var FEATURE_ID = "review-workflows";
var CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME = "numberOfWorkflows";
var CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME = "stagesPerWorkflow";
var STAGE_COLOR_DEFAULT = lightTheme.colors.primary600;

// node_modules/@strapi/review-workflows/dist/admin/services/api.mjs
var reviewWorkflowsApi = adminApi.enhanceEndpoints({
  addTagTypes: [
    "ReviewWorkflow",
    "ReviewWorkflowStages",
    "Document",
    "ContentTypeSettings"
  ]
});

// node_modules/@strapi/review-workflows/dist/admin/services/content-manager.mjs
var SINGLE_TYPES = "single-types";
var contentManagerApi = reviewWorkflowsApi.enhanceEndpoints({
  addTagTypes: [
    "RecentlyAssignedList",
    "RecentDocumentList"
  ]
}).injectEndpoints({
  endpoints: (builder) => ({
    getStages: builder.query({
      query: ({ model, slug, id, params }) => ({
        url: `/review-workflows/content-manager/${slug}/${model}/${id}/stages`,
        method: "GET",
        config: {
          params
        }
      }),
      transformResponse: (res) => {
        return {
          meta: res.meta ?? {
            workflowCount: 0
          },
          stages: res.data ?? []
        };
      },
      providesTags: [
        "ReviewWorkflowStages"
      ]
    }),
    updateStage: builder.mutation({
      query: ({ model, slug, id, params, ...data }) => ({
        url: `/review-workflows/content-manager/${slug}/${model}/${id}/stage`,
        method: "PUT",
        data,
        config: {
          params
        }
      }),
      transformResponse: (res) => res.data,
      invalidatesTags: (_result, _error, { slug, id, model }) => {
        return [
          {
            type: "Document",
            id: slug !== SINGLE_TYPES ? `${model}_${id}` : model
          },
          {
            type: "Document",
            id: `${model}_LIST`
          },
          "ReviewWorkflowStages"
        ];
      }
    }),
    updateAssignee: builder.mutation({
      query: ({ model, slug, id, params, ...data }) => ({
        url: `/review-workflows/content-manager/${slug}/${model}/${id}/assignee`,
        method: "PUT",
        data,
        config: {
          params
        }
      }),
      transformResponse: (res) => res.data,
      invalidatesTags: (_result, _error, { slug, id, model }) => {
        return [
          {
            type: "Document",
            id: slug !== SINGLE_TYPES ? `${model}_${id}` : model
          },
          {
            type: "Document",
            id: `${model}_LIST`
          },
          "RecentlyAssignedList"
        ];
      }
    }),
    getContentTypes: builder.query({
      query: () => ({
        url: `/content-manager/content-types`,
        method: "GET"
      }),
      transformResponse: (res) => {
        return res.data.reduce((acc, curr) => {
          if (curr.isDisplayed) {
            acc[curr.kind].push(curr);
          }
          return acc;
        }, {
          collectionType: [],
          singleType: []
        });
      }
    }),
    getRecentlyAssignedDocuments: builder.query({
      query: () => "/review-workflows/homepage/recently-assigned-documents",
      transformResponse: (response) => response.data,
      providesTags: (_, _err) => [
        "RecentlyAssignedList",
        "RecentDocumentList"
      ]
    })
  }),
  overrideExisting: true
});
var { useGetStagesQuery, useUpdateStageMutation, useUpdateAssigneeMutation, useGetContentTypesQuery, useGetRecentlyAssignedDocumentsQuery } = contentManagerApi;

export {
  PLUGIN_ID,
  FEATURE_ID,
  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,
  CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME,
  STAGE_COLOR_DEFAULT,
  reviewWorkflowsApi,
  useGetStagesQuery,
  useUpdateStageMutation,
  useUpdateAssigneeMutation,
  useGetContentTypesQuery,
  useGetRecentlyAssignedDocumentsQuery
};
//# sourceMappingURL=chunk-F7Y7Q22P.js.map
