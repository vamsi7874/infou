import {
  RelativeTime
} from "./chunk-5MKC4BWO.js";
import {
  tours
} from "./chunk-AMSXMRAB.js";
import {
  Table
} from "./chunk-O37WYNET.js";
import {
  ConfirmDialog
} from "./chunk-EPLSEZ4D.js";
import {
  useTracking
} from "./chunk-KPVRSNVY.js";
import {
  useQueryParams
} from "./chunk-OZMR6ZG7.js";
import {
  Box,
  Dialog,
  Flex,
  IconButton,
  LinkButton,
  Typography,
  useCollator,
  useIntl
} from "./chunk-FR3G64L6.js";
import {
  NavLink,
  useNavigate
} from "./chunk-MEXSUURY.js";
import {
  ForwardRef$1z,
  ForwardRef$n
} from "./chunk-VKBWGUCP.js";
import {
  require_jsx_runtime
} from "./chunk-YHVPSBF3.js";
import {
  dt
} from "./chunk-VLINXRKQ.js";
import {
  require_react
} from "./chunk-3ZCHZDHB.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/admin/dist/admin/admin/src/hooks/useOnce.mjs
var React = __toESM(require_react(), 1);
var useOnce = (effect) => React.useEffect(effect, emptyDeps);
var emptyDeps = [];

// node_modules/@strapi/admin/dist/admin/admin/src/pages/Settings/components/Tokens/Table.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React2 = __toESM(require_react(), 1);
var Table2 = ({ permissions, headers = [], isLoading = false, tokens = [], onConfirmDelete, tokenType }) => {
  const [{ query }] = useQueryParams();
  const { formatMessage, locale } = useIntl();
  const [, sortOrder] = query && query.sort ? query.sort.split(":") : [
    void 0,
    "ASC"
  ];
  const navigate = useNavigate();
  const { trackUsage } = useTracking();
  const formatter = useCollator(locale);
  const sortedTokens = [
    ...tokens
  ].sort((a, b) => {
    return sortOrder === "DESC" ? formatter.compare(b.name, a.name) : formatter.compare(a.name, b.name);
  });
  const { canDelete, canUpdate, canRead } = permissions;
  const handleRowClick = (id) => () => {
    if (canRead) {
      trackUsage("willEditTokenFromList", {
        tokenType
      });
      navigate(id.toString());
    }
  };
  return (0, import_jsx_runtime.jsx)(Table.Root, {
    headers,
    rows: sortedTokens,
    isLoading,
    children: (0, import_jsx_runtime.jsxs)(Table.Content, {
      children: [
        (0, import_jsx_runtime.jsx)(Table.Head, {
          children: headers.map((header) => (0, import_jsx_runtime.jsx)(Table.HeaderCell, {
            ...header
          }, header.name))
        }),
        (0, import_jsx_runtime.jsx)(Table.Empty, {}),
        (0, import_jsx_runtime.jsx)(Table.Loading, {}),
        (0, import_jsx_runtime.jsx)(Table.Body, {
          children: sortedTokens.map((token) => {
            const GuidedTourTooltip = token.name === "Read Only" ? tours.apiTokens.ManageAPIToken : React2.Fragment;
            return (0, import_jsx_runtime.jsxs)(Table.Row, {
              onClick: handleRowClick(token.id),
              children: [
                (0, import_jsx_runtime.jsx)(Table.Cell, {
                  maxWidth: "25rem",
                  children: (0, import_jsx_runtime.jsx)(Typography, {
                    textColor: "neutral800",
                    fontWeight: "bold",
                    ellipsis: true,
                    children: token.name
                  })
                }),
                (0, import_jsx_runtime.jsx)(Table.Cell, {
                  maxWidth: "25rem",
                  children: (0, import_jsx_runtime.jsx)(Typography, {
                    textColor: "neutral800",
                    ellipsis: true,
                    children: token.description
                  })
                }),
                (0, import_jsx_runtime.jsx)(Table.Cell, {
                  children: (0, import_jsx_runtime.jsx)(Typography, {
                    textColor: "neutral800",
                    children: (0, import_jsx_runtime.jsx)(RelativeTime, {
                      timestamp: new Date(token.createdAt)
                    })
                  })
                }),
                (0, import_jsx_runtime.jsx)(Table.Cell, {
                  children: token.lastUsedAt && (0, import_jsx_runtime.jsx)(Typography, {
                    textColor: "neutral800",
                    children: (0, import_jsx_runtime.jsx)(RelativeTime, {
                      timestamp: new Date(token.lastUsedAt),
                      customIntervals: [
                        {
                          unit: "hours",
                          threshold: 1,
                          text: formatMessage({
                            id: "Settings.apiTokens.lastHour",
                            defaultMessage: "last hour"
                          })
                        }
                      ]
                    })
                  })
                }),
                canUpdate || canRead || canDelete ? (0, import_jsx_runtime.jsx)(Table.Cell, {
                  children: (0, import_jsx_runtime.jsxs)(Flex, {
                    justifyContent: "end",
                    children: [
                      (0, import_jsx_runtime.jsx)(GuidedTourTooltip, {
                        children: canUpdate && (0, import_jsx_runtime.jsx)(UpdateButton, {
                          tokenName: token.name,
                          tokenId: token.id
                        })
                      }),
                      canDelete && (0, import_jsx_runtime.jsx)(DeleteButton, {
                        tokenName: token.name,
                        onClickDelete: () => onConfirmDelete == null ? void 0 : onConfirmDelete(token.id),
                        tokenType
                      })
                    ]
                  })
                }) : null
              ]
            }, token.id);
          })
        })
      ]
    })
  });
};
var MESSAGES_MAP = {
  edit: {
    id: "app.component.table.edit",
    defaultMessage: "Edit {target}"
  },
  read: {
    id: "app.component.table.read",
    defaultMessage: "Read {target}"
  }
};
var DefaultButton = ({ tokenName, tokenId, buttonType = "edit", children }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsx)(LinkButtonStyled, {
    tag: NavLink,
    to: tokenId.toString(),
    onClick: (e) => e.stopPropagation(),
    title: formatMessage(MESSAGES_MAP[buttonType], {
      target: tokenName
    }),
    variant: "ghost",
    size: "S",
    children
  });
};
var LinkButtonStyled = dt(LinkButton)`
  padding: 0.7rem;

  & > span {
    display: flex;
  }
`;
var DeleteButton = ({ tokenName, onClickDelete, tokenType }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const handleClickDelete = () => {
    trackUsage("willDeleteToken", {
      tokenType
    });
    onClickDelete();
  };
  return (0, import_jsx_runtime.jsx)(Dialog.Root, {
    children: (0, import_jsx_runtime.jsxs)(Box, {
      paddingLeft: 1,
      onClick: (e) => e.stopPropagation(),
      children: [
        (0, import_jsx_runtime.jsx)(Dialog.Trigger, {
          children: (0, import_jsx_runtime.jsx)(IconButton, {
            label: formatMessage({
              id: "global.delete-target",
              defaultMessage: "Delete {target}"
            }, {
              target: `${tokenName}`
            }),
            name: "delete",
            variant: "ghost",
            children: (0, import_jsx_runtime.jsx)(ForwardRef$n, {})
          })
        }),
        (0, import_jsx_runtime.jsx)(ConfirmDialog, {
          onConfirm: handleClickDelete
        })
      ]
    })
  });
};
var UpdateButton = ({ tokenName, tokenId }) => {
  return (0, import_jsx_runtime.jsx)(DefaultButton, {
    tokenName,
    tokenId,
    children: (0, import_jsx_runtime.jsx)(ForwardRef$1z, {})
  });
};

export {
  useOnce,
  Table2 as Table
};
//# sourceMappingURL=chunk-KSYLOSC3.js.map
