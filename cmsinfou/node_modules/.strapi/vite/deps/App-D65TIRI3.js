import {
  RelativeTime,
  ReleaseModal,
  ReleasesPage,
  getBadgeProps
} from "./chunk-LWUQGJPJ.js";
import {
  utcToZonedTime
} from "./chunk-2FGGTBQB.js";
import {
  ReleaseActionMenu,
  ReleaseActionOptions
} from "./chunk-A2KCFVLX.js";
import {
  PERMISSIONS
} from "./chunk-EBVWQ5LF.js";
import "./chunk-FKJH25QA.js";
import {
  getTimezoneOffset,
  releaseApi,
  useDeleteReleaseMutation,
  useGetReleaseActionsQuery,
  useGetReleaseQuery,
  useGetReleaseSettingsQuery,
  usePublishReleaseMutation,
  useUpdateReleaseActionMutation,
  useUpdateReleaseMutation
} from "./chunk-U6DSTNCE.js";
import "./chunk-OJF34WUO.js";
import "./chunk-AOCBHQ4Y.js";
import "./chunk-DRAMLPHJ.js";
import "./chunk-6RULMPNP.js";
import "./chunk-E32IPTLS.js";
import "./chunk-C6H2GXKH.js";
import "./chunk-H7CODQZQ.js";
import {
  useDocument
} from "./chunk-RQ54WG6R.js";
import "./chunk-4KXH6Q5G.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-AFZ24I3W.js";
import "./chunk-4XS7Z5LD.js";
import "./chunk-D7AMZXYN.js";
import "./chunk-C7H2BX76.js";
import "./chunk-SYWYLB7I.js";
import "./chunk-5ZKVVA2S.js";
import "./chunk-DEERFX6N.js";
import "./chunk-EEYROK26.js";
import "./chunk-AMSXMRAB.js";
import "./chunk-UV5HWZVT.js";
import "./chunk-BKGE5ZOB.js";
import "./chunk-QIJGNK42.js";
import "./chunk-OIGTTOI3.js";
import "./chunk-VQ4JZ5N6.js";
import "./chunk-HXN2VPUA.js";
import "./chunk-M3M76QTB.js";
import {
  Pagination
} from "./chunk-I4IZI7RC.js";
import {
  Table
} from "./chunk-O37WYNET.js";
import "./chunk-6MW6LE7M.js";
import "./chunk-7BUSV5CZ.js";
import "./chunk-WVIDZ4FG.js";
import "./chunk-UIPCSNOH.js";
import "./chunk-OGKULF3S.js";
import "./chunk-4YDGLXO7.js";
import "./chunk-GYFXEBO7.js";
import "./chunk-FVARHVPW.js";
import {
  ConfirmDialog
} from "./chunk-EPLSEZ4D.js";
import {
  useRBAC
} from "./chunk-URAEHY46.js";
import {
  format
} from "./chunk-G52CE7KO.js";
import "./chunk-NG3RHAH6.js";
import "./chunk-UA3SUHF3.js";
import "./chunk-HOYJRKYC.js";
import "./chunk-332DFF7K.js";
import "./chunk-3DP6Y2FO.js";
import "./chunk-BTEHI67G.js";
import "./chunk-LHECCKXZ.js";
import "./chunk-JQCIHEJC.js";
import "./chunk-RSMRWHAJ.js";
import "./chunk-JHQVPJBC.js";
import {
  BackButton
} from "./chunk-ZPXBPYDE.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-BMIYS5WN.js";
import "./chunk-NQSRW5O3.js";
import "./chunk-LCMMDJZX.js";
import {
  Layouts
} from "./chunk-EBMOQY7X.js";
import {
  useTracking
} from "./chunk-KPVRSNVY.js";
import "./chunk-IJEBTNWR.js";
import "./chunk-OHWPYT75.js";
import "./chunk-PQINNV4N.js";
import "./chunk-ZPH6YYXY.js";
import {
  ForwardRef$J,
  Page,
  useAPIErrorHandler
} from "./chunk-6OPSPQRR.js";
import {
  useQueryParams,
  useStrapiApp
} from "./chunk-OZMR6ZG7.js";
import "./chunk-SQAPSDHR.js";
import {
  useNotification
} from "./chunk-UKEHYBHN.js";
import {
  isFetchError,
  require_lib
} from "./chunk-OP4OIIKW.js";
import {
  useDispatch
} from "./chunk-VG57EMON.js";
import "./chunk-5AMSERGP.js";
import "./chunk-CQG5XAX6.js";
import "./chunk-ZGCR6WZZ.js";
import "./chunk-QOUV5O5E.js";
import {
  Badge,
  Button,
  Dialog,
  EmptyStateLayout,
  Flex,
  LinkButton,
  Main,
  Menu,
  Popover,
  SimpleMenu,
  SingleSelect,
  SingleSelectOption,
  Td,
  Tr,
  Typography,
  useIntl
} from "./chunk-FR3G64L6.js";
import "./chunk-SPTT7VBO.js";
import {
  Link,
  Navigate,
  Route,
  Routes,
  useNavigate,
  useParams
} from "./chunk-MEXSUURY.js";
import "./chunk-2MEY62DJ.js";
import {
  ForwardRef$1Z,
  ForwardRef$1z,
  ForwardRef$4$,
  ForwardRef$4L,
  ForwardRef$4b,
  ForwardRef$5h,
  ForwardRef$n
} from "./chunk-VKBWGUCP.js";
import {
  require_jsx_runtime
} from "./chunk-YHVPSBF3.js";
import {
  dt
} from "./chunk-VLINXRKQ.js";
import {
  require_react
} from "./chunk-3ZCHZDHB.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-releases/dist/admin/pages/App.mjs
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);

// node_modules/@strapi/content-releases/dist/admin/pages/ReleaseDetailsPage.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);

// node_modules/@strapi/content-releases/dist/admin/components/EntryValidationPopover.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_qs = __toESM(require_lib(), 1);
var StyledPopoverFlex = dt(Flex)`
  width: 100%;
  max-width: 256px;

  & > * {
    border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};
  }

  & > *:last-child {
    border-bottom: none;
  }
`;
var ButtonContent = dt(Flex)`
  svg {
    fill: currentColor;
  }
`;
var CustomStatusButton = ({ children, icon, color }) => {
  return (0, import_jsx_runtime.jsx)(Popover.Trigger, {
    children: (0, import_jsx_runtime.jsx)(Button, {
      variant: "ghost",
      endIcon: (0, import_jsx_runtime.jsx)(ForwardRef$4$, {}),
      children: (0, import_jsx_runtime.jsxs)(ButtonContent, {
        color,
        gap: 2,
        children: [
          icon,
          (0, import_jsx_runtime.jsx)(Typography, {
            textColor: color,
            variant: "omega",
            fontWeight: "bold",
            children
          })
        ]
      })
    })
  });
};
var EntryStatusTrigger = ({ action, status, hasErrors, requiredStage, entryStage }) => {
  const { formatMessage } = useIntl();
  if (action === "publish") {
    if (hasErrors || requiredStage && requiredStage.id !== (entryStage == null ? void 0 : entryStage.id)) {
      return (0, import_jsx_runtime.jsx)(CustomStatusButton, {
        icon: (0, import_jsx_runtime.jsx)(ForwardRef$4b, {}),
        color: "danger600",
        children: formatMessage({
          id: "content-releases.pages.ReleaseDetails.entry-validation.not-ready",
          defaultMessage: "Not ready to publish"
        })
      });
    }
    if (status === "draft") {
      return (0, import_jsx_runtime.jsx)(CustomStatusButton, {
        icon: (0, import_jsx_runtime.jsx)(ForwardRef$4L, {}),
        color: "success600",
        children: formatMessage({
          id: "content-releases.pages.ReleaseDetails.entry-validation.ready-to-publish",
          defaultMessage: "Ready to publish"
        })
      });
    }
    if (status === "modified") {
      return (0, import_jsx_runtime.jsx)(CustomStatusButton, {
        icon: (0, import_jsx_runtime.jsx)(ForwardRef$5h, {}),
        color: "alternative600",
        children: formatMessage({
          id: "content-releases.pages.ReleaseDetails.entry-validation.modified",
          defaultMessage: "Ready to publish changes"
        })
      });
    }
    return (0, import_jsx_runtime.jsx)(CustomStatusButton, {
      icon: (0, import_jsx_runtime.jsx)(ForwardRef$4L, {}),
      color: "success600",
      children: formatMessage({
        id: "content-releases.pages.ReleaseDetails.entry-validation.already-published",
        defaultMessage: "Already published"
      })
    });
  }
  if (status === "published") {
    return (0, import_jsx_runtime.jsx)(CustomStatusButton, {
      icon: (0, import_jsx_runtime.jsx)(ForwardRef$4L, {}),
      color: "success600",
      children: formatMessage({
        id: "content-releases.pages.ReleaseDetails.entry-validation.ready-to-unpublish",
        defaultMessage: "Ready to unpublish"
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(CustomStatusButton, {
    icon: (0, import_jsx_runtime.jsx)(ForwardRef$4L, {}),
    color: "success600",
    children: formatMessage({
      id: "content-releases.pages.ReleaseDetails.entry-validation.already-unpublished",
      defaultMessage: "Already unpublished"
    })
  });
};
var FieldsValidation = ({ hasErrors, errors, kind, contentTypeUid, documentId, locale }) => {
  const { formatMessage } = useIntl();
  return (0, import_jsx_runtime.jsxs)(Flex, {
    direction: "column",
    gap: 1,
    width: "100%",
    padding: 5,
    children: [
      (0, import_jsx_runtime.jsxs)(Flex, {
        gap: 2,
        width: "100%",
        children: [
          (0, import_jsx_runtime.jsx)(Typography, {
            fontWeight: "bold",
            children: formatMessage({
              id: "content-releases.pages.ReleaseDetails.entry-validation.fields",
              defaultMessage: "Fields"
            })
          }),
          hasErrors ? (0, import_jsx_runtime.jsx)(ForwardRef$4b, {
            fill: "danger600"
          }) : (0, import_jsx_runtime.jsx)(ForwardRef$4L, {
            fill: "success600"
          })
        ]
      }),
      (0, import_jsx_runtime.jsx)(Typography, {
        width: "100%",
        textColor: "neutral600",
        children: hasErrors ? formatMessage({
          id: "content-releases.pages.ReleaseDetails.entry-validation.fields.error",
          defaultMessage: "{errors} errors on fields."
        }, {
          errors: errors ? Object.keys(errors).length : 0
        }) : formatMessage({
          id: "content-releases.pages.ReleaseDetails.entry-validation.fields.success",
          defaultMessage: "All fields are filled correctly."
        })
      }),
      hasErrors && (0, import_jsx_runtime.jsx)(LinkButton, {
        tag: Link,
        to: {
          pathname: `/content-manager/${kind === "collectionType" ? "collection-types" : "single-types"}/${contentTypeUid}/${documentId}`,
          search: locale ? (0, import_qs.stringify)({
            plugins: {
              i18n: {
                locale
              }
            }
          }) : ""
        },
        variant: "secondary",
        fullWidth: true,
        state: {
          forceValidation: true
        },
        children: formatMessage({
          id: "content-releases.pages.ReleaseDetails.entry-validation.fields.see-errors",
          defaultMessage: "See errors"
        })
      })
    ]
  });
};
var getReviewStageIcon = ({ contentTypeHasReviewWorkflow, requiredStage, entryStage }) => {
  if (!contentTypeHasReviewWorkflow) {
    return (0, import_jsx_runtime.jsx)(ForwardRef$4L, {
      fill: "neutral200"
    });
  }
  if (requiredStage && requiredStage.id !== (entryStage == null ? void 0 : entryStage.id)) {
    return (0, import_jsx_runtime.jsx)(ForwardRef$4b, {
      fill: "danger600"
    });
  }
  return (0, import_jsx_runtime.jsx)(ForwardRef$4L, {
    fill: "success600"
  });
};
var getReviewStageMessage = ({ contentTypeHasReviewWorkflow, requiredStage, entryStage, formatMessage }) => {
  if (!contentTypeHasReviewWorkflow) {
    return formatMessage({
      id: "content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-enabled",
      defaultMessage: "This entry is not associated to any workflow."
    });
  }
  if (requiredStage && requiredStage.id !== (entryStage == null ? void 0 : entryStage.id)) {
    return formatMessage({
      id: "content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-ready",
      defaultMessage: "This entry is not at the required stage for publishing. ({stageName})"
    }, {
      stageName: (requiredStage == null ? void 0 : requiredStage.name) ?? ""
    });
  }
  if (requiredStage && requiredStage.id === (entryStage == null ? void 0 : entryStage.id)) {
    return formatMessage({
      id: "content-releases.pages.ReleaseDetails.entry-validation.review-stage.ready",
      defaultMessage: "This entry is at the required stage for publishing. ({stageName})"
    }, {
      stageName: (requiredStage == null ? void 0 : requiredStage.name) ?? ""
    });
  }
  return formatMessage({
    id: "content-releases.pages.ReleaseDetails.entry-validation.review-stage.stage-not-required",
    defaultMessage: "No required stage for publication"
  });
};
var ReviewStageValidation = ({ contentTypeHasReviewWorkflow, requiredStage, entryStage }) => {
  const { formatMessage } = useIntl();
  const Icon = getReviewStageIcon({
    contentTypeHasReviewWorkflow,
    requiredStage,
    entryStage
  });
  return (0, import_jsx_runtime.jsxs)(Flex, {
    direction: "column",
    gap: 1,
    width: "100%",
    padding: 5,
    children: [
      (0, import_jsx_runtime.jsxs)(Flex, {
        gap: 2,
        width: "100%",
        children: [
          (0, import_jsx_runtime.jsx)(Typography, {
            fontWeight: "bold",
            children: formatMessage({
              id: "content-releases.pages.ReleaseDetails.entry-validation.review-stage",
              defaultMessage: "Review stage"
            })
          }),
          Icon
        ]
      }),
      (0, import_jsx_runtime.jsx)(Typography, {
        textColor: "neutral600",
        children: getReviewStageMessage({
          contentTypeHasReviewWorkflow,
          requiredStage,
          entryStage,
          formatMessage
        })
      })
    ]
  });
};
var EntryValidationPopover = ({ schema, entry, status, action }) => {
  const { validate, isLoading } = useDocument({
    collectionType: (schema == null ? void 0 : schema.kind) ?? "",
    model: (schema == null ? void 0 : schema.uid) ?? ""
  }, {
    // useDocument makes a request to get more data about the entry, but we only want to have the validation function so we skip the request
    skip: true
  });
  const errors = isLoading ? null : validate(entry);
  const hasErrors = errors ? Object.keys(errors).length > 0 : false;
  const contentTypeHasReviewWorkflow = (schema == null ? void 0 : schema.hasReviewWorkflow) ?? false;
  const requiredStage = schema == null ? void 0 : schema.stageRequiredToPublish;
  const entryStage = entry.strapi_stage;
  if (isLoading) {
    return null;
  }
  return (0, import_jsx_runtime.jsxs)(Popover.Root, {
    children: [
      (0, import_jsx_runtime.jsx)(EntryStatusTrigger, {
        action,
        status,
        hasErrors,
        requiredStage,
        entryStage
      }),
      (0, import_jsx_runtime.jsx)(Popover.Content, {
        children: (0, import_jsx_runtime.jsxs)(StyledPopoverFlex, {
          direction: "column",
          children: [
            (0, import_jsx_runtime.jsx)(FieldsValidation, {
              hasErrors,
              errors,
              contentTypeUid: schema == null ? void 0 : schema.uid,
              kind: schema == null ? void 0 : schema.kind,
              documentId: entry.documentId,
              locale: entry.locale
            }),
            (0, import_jsx_runtime.jsx)(ReviewStageValidation, {
              contentTypeHasReviewWorkflow,
              requiredStage,
              entryStage
            })
          ]
        })
      })
    ]
  });
};

// node_modules/@strapi/content-releases/dist/admin/store/hooks.mjs
var useTypedDispatch = useDispatch;

// node_modules/@strapi/content-releases/dist/admin/utils/api.mjs
var isBaseQueryError = (error) => {
  return typeof error !== "undefined" && error.name !== void 0;
};

// node_modules/@strapi/content-releases/dist/admin/pages/ReleaseDetailsPage.mjs
var ReleaseInfoWrapper = dt(Flex)`
  align-self: stretch;
  border-bottom-right-radius: ${({ theme }) => theme.borderRadius};
  border-bottom-left-radius: ${({ theme }) => theme.borderRadius};
  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};
`;
var ReleaseDetailsLayout = ({ toggleEditReleaseModal, toggleWarningSubmit, children }) => {
  const { formatMessage, formatDate, formatTime } = useIntl();
  const { releaseId } = useParams();
  const { data, isLoading: isLoadingDetails, error } = useGetReleaseQuery({
    id: releaseId
  }, {
    skip: !releaseId
  });
  const [publishRelease, { isLoading: isPublishing }] = usePublishReleaseMutation();
  const { toggleNotification } = useNotification();
  const { formatAPIError } = useAPIErrorHandler();
  const { allowedActions } = useRBAC(PERMISSIONS);
  const { canUpdate, canDelete, canPublish } = allowedActions;
  const dispatch = useTypedDispatch();
  const { trackUsage } = useTracking();
  const release = data == null ? void 0 : data.data;
  const handlePublishRelease = (id) => async () => {
    const response = await publishRelease({
      id
    });
    if ("data" in response) {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: "content-releases.pages.ReleaseDetails.publish-notification-success",
          defaultMessage: "Release was published successfully."
        })
      });
      const { totalEntries: totalEntries2, totalPublishedEntries, totalUnpublishedEntries } = response.data.meta;
      trackUsage("didPublishRelease", {
        totalEntries: totalEntries2,
        totalPublishedEntries,
        totalUnpublishedEntries
      });
    } else if (isFetchError(response.error)) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(response.error)
      });
    } else {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  const handleRefresh = () => {
    dispatch(releaseApi.util.invalidateTags([
      {
        type: "ReleaseAction",
        id: "LIST"
      },
      {
        type: "Release",
        id: releaseId
      }
    ]));
  };
  const getCreatedByUser = () => {
    if (!(release == null ? void 0 : release.createdBy)) {
      return null;
    }
    if (release.createdBy.username) {
      return release.createdBy.username;
    }
    if (release.createdBy.firstname) {
      return `${release.createdBy.firstname} ${release.createdBy.lastname || ""}`.trim();
    }
    return release.createdBy.email;
  };
  if (isLoadingDetails) {
    return (0, import_jsx_runtime2.jsx)(Page.Loading, {});
  }
  if (isBaseQueryError(error) && "code" in error || !release) {
    return (0, import_jsx_runtime2.jsx)(Navigate, {
      to: "..",
      state: {
        errors: [
          {
            // @ts-expect-error – TODO: fix this weird error flow
            code: error == null ? void 0 : error.code
          }
        ]
      }
    });
  }
  const totalEntries = release.actions.meta.count || 0;
  const hasCreatedByUser = Boolean(getCreatedByUser());
  const isScheduled = release.scheduledAt && release.timezone;
  const numberOfEntriesText = formatMessage({
    id: "content-releases.pages.Details.header-subtitle",
    defaultMessage: "{number, plural, =0 {No entries} one {# entry} other {# entries}}"
  }, {
    number: totalEntries
  });
  const scheduledText = isScheduled ? formatMessage({
    id: "content-releases.pages.ReleaseDetails.header-subtitle.scheduled",
    defaultMessage: "Scheduled for {date} at {time} ({offset})"
  }, {
    date: formatDate(new Date(release.scheduledAt), {
      weekday: "long",
      day: "numeric",
      month: "long",
      year: "numeric",
      timeZone: release.timezone
    }),
    time: formatTime(new Date(release.scheduledAt), {
      timeZone: release.timezone,
      hourCycle: "h23"
    }),
    offset: getTimezoneOffset(release.timezone, new Date(release.scheduledAt))
  }) : "";
  return (0, import_jsx_runtime2.jsxs)(Main, {
    "aria-busy": isLoadingDetails,
    children: [
      (0, import_jsx_runtime2.jsx)(Layouts.Header, {
        title: release.name,
        subtitle: (0, import_jsx_runtime2.jsxs)(Flex, {
          gap: 2,
          lineHeight: 6,
          children: [
            (0, import_jsx_runtime2.jsx)(Typography, {
              textColor: "neutral600",
              variant: "epsilon",
              children: numberOfEntriesText + (isScheduled ? ` - ${scheduledText}` : "")
            }),
            (0, import_jsx_runtime2.jsx)(Badge, {
              ...getBadgeProps(release.status),
              children: release.status
            })
          ]
        }),
        navigationAction: (0, import_jsx_runtime2.jsx)(BackButton, {
          fallback: ".."
        }),
        primaryAction: !release.releasedAt && (0, import_jsx_runtime2.jsxs)(Flex, {
          gap: 2,
          children: [
            (0, import_jsx_runtime2.jsxs)(SimpleMenuButton, {
              label: (0, import_jsx_runtime2.jsx)(ForwardRef$1Z, {}),
              variant: "tertiary",
              endIcon: null,
              paddingLeft: "7px",
              paddingRight: "7px",
              "aria-label": formatMessage({
                id: "content-releases.header.actions.open-release-actions",
                defaultMessage: "Release edit and delete menu"
              }),
              popoverPlacement: "bottom-end",
              children: [
                (0, import_jsx_runtime2.jsx)(Menu.Item, {
                  disabled: !canUpdate,
                  onSelect: toggleEditReleaseModal,
                  startIcon: (0, import_jsx_runtime2.jsx)(ForwardRef$1z, {}),
                  children: formatMessage({
                    id: "content-releases.header.actions.edit",
                    defaultMessage: "Edit"
                  })
                }),
                (0, import_jsx_runtime2.jsx)(Menu.Item, {
                  disabled: !canDelete,
                  onSelect: toggleWarningSubmit,
                  variant: "danger",
                  startIcon: (0, import_jsx_runtime2.jsx)(ForwardRef$n, {}),
                  children: formatMessage({
                    id: "content-releases.header.actions.delete",
                    defaultMessage: "Delete"
                  })
                }),
                (0, import_jsx_runtime2.jsxs)(ReleaseInfoWrapper, {
                  direction: "column",
                  justifyContent: "center",
                  alignItems: "flex-start",
                  gap: 1,
                  padding: 4,
                  children: [
                    (0, import_jsx_runtime2.jsx)(Typography, {
                      variant: "pi",
                      fontWeight: "bold",
                      children: formatMessage({
                        id: "content-releases.header.actions.created",
                        defaultMessage: "Created"
                      })
                    }),
                    (0, import_jsx_runtime2.jsxs)(Typography, {
                      variant: "pi",
                      color: "neutral300",
                      children: [
                        (0, import_jsx_runtime2.jsx)(RelativeTime, {
                          timestamp: new Date(release.createdAt)
                        }),
                        formatMessage({
                          id: "content-releases.header.actions.created.description",
                          defaultMessage: "{hasCreatedByUser, select, true { by {createdBy}} other { by deleted user}}"
                        }, {
                          createdBy: getCreatedByUser(),
                          hasCreatedByUser
                        })
                      ]
                    })
                  ]
                })
              ]
            }),
            (0, import_jsx_runtime2.jsx)(Button, {
              size: "S",
              variant: "tertiary",
              onClick: handleRefresh,
              children: formatMessage({
                id: "content-releases.header.actions.refresh",
                defaultMessage: "Refresh"
              })
            }),
            canPublish ? (0, import_jsx_runtime2.jsx)(Button, {
              size: "S",
              variant: "default",
              onClick: handlePublishRelease(release.id.toString()),
              loading: isPublishing,
              disabled: release.actions.meta.count === 0,
              children: formatMessage({
                id: "content-releases.header.actions.publish",
                defaultMessage: "Publish"
              })
            }) : null
          ]
        })
      }),
      children
    ]
  });
};
var SimpleMenuButton = dt(SimpleMenu)`
  & > span {
    display: flex;
  }
`;
var GROUP_BY_OPTIONS = [
  "contentType",
  "locale",
  "action"
];
var GROUP_BY_OPTIONS_NO_LOCALE = [
  "contentType",
  "action"
];
var getGroupByOptionLabel = (value) => {
  if (value === "locale") {
    return {
      id: "content-releases.pages.ReleaseDetails.groupBy.option.locales",
      defaultMessage: "Locales"
    };
  }
  if (value === "action") {
    return {
      id: "content-releases.pages.ReleaseDetails.groupBy.option.actions",
      defaultMessage: "Actions"
    };
  }
  return {
    id: "content-releases.pages.ReleaseDetails.groupBy.option.content-type",
    defaultMessage: "Content-Types"
  };
};
var ReleaseDetailsBody = ({ releaseId }) => {
  var _a;
  const { formatMessage } = useIntl();
  const [{ query }, setQuery] = useQueryParams();
  const { toggleNotification } = useNotification();
  const { formatAPIError } = useAPIErrorHandler();
  const { data: releaseData, isLoading: isReleaseLoading, error: releaseError } = useGetReleaseQuery({
    id: releaseId
  });
  const { allowedActions: { canUpdate } } = useRBAC(PERMISSIONS);
  const runHookWaterfall = useStrapiApp("ReleaseDetailsPage", (state) => state.runHookWaterfall);
  const { displayedHeaders, hasI18nEnabled } = runHookWaterfall("ContentReleases/pages/ReleaseDetails/add-locale-in-releases", {
    displayedHeaders: [
      {
        label: {
          id: "content-releases.page.ReleaseDetails.table.header.label.name",
          defaultMessage: "name"
        },
        name: "name"
      }
    ],
    hasI18nEnabled: false
  });
  const release = releaseData == null ? void 0 : releaseData.data;
  const selectedGroupBy = (query == null ? void 0 : query.groupBy) || "contentType";
  const { isLoading, isFetching, isError, data, error: releaseActionsError } = useGetReleaseActionsQuery({
    ...query,
    releaseId
  });
  const [updateReleaseAction] = useUpdateReleaseActionMutation();
  const handleChangeType = async (e, actionId, actionPath) => {
    const response = await updateReleaseAction({
      params: {
        releaseId,
        actionId
      },
      body: {
        type: e.target.value
      },
      query,
      actionPath
    });
    if ("error" in response) {
      if (isFetchError(response.error)) {
        toggleNotification({
          type: "danger",
          message: formatAPIError(response.error)
        });
      } else {
        toggleNotification({
          type: "danger",
          message: formatMessage({
            id: "notification.error",
            defaultMessage: "An error occurred"
          })
        });
      }
    }
  };
  if (isLoading || isReleaseLoading) {
    return (0, import_jsx_runtime2.jsx)(Page.Loading, {});
  }
  const releaseActions = data == null ? void 0 : data.data;
  const releaseMeta = data == null ? void 0 : data.meta;
  const contentTypes = (releaseMeta == null ? void 0 : releaseMeta.contentTypes) || {};
  (releaseMeta == null ? void 0 : releaseMeta.components) || {};
  if (isBaseQueryError(releaseError) || !release) {
    const errorsArray = [];
    if (releaseError && "code" in releaseError) {
      errorsArray.push({
        code: releaseError.code
      });
    }
    if (releaseActionsError && "code" in releaseActionsError) {
      errorsArray.push({
        code: releaseActionsError.code
      });
    }
    return (0, import_jsx_runtime2.jsx)(Navigate, {
      to: "..",
      state: {
        errors: errorsArray
      }
    });
  }
  if (isError || !releaseActions) {
    return (0, import_jsx_runtime2.jsx)(Page.Error, {});
  }
  if (Object.keys(releaseActions).length === 0) {
    return (0, import_jsx_runtime2.jsx)(Layouts.Content, {
      children: (0, import_jsx_runtime2.jsx)(EmptyStateLayout, {
        action: (0, import_jsx_runtime2.jsx)(LinkButton, {
          tag: Link,
          to: {
            pathname: "/content-manager"
          },
          style: {
            textDecoration: "none"
          },
          variant: "secondary",
          children: formatMessage({
            id: "content-releases.page.Details.button.openContentManager",
            defaultMessage: "Open the Content Manager"
          })
        }),
        icon: (0, import_jsx_runtime2.jsx)(ForwardRef$J, {
          width: "16rem"
        }),
        content: formatMessage({
          id: "content-releases.pages.Details.tab.emptyEntries",
          defaultMessage: "This release is empty. Open the Content Manager, select an entry and add it to the release."
        })
      })
    });
  }
  const groupByLabel = formatMessage({
    id: "content-releases.pages.ReleaseDetails.groupBy.aria-label",
    defaultMessage: "Group by"
  });
  const headers = [
    ...displayedHeaders,
    {
      label: {
        id: "content-releases.page.ReleaseDetails.table.header.label.content-type",
        defaultMessage: "content-type"
      },
      name: "content-type"
    },
    {
      label: {
        id: "content-releases.page.ReleaseDetails.table.header.label.action",
        defaultMessage: "action"
      },
      name: "action"
    },
    ...!release.releasedAt ? [
      {
        label: {
          id: "content-releases.page.ReleaseDetails.table.header.label.status",
          defaultMessage: "status"
        },
        name: "status"
      }
    ] : []
  ];
  const options = hasI18nEnabled ? GROUP_BY_OPTIONS : GROUP_BY_OPTIONS_NO_LOCALE;
  return (0, import_jsx_runtime2.jsx)(Layouts.Content, {
    children: (0, import_jsx_runtime2.jsxs)(Flex, {
      gap: 8,
      direction: "column",
      alignItems: "stretch",
      children: [
        (0, import_jsx_runtime2.jsx)(Flex, {
          children: (0, import_jsx_runtime2.jsx)(SingleSelect, {
            placeholder: groupByLabel,
            "aria-label": groupByLabel,
            customizeContent: (value) => formatMessage({
              id: `content-releases.pages.ReleaseDetails.groupBy.label`,
              defaultMessage: `Group by {groupBy}`
            }, {
              groupBy: value
            }),
            value: formatMessage(getGroupByOptionLabel(selectedGroupBy)),
            onChange: (value) => setQuery({
              groupBy: value
            }),
            children: options.map((option) => (0, import_jsx_runtime2.jsx)(SingleSelectOption, {
              value: option,
              children: formatMessage(getGroupByOptionLabel(option))
            }, option))
          })
        }),
        Object.keys(releaseActions).map((key) => (0, import_jsx_runtime2.jsxs)(Flex, {
          gap: 4,
          direction: "column",
          alignItems: "stretch",
          children: [
            (0, import_jsx_runtime2.jsx)(Flex, {
              role: "separator",
              "aria-label": key,
              children: (0, import_jsx_runtime2.jsx)(Badge, {
                children: key
              })
            }),
            (0, import_jsx_runtime2.jsx)(Table.Root, {
              rows: releaseActions[key].map((item) => ({
                ...item,
                id: Number(item.entry.id)
              })),
              headers,
              isLoading: isLoading || isFetching,
              children: (0, import_jsx_runtime2.jsxs)(Table.Content, {
                children: [
                  (0, import_jsx_runtime2.jsx)(Table.Head, {
                    children: headers.map(({ label, name }) => (0, import_jsx_runtime2.jsx)(Table.HeaderCell, {
                      label: formatMessage(label),
                      name
                    }, name))
                  }),
                  (0, import_jsx_runtime2.jsx)(Table.Loading, {}),
                  (0, import_jsx_runtime2.jsx)(Table.Body, {
                    children: releaseActions[key].map(({ id, contentType, locale, type, entry, status }, actionIndex) => (0, import_jsx_runtime2.jsxs)(Tr, {
                      children: [
                        (0, import_jsx_runtime2.jsx)(Td, {
                          width: "25%",
                          maxWidth: "200px",
                          children: (0, import_jsx_runtime2.jsx)(Typography, {
                            ellipsis: true,
                            children: `${contentType.mainFieldValue || entry.id}`
                          })
                        }),
                        hasI18nEnabled && (0, import_jsx_runtime2.jsx)(Td, {
                          width: "10%",
                          children: (0, import_jsx_runtime2.jsx)(Typography, {
                            children: `${(locale == null ? void 0 : locale.name) ? locale.name : "-"}`
                          })
                        }),
                        (0, import_jsx_runtime2.jsx)(Td, {
                          width: "10%",
                          children: (0, import_jsx_runtime2.jsx)(Typography, {
                            children: contentType.displayName || ""
                          })
                        }),
                        (0, import_jsx_runtime2.jsx)(Td, {
                          width: "20%",
                          children: release.releasedAt ? (0, import_jsx_runtime2.jsx)(Typography, {
                            children: formatMessage({
                              id: "content-releases.page.ReleaseDetails.table.action-published",
                              defaultMessage: "This entry was <b>{isPublish, select, true {published} other {unpublished}}</b>."
                            }, {
                              isPublish: type === "publish",
                              b: (children) => (0, import_jsx_runtime2.jsx)(Typography, {
                                fontWeight: "bold",
                                children
                              })
                            })
                          }) : (0, import_jsx_runtime2.jsx)(ReleaseActionOptions, {
                            selected: type,
                            handleChange: (e) => handleChangeType(e, id, [
                              key,
                              actionIndex
                            ]),
                            name: `release-action-${id}-type`,
                            disabled: !canUpdate
                          })
                        }),
                        !release.releasedAt && (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, {
                          children: [
                            (0, import_jsx_runtime2.jsx)(Td, {
                              width: "20%",
                              minWidth: "200px",
                              children: (0, import_jsx_runtime2.jsx)(EntryValidationPopover, {
                                action: type,
                                schema: contentTypes == null ? void 0 : contentTypes[contentType.uid],
                                entry,
                                status
                              })
                            }),
                            (0, import_jsx_runtime2.jsx)(Td, {
                              children: (0, import_jsx_runtime2.jsx)(Flex, {
                                justifyContent: "flex-end",
                                children: (0, import_jsx_runtime2.jsxs)(ReleaseActionMenu.Root, {
                                  children: [
                                    (0, import_jsx_runtime2.jsx)(ReleaseActionMenu.ReleaseActionEntryLinkItem, {
                                      contentTypeUid: contentType.uid,
                                      documentId: entry.documentId,
                                      locale: locale == null ? void 0 : locale.code
                                    }),
                                    (0, import_jsx_runtime2.jsx)(ReleaseActionMenu.DeleteReleaseActionItem, {
                                      releaseId: release.id,
                                      actionId: id
                                    })
                                  ]
                                })
                              })
                            })
                          ]
                        })
                      ]
                    }, id))
                  })
                ]
              })
            })
          ]
        }, `releases-group-${key}`)),
        (0, import_jsx_runtime2.jsxs)(Pagination.Root, {
          ...releaseMeta == null ? void 0 : releaseMeta.pagination,
          defaultPageSize: (_a = releaseMeta == null ? void 0 : releaseMeta.pagination) == null ? void 0 : _a.pageSize,
          children: [
            (0, import_jsx_runtime2.jsx)(Pagination.PageSize, {}),
            (0, import_jsx_runtime2.jsx)(Pagination.Links, {})
          ]
        })
      ]
    })
  });
};
var ReleaseDetailsPage = () => {
  const { formatMessage } = useIntl();
  const { releaseId } = useParams();
  const { toggleNotification } = useNotification();
  const { formatAPIError } = useAPIErrorHandler();
  const navigate = useNavigate();
  const [releaseModalShown, setReleaseModalShown] = React.useState(false);
  const [showWarningSubmit, setWarningSubmit] = React.useState(false);
  const { isLoading: isLoadingDetails, data, isSuccess: isSuccessDetails } = useGetReleaseQuery({
    id: releaseId
  }, {
    skip: !releaseId
  });
  const { data: dataTimezone, isLoading: isLoadingTimezone } = useGetReleaseSettingsQuery();
  const [updateRelease, { isLoading: isSubmittingForm }] = useUpdateReleaseMutation();
  const [deleteRelease] = useDeleteReleaseMutation();
  const toggleEditReleaseModal = () => {
    setReleaseModalShown((prev) => !prev);
  };
  const getTimezoneValue = () => {
    if (releaseData == null ? void 0 : releaseData.timezone) {
      return releaseData.timezone;
    } else {
      if (dataTimezone == null ? void 0 : dataTimezone.data.defaultTimezone) {
        return dataTimezone.data.defaultTimezone;
      }
      return null;
    }
  };
  const toggleWarningSubmit = () => setWarningSubmit((prevState) => !prevState);
  if (isLoadingDetails || isLoadingTimezone) {
    return (0, import_jsx_runtime2.jsx)(ReleaseDetailsLayout, {
      toggleEditReleaseModal,
      toggleWarningSubmit,
      children: (0, import_jsx_runtime2.jsx)(Page.Loading, {})
    });
  }
  if (!releaseId) {
    return (0, import_jsx_runtime2.jsx)(Navigate, {
      to: ".."
    });
  }
  const releaseData = isSuccessDetails && (data == null ? void 0 : data.data) || null;
  const title = (releaseData == null ? void 0 : releaseData.name) || "";
  const timezone = getTimezoneValue();
  const scheduledAt = (releaseData == null ? void 0 : releaseData.scheduledAt) && timezone ? utcToZonedTime(releaseData.scheduledAt, timezone) : null;
  const date = scheduledAt ? format(scheduledAt, "yyyy-MM-dd") : void 0;
  const time = scheduledAt ? format(scheduledAt, "HH:mm") : "";
  const handleEditRelease = async (values) => {
    const response = await updateRelease({
      id: releaseId,
      name: values.name,
      scheduledAt: values.scheduledAt,
      timezone: values.timezone
    });
    if ("data" in response) {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: "content-releases.modal.release-updated-notification-success",
          defaultMessage: "Release updated."
        })
      });
      toggleEditReleaseModal();
    } else if (isFetchError(response.error)) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(response.error)
      });
    } else {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  const handleDeleteRelease = async () => {
    const response = await deleteRelease({
      id: releaseId
    });
    if ("data" in response) {
      navigate("..");
    } else if (isFetchError(response.error)) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(response.error)
      });
    } else {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  return (0, import_jsx_runtime2.jsxs)(ReleaseDetailsLayout, {
    toggleEditReleaseModal,
    toggleWarningSubmit,
    children: [
      (0, import_jsx_runtime2.jsx)(ReleaseDetailsBody, {
        releaseId
      }),
      (0, import_jsx_runtime2.jsx)(ReleaseModal, {
        open: releaseModalShown,
        handleClose: toggleEditReleaseModal,
        handleSubmit: handleEditRelease,
        isLoading: isLoadingDetails || isSubmittingForm,
        initialValues: {
          name: title || "",
          scheduledAt,
          date,
          time,
          isScheduled: Boolean(scheduledAt),
          timezone
        }
      }),
      (0, import_jsx_runtime2.jsx)(Dialog.Root, {
        open: showWarningSubmit,
        onOpenChange: toggleWarningSubmit,
        children: (0, import_jsx_runtime2.jsx)(ConfirmDialog, {
          onConfirm: handleDeleteRelease,
          children: formatMessage({
            id: "content-releases.dialog.confirmation-message",
            defaultMessage: "Are you sure you want to delete this release?"
          })
        })
      })
    ]
  });
};

// node_modules/@strapi/content-releases/dist/admin/pages/App.mjs
var App = () => {
  return (0, import_jsx_runtime3.jsx)(Page.Protect, {
    permissions: PERMISSIONS.main,
    children: (0, import_jsx_runtime3.jsxs)(Routes, {
      children: [
        (0, import_jsx_runtime3.jsx)(Route, {
          index: true,
          element: (0, import_jsx_runtime3.jsx)(ReleasesPage, {})
        }),
        (0, import_jsx_runtime3.jsx)(Route, {
          path: ":releaseId",
          element: (0, import_jsx_runtime3.jsx)(ReleaseDetailsPage, {})
        })
      ]
    })
  });
};
export {
  App
};
//# sourceMappingURL=App-D65TIRI3.js.map
