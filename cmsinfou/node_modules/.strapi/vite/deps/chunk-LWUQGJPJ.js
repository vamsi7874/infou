import {
  RELEASE_SCHEMA,
  utcToZonedTime,
  zonedTimeToUtc
} from "./chunk-2FGGTBQB.js";
import {
  PERMISSIONS,
  pluginId
} from "./chunk-EBVWQ5LF.js";
import {
  getTimezones,
  useCreateReleaseMutation,
  useGetReleaseSettingsQuery,
  useGetReleasesQuery
} from "./chunk-U6DSTNCE.js";
import {
  useLicenseLimits
} from "./chunk-UV5HWZVT.js";
import {
  Pagination
} from "./chunk-I4IZI7RC.js";
import {
  GradientBadgeWithIcon
} from "./chunk-6MW6LE7M.js";
import {
  useRBAC
} from "./chunk-URAEHY46.js";
import {
  format,
  intervalToDuration,
  isPast
} from "./chunk-G52CE7KO.js";
import {
  formatISO
} from "./chunk-NG3RHAH6.js";
import {
  Form,
  Formik,
  useFormikContext
} from "./chunk-RSMRWHAJ.js";
import {
  Layouts
} from "./chunk-EBMOQY7X.js";
import {
  useTracking
} from "./chunk-KPVRSNVY.js";
import {
  ForwardRef$J,
  Page,
  useAPIErrorHandler
} from "./chunk-6OPSPQRR.js";
import {
  useQueryParams
} from "./chunk-OZMR6ZG7.js";
import {
  useNotification
} from "./chunk-UKEHYBHN.js";
import {
  isFetchError
} from "./chunk-OP4OIIKW.js";
import {
  Alert,
  Badge,
  Box,
  Button,
  CheckboxImpl,
  Combobox,
  DatePicker,
  Divider,
  EmptyStateLayout,
  Field,
  Flex,
  Grid,
  Link,
  Main,
  Modal,
  Option,
  Tabs,
  TextInput,
  TimePicker,
  Typography,
  useIntl
} from "./chunk-FR3G64L6.js";
import {
  NavLink,
  useLocation,
  useNavigate
} from "./chunk-MEXSUURY.js";
import {
  ForwardRef$1l
} from "./chunk-VKBWGUCP.js";
import {
  require_jsx_runtime
} from "./chunk-YHVPSBF3.js";
import {
  dt
} from "./chunk-VLINXRKQ.js";
import {
  require_react
} from "./chunk-3ZCHZDHB.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-releases/dist/admin/components/RelativeTime.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var intervals = [
  "years",
  "months",
  "days",
  "hours",
  "minutes",
  "seconds"
];
var RelativeTime = React.forwardRef(({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {
  const { formatRelativeTime, formatDate, formatTime } = useIntl();
  const interval = intervalToDuration({
    start: timestamp,
    end: Date.now()
  });
  const unit = intervals.find((intervalUnit) => {
    return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);
  });
  const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];
  const customInterval = customIntervals.find((custom) => interval[custom.unit] < custom.threshold);
  const displayText = customInterval ? customInterval.text : formatRelativeTime(relativeTime, unit, {
    numeric: "auto"
  });
  return (0, import_jsx_runtime.jsx)("time", {
    ref: forwardedRef,
    dateTime: timestamp.toISOString(),
    role: "time",
    title: `${formatDate(timestamp)} ${formatTime(timestamp)}`,
    ...restProps,
    children: displayText
  });
});

// node_modules/@strapi/content-releases/dist/admin/pages/ReleasesPage.mjs
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var React3 = __toESM(require_react(), 1);

// node_modules/@strapi/content-releases/dist/admin/components/ReleaseModal.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var React2 = __toESM(require_react(), 1);
var ReleaseModal = ({ handleClose, open, handleSubmit, initialValues, isLoading = false }) => {
  const { formatMessage } = useIntl();
  const { pathname } = useLocation();
  const isCreatingRelease = pathname === `/plugins/${pluginId}`;
  const { timezoneList, systemTimezone = {
    value: "UTC+00:00-Africa/Abidjan "
  } } = getTimezones(initialValues.scheduledAt ? new Date(initialValues.scheduledAt) : /* @__PURE__ */ new Date());
  const getScheduledTimestamp = (values) => {
    const { date, time, timezone } = values;
    if (!date || !time || !timezone) return null;
    const timezoneWithoutOffset = timezone.split("&")[1];
    return zonedTimeToUtc(`${date} ${time}`, timezoneWithoutOffset);
  };
  const getTimezoneWithOffset = () => {
    const currentTimezone = timezoneList.find((timezone) => timezone.value.split("&")[1] === initialValues.timezone);
    return (currentTimezone == null ? void 0 : currentTimezone.value) || systemTimezone.value;
  };
  return (0, import_jsx_runtime2.jsx)(Modal.Root, {
    open,
    onOpenChange: handleClose,
    children: (0, import_jsx_runtime2.jsxs)(Modal.Content, {
      children: [
        (0, import_jsx_runtime2.jsx)(Modal.Header, {
          children: (0, import_jsx_runtime2.jsx)(Modal.Title, {
            children: formatMessage({
              id: "content-releases.modal.title",
              defaultMessage: "{isCreatingRelease, select, true {New release} other {Edit release}}"
            }, {
              isCreatingRelease
            })
          })
        }),
        (0, import_jsx_runtime2.jsx)(Formik, {
          onSubmit: (values) => {
            handleSubmit({
              ...values,
              timezone: values.timezone ? values.timezone.split("&")[1] : null,
              scheduledAt: values.isScheduled ? getScheduledTimestamp(values) : null
            });
          },
          initialValues: {
            ...initialValues,
            timezone: initialValues.timezone ? getTimezoneWithOffset() : systemTimezone.value
          },
          validationSchema: RELEASE_SCHEMA,
          validateOnChange: false,
          children: ({ values, errors, handleChange, setFieldValue }) => {
            return (0, import_jsx_runtime2.jsxs)(Form, {
              children: [
                (0, import_jsx_runtime2.jsx)(Modal.Body, {
                  children: (0, import_jsx_runtime2.jsxs)(Flex, {
                    direction: "column",
                    alignItems: "stretch",
                    gap: 6,
                    children: [
                      (0, import_jsx_runtime2.jsxs)(Field.Root, {
                        name: "name",
                        error: errors.name && formatMessage({
                          id: errors.name,
                          defaultMessage: errors.name
                        }),
                        required: true,
                        children: [
                          (0, import_jsx_runtime2.jsx)(Field.Label, {
                            children: formatMessage({
                              id: "content-releases.modal.form.input.label.release-name",
                              defaultMessage: "Name"
                            })
                          }),
                          (0, import_jsx_runtime2.jsx)(TextInput, {
                            value: values.name,
                            onChange: handleChange
                          }),
                          (0, import_jsx_runtime2.jsx)(Field.Error, {})
                        ]
                      }),
                      (0, import_jsx_runtime2.jsx)(Box, {
                        width: "max-content",
                        children: (0, import_jsx_runtime2.jsx)(CheckboxImpl, {
                          name: "isScheduled",
                          checked: values.isScheduled,
                          onCheckedChange: (checked) => {
                            setFieldValue("isScheduled", checked);
                            if (!checked) {
                              setFieldValue("date", null);
                              setFieldValue("time", "");
                              setFieldValue("timezone", null);
                            } else {
                              setFieldValue("date", initialValues.date);
                              setFieldValue("time", initialValues.time);
                              setFieldValue("timezone", initialValues.timezone ?? (systemTimezone == null ? void 0 : systemTimezone.value));
                            }
                          },
                          children: (0, import_jsx_runtime2.jsx)(Typography, {
                            textColor: values.isScheduled ? "primary600" : "neutral800",
                            fontWeight: values.isScheduled ? "semiBold" : "regular",
                            children: formatMessage({
                              id: "modal.form.input.label.schedule-release",
                              defaultMessage: "Schedule release"
                            })
                          })
                        })
                      }),
                      values.isScheduled && (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, {
                        children: [
                          (0, import_jsx_runtime2.jsxs)(Flex, {
                            gap: 4,
                            alignItems: "start",
                            children: [
                              (0, import_jsx_runtime2.jsx)(Box, {
                                width: "100%",
                                children: (0, import_jsx_runtime2.jsxs)(Field.Root, {
                                  name: "date",
                                  error: errors.date && formatMessage({
                                    id: errors.date,
                                    defaultMessage: errors.date
                                  }),
                                  required: true,
                                  children: [
                                    (0, import_jsx_runtime2.jsx)(Field.Label, {
                                      children: formatMessage({
                                        id: "content-releases.modal.form.input.label.date",
                                        defaultMessage: "Date"
                                      })
                                    }),
                                    (0, import_jsx_runtime2.jsx)(DatePicker, {
                                      onChange: (date) => {
                                        const isoFormatDate = date ? formatISO(date, {
                                          representation: "date"
                                        }) : null;
                                        setFieldValue("date", isoFormatDate);
                                      },
                                      clearLabel: formatMessage({
                                        id: "content-releases.modal.form.input.clearLabel",
                                        defaultMessage: "Clear"
                                      }),
                                      onClear: () => {
                                        setFieldValue("date", null);
                                      },
                                      value: values.date ? new Date(values.date) : /* @__PURE__ */ new Date(),
                                      minDate: utcToZonedTime(/* @__PURE__ */ new Date(), values.timezone.split("&")[1])
                                    }),
                                    (0, import_jsx_runtime2.jsx)(Field.Error, {})
                                  ]
                                })
                              }),
                              (0, import_jsx_runtime2.jsx)(Box, {
                                width: "100%",
                                children: (0, import_jsx_runtime2.jsxs)(Field.Root, {
                                  name: "time",
                                  error: errors.time && formatMessage({
                                    id: errors.time,
                                    defaultMessage: errors.time
                                  }),
                                  required: true,
                                  children: [
                                    (0, import_jsx_runtime2.jsx)(Field.Label, {
                                      children: formatMessage({
                                        id: "content-releases.modal.form.input.label.time",
                                        defaultMessage: "Time"
                                      })
                                    }),
                                    (0, import_jsx_runtime2.jsx)(TimePicker, {
                                      onChange: (time) => {
                                        setFieldValue("time", time);
                                      },
                                      clearLabel: formatMessage({
                                        id: "content-releases.modal.form.input.clearLabel",
                                        defaultMessage: "Clear"
                                      }),
                                      onClear: () => {
                                        setFieldValue("time", "");
                                      },
                                      value: values.time || void 0
                                    }),
                                    (0, import_jsx_runtime2.jsx)(Field.Error, {})
                                  ]
                                })
                              })
                            ]
                          }),
                          (0, import_jsx_runtime2.jsx)(TimezoneComponent, {
                            timezoneOptions: timezoneList
                          })
                        ]
                      })
                    ]
                  })
                }),
                (0, import_jsx_runtime2.jsxs)(Modal.Footer, {
                  children: [
                    (0, import_jsx_runtime2.jsx)(Modal.Close, {
                      children: (0, import_jsx_runtime2.jsx)(Button, {
                        variant: "tertiary",
                        name: "cancel",
                        children: formatMessage({
                          id: "cancel",
                          defaultMessage: "Cancel"
                        })
                      })
                    }),
                    (0, import_jsx_runtime2.jsx)(Button, {
                      name: "submit",
                      loading: isLoading,
                      type: "submit",
                      children: formatMessage({
                        id: "content-releases.modal.form.button.submit",
                        defaultMessage: "{isCreatingRelease, select, true {Continue} other {Save}}"
                      }, {
                        isCreatingRelease
                      })
                    })
                  ]
                })
              ]
            });
          }
        })
      ]
    })
  });
};
var TimezoneComponent = ({ timezoneOptions }) => {
  const { values, errors, setFieldValue } = useFormikContext();
  const { formatMessage } = useIntl();
  const [timezoneList, setTimezoneList] = React2.useState(timezoneOptions);
  React2.useEffect(() => {
    if (values.date) {
      const { timezoneList: timezoneList2 } = getTimezones(new Date(values.date));
      setTimezoneList(timezoneList2);
      const updatedTimezone = values.timezone && timezoneList2.find((tz) => tz.value.split("&")[1] === values.timezone.split("&")[1]);
      if (updatedTimezone) {
        setFieldValue("timezone", updatedTimezone.value);
      }
    }
  }, [
    setFieldValue,
    values.date,
    values.timezone
  ]);
  return (0, import_jsx_runtime2.jsxs)(Field.Root, {
    name: "timezone",
    error: errors.timezone && formatMessage({
      id: errors.timezone,
      defaultMessage: errors.timezone
    }),
    required: true,
    children: [
      (0, import_jsx_runtime2.jsx)(Field.Label, {
        children: formatMessage({
          id: "content-releases.modal.form.input.label.timezone",
          defaultMessage: "Timezone"
        })
      }),
      (0, import_jsx_runtime2.jsx)(Combobox, {
        autocomplete: {
          type: "list",
          filter: "contains"
        },
        value: values.timezone || void 0,
        textValue: values.timezone ? values.timezone.replace(/&/, " ") : void 0,
        onChange: (timezone) => {
          setFieldValue("timezone", timezone);
        },
        onTextValueChange: (timezone) => {
          setFieldValue("timezone", timezone);
        },
        onClear: () => {
          setFieldValue("timezone", "");
        },
        children: timezoneList.map((timezone) => (0, import_jsx_runtime2.jsx)(Option, {
          value: timezone.value,
          children: timezone.value.replace(/&/, " ")
        }, timezone.value))
      }),
      (0, import_jsx_runtime2.jsx)(Field.Error, {})
    ]
  });
};

// node_modules/@strapi/content-releases/dist/admin/pages/ReleasesPage.mjs
var LinkCard = dt(Link)`
  display: block;
`;
var RelativeTime2 = dt(RelativeTime)`
  display: inline-block;
  &::first-letter {
    text-transform: uppercase;
  }
`;
var getBadgeProps = (status) => {
  let color;
  switch (status) {
    case "ready":
      color = "success";
      break;
    case "blocked":
      color = "warning";
      break;
    case "failed":
      color = "danger";
      break;
    case "done":
      color = "primary";
      break;
    case "empty":
    default:
      color = "neutral";
  }
  return {
    textColor: `${color}600`,
    backgroundColor: `${color}100`,
    borderColor: `${color}200`
  };
};
var ReleasesGrid = ({ sectionTitle, releases = [], isError = false }) => {
  const { formatMessage } = useIntl();
  if (isError) {
    return (0, import_jsx_runtime3.jsx)(Page.Error, {});
  }
  if ((releases == null ? void 0 : releases.length) === 0) {
    return (0, import_jsx_runtime3.jsx)(EmptyStateLayout, {
      content: formatMessage({
        id: "content-releases.page.Releases.tab.emptyEntries",
        defaultMessage: "No releases"
      }, {
        target: sectionTitle
      }),
      icon: (0, import_jsx_runtime3.jsx)(ForwardRef$J, {
        width: "16rem"
      })
    });
  }
  return (0, import_jsx_runtime3.jsx)(Grid.Root, {
    gap: 4,
    children: releases.map(({ id, name, scheduledAt, status }) => (0, import_jsx_runtime3.jsx)(Grid.Item, {
      col: 3,
      s: 6,
      xs: 12,
      direction: "column",
      alignItems: "stretch",
      children: (0, import_jsx_runtime3.jsx)(LinkCard, {
        tag: NavLink,
        to: `${id}`,
        isExternal: false,
        children: (0, import_jsx_runtime3.jsxs)(Flex, {
          direction: "column",
          justifyContent: "space-between",
          padding: 4,
          hasRadius: true,
          background: "neutral0",
          shadow: "tableShadow",
          height: "100%",
          width: "100%",
          alignItems: "start",
          gap: 4,
          children: [
            (0, import_jsx_runtime3.jsxs)(Flex, {
              direction: "column",
              alignItems: "start",
              gap: 1,
              children: [
                (0, import_jsx_runtime3.jsx)(Typography, {
                  textColor: "neutral800",
                  tag: "h3",
                  variant: "delta",
                  fontWeight: "bold",
                  children: name
                }),
                (0, import_jsx_runtime3.jsx)(Typography, {
                  variant: "pi",
                  textColor: "neutral600",
                  children: scheduledAt ? (0, import_jsx_runtime3.jsx)(RelativeTime2, {
                    timestamp: new Date(scheduledAt)
                  }) : formatMessage({
                    id: "content-releases.pages.Releases.not-scheduled",
                    defaultMessage: "Not scheduled"
                  })
                })
              ]
            }),
            (0, import_jsx_runtime3.jsx)(Badge, {
              ...getBadgeProps(status),
              children: status
            })
          ]
        })
      })
    }, id))
  });
};
var StyledAlert = dt(Alert)`
  button {
    display: none;
  }
  p + div {
    margin-left: auto;
  }
`;
var INITIAL_FORM_VALUES = {
  name: "",
  date: format(/* @__PURE__ */ new Date(), "yyyy-MM-dd"),
  time: "",
  isScheduled: true,
  scheduledAt: null,
  timezone: null
};
var ReleasesPage = () => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
  const location = useLocation();
  const [releaseModalShown, setReleaseModalShown] = React3.useState(false);
  const { toggleNotification } = useNotification();
  const { formatMessage } = useIntl();
  const navigate = useNavigate();
  const { formatAPIError } = useAPIErrorHandler();
  const [{ query }, setQuery] = useQueryParams();
  const response = useGetReleasesQuery(query);
  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();
  const [createRelease, { isLoading: isSubmittingForm }] = useCreateReleaseMutation();
  const { getFeature } = useLicenseLimits();
  const { maximumReleases = 3 } = getFeature("cms-content-releases");
  const { trackUsage } = useTracking();
  const { allowedActions: { canCreate } } = useRBAC(PERMISSIONS);
  const { isLoading: isLoadingReleases, isSuccess, isError } = response;
  const activeTab = ((_b = (_a = response == null ? void 0 : response.currentData) == null ? void 0 : _a.meta) == null ? void 0 : _b.activeTab) || "pending";
  React3.useEffect(() => {
    var _a2;
    if ((_a2 = location == null ? void 0 : location.state) == null ? void 0 : _a2.errors) {
      toggleNotification({
        type: "danger",
        title: formatMessage({
          id: "content-releases.pages.Releases.notification.error.title",
          defaultMessage: "Your request could not be processed."
        }),
        message: formatMessage({
          id: "content-releases.pages.Releases.notification.error.message",
          defaultMessage: "Please try again or open another release."
        })
      });
      navigate("", {
        replace: true,
        state: null
      });
    }
  }, [
    formatMessage,
    (_c = location == null ? void 0 : location.state) == null ? void 0 : _c.errors,
    navigate,
    toggleNotification
  ]);
  const toggleAddReleaseModal = () => {
    setReleaseModalShown((prev) => !prev);
  };
  if (isLoadingReleases || isLoadingSettings) {
    return (0, import_jsx_runtime3.jsx)(Page.Loading, {});
  }
  const totalPendingReleases = isSuccess && ((_e = (_d = response.currentData) == null ? void 0 : _d.meta) == null ? void 0 : _e.pendingReleasesCount) || 0;
  const hasReachedMaximumPendingReleases = totalPendingReleases >= maximumReleases;
  const handleTabChange = (tabValue) => {
    var _a2, _b2, _c2;
    setQuery({
      ...query,
      page: 1,
      pageSize: ((_c2 = (_b2 = (_a2 = response == null ? void 0 : response.currentData) == null ? void 0 : _a2.meta) == null ? void 0 : _b2.pagination) == null ? void 0 : _c2.pageSize) || 16,
      filters: {
        releasedAt: {
          $notNull: tabValue !== "pending"
        }
      }
    });
  };
  const handleAddRelease = async ({ name, scheduledAt, timezone }) => {
    const response2 = await createRelease({
      name,
      scheduledAt,
      timezone
    });
    if ("data" in response2) {
      toggleNotification({
        type: "success",
        message: formatMessage({
          id: "content-releases.modal.release-created-notification-success",
          defaultMessage: "Release created."
        })
      });
      trackUsage("didCreateRelease");
      navigate(response2.data.data.id.toString());
    } else if (isFetchError(response2.error)) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(response2.error)
      });
    } else {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  return (0, import_jsx_runtime3.jsxs)(Main, {
    "aria-busy": isLoadingReleases || isLoadingSettings,
    children: [
      (0, import_jsx_runtime3.jsx)(Layouts.Header, {
        title: formatMessage({
          id: "content-releases.pages.Releases.title",
          defaultMessage: "Releases"
        }),
        secondaryAction: (0, import_jsx_runtime3.jsx)(GradientBadgeWithIcon, {
          label: formatMessage({
            id: "components.premiumFeature.title",
            defaultMessage: "Premium feature"
          })
        }),
        subtitle: formatMessage({
          id: "content-releases.pages.Releases.header-subtitle",
          defaultMessage: "Create and manage content updates"
        }),
        primaryAction: canCreate ? (0, import_jsx_runtime3.jsx)(Button, {
          startIcon: (0, import_jsx_runtime3.jsx)(ForwardRef$1l, {}),
          onClick: toggleAddReleaseModal,
          disabled: hasReachedMaximumPendingReleases,
          children: formatMessage({
            id: "content-releases.header.actions.add-release",
            defaultMessage: "New release"
          })
        }) : null
      }),
      (0, import_jsx_runtime3.jsx)(Layouts.Content, {
        children: (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, {
          children: [
            hasReachedMaximumPendingReleases && (0, import_jsx_runtime3.jsx)(StyledAlert, {
              marginBottom: 6,
              action: (0, import_jsx_runtime3.jsx)(Link, {
                href: "https://strapi.io/pricing-cloud",
                isExternal: true,
                children: formatMessage({
                  id: "content-releases.pages.Releases.max-limit-reached.action",
                  defaultMessage: "Explore plans"
                })
              }),
              title: formatMessage({
                id: "content-releases.pages.Releases.max-limit-reached.title",
                defaultMessage: "You have reached the {number} pending {number, plural, one {release} other {releases}} limit."
              }, {
                number: maximumReleases
              }),
              onClose: () => {
              },
              closeLabel: "",
              children: formatMessage({
                id: "content-releases.pages.Releases.max-limit-reached.message",
                defaultMessage: "Upgrade to manage an unlimited number of releases."
              })
            }),
            (0, import_jsx_runtime3.jsxs)(Tabs.Root, {
              variant: "simple",
              onValueChange: handleTabChange,
              value: activeTab,
              children: [
                (0, import_jsx_runtime3.jsxs)(Box, {
                  paddingBottom: 8,
                  children: [
                    (0, import_jsx_runtime3.jsxs)(Tabs.List, {
                      "aria-label": formatMessage({
                        id: "content-releases.pages.Releases.tab-group.label",
                        defaultMessage: "Releases list"
                      }),
                      children: [
                        (0, import_jsx_runtime3.jsx)(Tabs.Trigger, {
                          value: "pending",
                          children: formatMessage({
                            id: "content-releases.pages.Releases.tab.pending",
                            defaultMessage: "Pending ({count})"
                          }, {
                            count: totalPendingReleases
                          })
                        }),
                        (0, import_jsx_runtime3.jsx)(Tabs.Trigger, {
                          value: "done",
                          children: formatMessage({
                            id: "content-releases.pages.Releases.tab.done",
                            defaultMessage: "Done"
                          })
                        })
                      ]
                    }),
                    (0, import_jsx_runtime3.jsx)(Divider, {})
                  ]
                }),
                (0, import_jsx_runtime3.jsx)(Tabs.Content, {
                  value: "pending",
                  children: (0, import_jsx_runtime3.jsx)(ReleasesGrid, {
                    sectionTitle: "pending",
                    releases: (_f = response == null ? void 0 : response.currentData) == null ? void 0 : _f.data,
                    isError
                  })
                }),
                (0, import_jsx_runtime3.jsx)(Tabs.Content, {
                  value: "done",
                  children: (0, import_jsx_runtime3.jsx)(ReleasesGrid, {
                    sectionTitle: "done",
                    releases: (_g = response == null ? void 0 : response.currentData) == null ? void 0 : _g.data,
                    isError
                  })
                })
              ]
            }),
            (0, import_jsx_runtime3.jsxs)(Pagination.Root, {
              ...(_i = (_h = response == null ? void 0 : response.currentData) == null ? void 0 : _h.meta) == null ? void 0 : _i.pagination,
              defaultPageSize: (_l = (_k = (_j = response == null ? void 0 : response.currentData) == null ? void 0 : _j.meta) == null ? void 0 : _k.pagination) == null ? void 0 : _l.pageSize,
              children: [
                (0, import_jsx_runtime3.jsx)(Pagination.PageSize, {
                  options: [
                    "8",
                    "16",
                    "32",
                    "64"
                  ]
                }),
                (0, import_jsx_runtime3.jsx)(Pagination.Links, {})
              ]
            })
          ]
        })
      }),
      (0, import_jsx_runtime3.jsx)(ReleaseModal, {
        open: releaseModalShown,
        handleClose: toggleAddReleaseModal,
        handleSubmit: handleAddRelease,
        isLoading: isSubmittingForm,
        initialValues: {
          ...INITIAL_FORM_VALUES,
          timezone: (data == null ? void 0 : data.data.defaultTimezone) ? data.data.defaultTimezone.split("&")[1] : null
        }
      })
    ]
  });
};

export {
  RelativeTime,
  ReleaseModal,
  getBadgeProps,
  ReleasesPage
};
//# sourceMappingURL=chunk-LWUQGJPJ.js.map
