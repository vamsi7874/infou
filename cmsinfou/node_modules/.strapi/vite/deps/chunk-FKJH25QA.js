import {
  reducer
} from "./chunk-OJF34WUO.js";
import {
  DEFAULT_BULK_ACTIONS,
  DEFAULT_TABLE_ROW_ACTIONS
} from "./chunk-AOCBHQ4Y.js";
import {
  ActionsPanel,
  DEFAULT_ACTIONS,
  DEFAULT_HEADER_ACTIONS,
  INJECTION_ZONES,
  PLUGIN_ID,
  require_prism,
  routes,
  useGetPreviewUrlQuery
} from "./chunk-DRAMLPHJ.js";
import {
  prefixPluginTranslations
} from "./chunk-HIZVCZYI.js";
import {
  useForm
} from "./chunk-UIPCSNOH.js";
import {
  useTracking
} from "./chunk-KPVRSNVY.js";
import {
  useQueryParams
} from "./chunk-OZMR6ZG7.js";
import {
  require_lib
} from "./chunk-OP4OIIKW.js";
import {
  combineReducers
} from "./chunk-VG57EMON.js";
import {
  Box,
  Button,
  TooltipImpl,
  useIntl
} from "./chunk-FR3G64L6.js";
import {
  Link,
  useLocation,
  useNavigate
} from "./chunk-MEXSUURY.js";
import {
  ForwardRef$1d,
  ForwardRef$1z,
  ForwardRef$3F,
  ForwardRef$4L,
  ForwardRef$4x
} from "./chunk-VKBWGUCP.js";
import {
  require_jsx_runtime
} from "./chunk-YHVPSBF3.js";
import {
  require_react
} from "./chunk-3ZCHZDHB.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-manager/dist/admin/content-manager.mjs
var ContentManagerPlugin = class {
  addEditViewSidePanel(panels) {
    if (Array.isArray(panels)) {
      this.editViewSidePanels = [
        ...this.editViewSidePanels,
        ...panels
      ];
    } else if (typeof panels === "function") {
      this.editViewSidePanels = panels(this.editViewSidePanels);
    } else {
      throw new Error(`Expected the \`panels\` passed to \`addEditViewSidePanel\` to be an array or a function, but received ${getPrintableType(panels)}`);
    }
  }
  addDocumentAction(actions) {
    if (Array.isArray(actions)) {
      this.documentActions = [
        ...this.documentActions,
        ...actions
      ];
    } else if (typeof actions === "function") {
      this.documentActions = actions(this.documentActions);
    } else {
      throw new Error(`Expected the \`actions\` passed to \`addDocumentAction\` to be an array or a function, but received ${getPrintableType(actions)}`);
    }
  }
  addDocumentHeaderAction(actions) {
    if (Array.isArray(actions)) {
      this.headerActions = [
        ...this.headerActions,
        ...actions
      ];
    } else if (typeof actions === "function") {
      this.headerActions = actions(this.headerActions);
    } else {
      throw new Error(`Expected the \`actions\` passed to \`addDocumentHeaderAction\` to be an array or a function, but received ${getPrintableType(actions)}`);
    }
  }
  addBulkAction(actions) {
    if (Array.isArray(actions)) {
      this.bulkActions = [
        ...this.bulkActions,
        ...actions
      ];
    } else if (typeof actions === "function") {
      this.bulkActions = actions(this.bulkActions);
    } else {
      throw new Error(`Expected the \`actions\` passed to \`addBulkAction\` to be an array or a function, but received ${getPrintableType(actions)}`);
    }
  }
  get config() {
    return {
      id: PLUGIN_ID,
      name: "Content Manager",
      injectionZones: INJECTION_ZONES,
      apis: {
        addBulkAction: this.addBulkAction.bind(this),
        addDocumentAction: this.addDocumentAction.bind(this),
        addDocumentHeaderAction: this.addDocumentHeaderAction.bind(this),
        addEditViewSidePanel: this.addEditViewSidePanel.bind(this),
        getBulkActions: () => this.bulkActions,
        getDocumentActions: (position) => {
          if (position) {
            return this.documentActions.filter((action) => {
              return action.position == void 0 || [
                action.position
              ].flat().includes(position);
            });
          }
          return this.documentActions;
        },
        getEditViewSidePanels: () => this.editViewSidePanels,
        getHeaderActions: () => this.headerActions
      }
    };
  }
  constructor() {
    this.bulkActions = [
      ...DEFAULT_BULK_ACTIONS
    ];
    this.documentActions = [
      ...DEFAULT_ACTIONS,
      ...DEFAULT_TABLE_ROW_ACTIONS,
      ...DEFAULT_HEADER_ACTIONS
    ];
    this.editViewSidePanels = [
      ActionsPanel
    ];
    this.headerActions = [];
  }
};
var getPrintableType = (value) => {
  const nativeType = typeof value;
  if (nativeType === "object") {
    if (value === null) return "null";
    if (Array.isArray(value)) return "array";
    if (value instanceof Object && value.constructor.name !== "Object") {
      return value.constructor.name;
    }
  }
  return nativeType;
};

// node_modules/@strapi/content-manager/dist/admin/history/components/HistoryAction.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_qs = __toESM(require_lib(), 1);
var HistoryAction = ({ model, document }) => {
  const { formatMessage } = useIntl();
  const [{ query }] = useQueryParams();
  const navigate = useNavigate();
  const { trackUsage } = useTracking();
  const { pathname } = useLocation();
  const pluginsQueryParams = (0, import_qs.stringify)({
    plugins: query.plugins
  }, {
    encode: false
  });
  if (!window.strapi.features.isEnabled("cms-content-history")) {
    return null;
  }
  const handleOnClick = () => {
    const destination = {
      pathname: "history",
      search: pluginsQueryParams
    };
    trackUsage("willNavigate", {
      from: pathname,
      to: `${pathname}/${destination.pathname}`
    });
    navigate(destination);
  };
  return {
    icon: (0, import_jsx_runtime.jsx)(ForwardRef$4x, {}),
    label: formatMessage({
      id: "content-manager.history.document-action",
      defaultMessage: "Content History"
    }),
    onClick: handleOnClick,
    disabled: (
      /**
      * The user is creating a new document.
      * It hasn't been saved yet, so there's no history to go to
      */
      !document || /**
      * The document has been created but the current dimension has never been saved.
      * For example, the user is creating a new locale in an existing document,
      * so there's no history for the document in that locale
      */
      !document.id || /**
      * History is only available for content types created by the user.
      * These have the `api::` prefix, as opposed to the ones created by Strapi or plugins,
      * which start with `admin::` or `plugin::`
      */
      !model.startsWith("api::")
    ),
    position: "header"
  };
};
HistoryAction.type = "history";
HistoryAction.position = "header";

// node_modules/@strapi/content-manager/dist/admin/history/index.mjs
var historyAdmin = {
  bootstrap(app) {
    const { addDocumentAction } = app.getPlugin("content-manager").apis;
    addDocumentAction((actions) => {
      const indexOfDeleteAction = actions.findIndex((action) => action.type === "delete");
      actions.splice(indexOfDeleteAction, 0, HistoryAction);
      return actions;
    });
  }
};

// node_modules/@strapi/content-manager/dist/admin/modules/reducers.mjs
var reducer2 = combineReducers({
  app: reducer
});

// node_modules/@strapi/content-manager/dist/admin/preview/components/PreviewSidePanel.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_qs2 = __toESM(require_lib(), 1);
var ConditionalTooltip = ({ isShown, label, children }) => {
  if (isShown) {
    return (0, import_jsx_runtime2.jsx)(TooltipImpl, {
      label,
      children
    });
  }
  return children;
};
var PreviewSidePanel = ({ model, documentId, document }) => {
  var _a;
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const { pathname } = useLocation();
  const [{ query }] = useQueryParams();
  const isModified = useForm("PreviewSidePanel", (state) => state.modified);
  const isUnsaved = Boolean(!document || !document.id);
  const title = formatMessage({
    id: "content-manager.preview.panel.title",
    defaultMessage: "Preview"
  });
  const { data, error } = useGetPreviewUrlQuery(
    {
      params: {
        contentType: model
      },
      query: {
        documentId,
        locale: document == null ? void 0 : document.locale,
        status: document == null ? void 0 : document.status
      }
    },
    // Don't bother making the request since we won't show any UI
    {
      skip: isUnsaved
    }
  );
  if (isUnsaved) {
    return null;
  }
  if (error && error.name === "NotFoundError") {
    return {
      title,
      content: (0, import_jsx_runtime2.jsx)(Button, {
        variant: "tertiary",
        tag: Link,
        to: "https://docs.strapi.io/cms/features/preview",
        target: "_blank",
        rel: "noopener noreferrer",
        width: "100%",
        children: formatMessage({
          id: "content-manager.preview.panel.button-configuration",
          defaultMessage: "Set up preview"
        })
      })
    };
  }
  if (!((_a = data == null ? void 0 : data.data) == null ? void 0 : _a.url) || error) {
    return null;
  }
  const trackNavigation = () => {
    const destinationPathname = pathname.replace(/\/$/, "") + "/preview";
    trackUsage("willNavigate", {
      from: pathname,
      to: destinationPathname
    });
  };
  return {
    title,
    content: (0, import_jsx_runtime2.jsx)(ConditionalTooltip, {
      label: formatMessage({
        id: "content-manager.preview.panel.button-disabled-tooltip",
        defaultMessage: "Please save to open the preview"
      }),
      isShown: isModified,
      children: (0, import_jsx_runtime2.jsx)(Box, {
        cursor: "not-allowed",
        width: "100%",
        children: (0, import_jsx_runtime2.jsx)(Button, {
          variant: "tertiary",
          tag: Link,
          to: {
            pathname: "preview",
            search: (0, import_qs2.stringify)(query, {
              encode: false
            })
          },
          onClick: trackNavigation,
          width: "100%",
          disabled: isModified,
          pointerEvents: isModified ? "none" : void 0,
          tabIndex: isModified ? -1 : void 0,
          children: formatMessage({
            id: "content-manager.preview.panel.button",
            defaultMessage: "Open preview"
          })
        })
      })
    })
  };
};

// node_modules/@strapi/content-manager/dist/admin/preview/index.mjs
var previewAdmin = {
  bootstrap(app) {
    const contentManagerPluginApis = app.getPlugin("content-manager").apis;
    contentManagerPluginApis.addEditViewSidePanel([
      PreviewSidePanel
    ]);
  }
};

// node_modules/@strapi/content-manager/dist/admin/index.mjs
var import_prismjs = __toESM(require_prism(), 1);
function __variableDynamicImportRuntime4__(path) {
  switch (path) {
    case "./translations/ar.json":
      return import("./ar.json-POIJ7F7L.js");
    case "./translations/ca.json":
      return import("./ca.json-WQWVU7LI.js");
    case "./translations/cs.json":
      return import("./cs.json-4CFV5TPQ.js");
    case "./translations/de.json":
      return import("./de.json-7VPHD2OM.js");
    case "./translations/en.json":
      return import("./en.json-KBLXWFAZ.js");
    case "./translations/es.json":
      return import("./es.json-EOFEM642.js");
    case "./translations/eu.json":
      return import("./eu.json-IHUUIPVK.js");
    case "./translations/fr.json":
      return import("./fr.json-KKIUAEFH.js");
    case "./translations/gu.json":
      return import("./gu.json-N2YXIJ3R.js");
    case "./translations/hi.json":
      return import("./hi.json-4UBA23WO.js");
    case "./translations/hu.json":
      return import("./hu.json-AXTSUX5B.js");
    case "./translations/id.json":
      return import("./id.json-NNZHXIMM.js");
    case "./translations/it.json":
      return import("./it.json-RXR5HGQL.js");
    case "./translations/ja.json":
      return import("./ja.json-7QEE5BQL.js");
    case "./translations/ko.json":
      return import("./ko.json-UTCSLCNX.js");
    case "./translations/ml.json":
      return import("./ml.json-HCYXURFT.js");
    case "./translations/ms.json":
      return import("./ms.json-AWJ7HTQL.js");
    case "./translations/nl.json":
      return import("./nl.json-5UCQRI62.js");
    case "./translations/pl.json":
      return import("./pl.json-4UJ7NAIG.js");
    case "./translations/pt-BR.json":
      return import("./pt-BR.json-7OSJSJ7U.js");
    case "./translations/pt.json":
      return import("./pt.json-5RHGKOVU.js");
    case "./translations/ru.json":
      return import("./ru.json-2WRRYZJ4.js");
    case "./translations/sa.json":
      return import("./sa.json-7S32J274.js");
    case "./translations/sk.json":
      return import("./sk.json-OL43SHGE.js");
    case "./translations/sv.json":
      return import("./sv.json-KF2VLQIT.js");
    case "./translations/th.json":
      return import("./th.json-XOT4PXVP.js");
    case "./translations/tr.json":
      return import("./tr.json-GTPZFTUC.js");
    case "./translations/uk.json":
      return import("./uk.json-4SC7FGHL.js");
    case "./translations/vi.json":
      return import("./vi.json-KUAKV5ZG.js");
    case "./translations/zh-Hans.json":
      return import("./zh-Hans.json-F4ALX5MW.js");
    case "./translations/zh.json":
      return import("./zh.json-5QKDAAIM.js");
    default:
      return new Promise(function(resolve, reject) {
        (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
          reject.bind(null, new Error("Unknown variable dynamic import: " + path))
        );
      });
  }
}
var index = {
  register(app) {
    const cm = new ContentManagerPlugin();
    app.addReducers({
      [PLUGIN_ID]: reducer2
    });
    app.addMenuLink({
      to: PLUGIN_ID,
      icon: ForwardRef$3F,
      intlLabel: {
        id: `content-manager.plugin.name`,
        defaultMessage: "Content Manager"
      },
      permissions: [],
      position: 1
    });
    app.router.addRoute({
      path: "content-manager/*",
      lazy: async () => {
        const { Layout } = await import("./layout-BJ4KTZYV.js");
        return {
          Component: Layout
        };
      },
      children: routes
    });
    app.registerPlugin(cm.config);
    app.widgets.register((widgets) => {
      const lastEditedWidget = {
        icon: ForwardRef$1z,
        title: {
          id: `${PLUGIN_ID}.widget.last-edited.title`,
          defaultMessage: "Last edited entries"
        },
        component: async () => {
          const { LastEditedWidget } = await import("./Widgets-VBBMMO26.js");
          return LastEditedWidget;
        },
        pluginId: PLUGIN_ID,
        id: "last-edited-entries",
        permissions: [
          {
            action: "plugin::content-manager.explorer.read"
          }
        ]
      };
      const lastPublishedWidget = {
        icon: ForwardRef$4L,
        title: {
          id: `${PLUGIN_ID}.widget.last-published.title`,
          defaultMessage: "Last published entries"
        },
        component: async () => {
          const { LastPublishedWidget } = await import("./Widgets-VBBMMO26.js");
          return LastPublishedWidget;
        },
        pluginId: PLUGIN_ID,
        id: "last-published-entries",
        permissions: [
          {
            action: "plugin::content-manager.explorer.read"
          }
        ]
      };
      const entriesWidget = {
        icon: ForwardRef$1d,
        title: {
          id: `${PLUGIN_ID}.widget.chart-entries.title`,
          defaultMessage: "Entries"
        },
        component: async () => {
          const { ChartEntriesWidget } = await import("./Widgets-VBBMMO26.js");
          return ChartEntriesWidget;
        },
        pluginId: PLUGIN_ID,
        id: "chart-entries",
        permissions: [
          {
            action: "plugin::content-manager.explorer.read"
          }
        ]
      };
      const profileInfoIndex = widgets.findIndex((widget) => widget.id === "profile-info" && widget.pluginId === "admin");
      if (profileInfoIndex !== -1) {
        const newWidgets = [
          ...widgets
        ];
        newWidgets.splice(profileInfoIndex + 1, 0, entriesWidget);
        return [
          lastEditedWidget,
          lastPublishedWidget,
          ...newWidgets
        ];
      }
      return [
        lastEditedWidget,
        lastPublishedWidget,
        ...widgets,
        entriesWidget
      ];
    });
  },
  bootstrap(app) {
    if (typeof historyAdmin.bootstrap === "function") {
      historyAdmin.bootstrap(app);
    }
    if (typeof previewAdmin.bootstrap === "function") {
      previewAdmin.bootstrap(app);
    }
  },
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(locales.map((locale) => {
      return __variableDynamicImportRuntime4__(`./translations/${locale}.json`).then(({ default: data }) => {
        return {
          data: prefixPluginTranslations(data, PLUGIN_ID),
          locale
        };
      }).catch(() => {
        return {
          data: {},
          locale
        };
      });
    }));
    return Promise.resolve(importedTrads);
  }
};

export {
  index
};
//# sourceMappingURL=chunk-FKJH25QA.js.map
