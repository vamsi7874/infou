{
  "version": 3,
  "sources": ["../../../@strapi/content-releases/admin/src/components/EntryValidationPopover.tsx", "../../../@strapi/content-releases/admin/src/store/hooks.ts", "../../../@strapi/content-releases/admin/src/utils/api.ts", "../../../@strapi/content-releases/admin/src/pages/ReleaseDetailsPage.tsx", "../../../@strapi/content-releases/admin/src/pages/App.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { FormErrors, FormValues } from '@strapi/admin/strapi-admin';\nimport { unstable_useDocument } from '@strapi/content-manager/strapi-admin';\nimport { Button, LinkButton, Flex, Typography, Popover } from '@strapi/design-system';\nimport { CheckCircle, CrossCircle, ArrowsCounterClockwise, CaretDown } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl, MessageDescriptor } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport type {\n  ReleaseAction,\n  ReleaseActionEntry,\n  Stage,\n} from '../../../shared/contracts/release-actions';\nimport type { Struct } from '@strapi/types';\n\nconst StyledPopoverFlex = styled(Flex)`\n  width: 100%;\n  max-width: 256px;\n\n  & > * {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};\n  }\n\n  & > *:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst ButtonContent = styled(Flex)`\n  svg {\n    fill: currentColor;\n  }\n`;\n\nconst CustomStatusButton = ({\n  children,\n  icon,\n  color,\n}: {\n  icon: React.ReactElement;\n  color: string;\n} & React.PropsWithChildren) => {\n  return (\n    <Popover.Trigger>\n      <Button variant=\"ghost\" endIcon={<CaretDown />}>\n        <ButtonContent color={color} gap={2}>\n          {icon}\n          <Typography textColor={color} variant=\"omega\" fontWeight=\"bold\">\n            {children}\n          </Typography>\n        </ButtonContent>\n      </Button>\n    </Popover.Trigger>\n  );\n};\n\ninterface EntryValidationPopoverProps {\n  action: ReleaseAction['type'];\n  schema?: Struct.ContentTypeSchema & {\n    hasReviewWorkflow: boolean;\n    stageRequiredToPublish?: Stage;\n  };\n  entry: ReleaseActionEntry;\n  status: ReleaseAction['status'];\n}\n\ninterface ValidationStatusProps {\n  action: ReleaseAction['type'];\n  status: ReleaseAction['status'];\n  hasErrors: boolean | null;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}\n\nconst EntryStatusTrigger = ({\n  action,\n  status,\n  hasErrors,\n  requiredStage,\n  entryStage,\n}: ValidationStatusProps) => {\n  const { formatMessage } = useIntl();\n\n  if (action === 'publish') {\n    if (hasErrors || (requiredStage && requiredStage.id !== entryStage?.id)) {\n      return (\n        <CustomStatusButton icon={<CrossCircle />} color=\"danger600\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.not-ready',\n            defaultMessage: 'Not ready to publish',\n          })}\n        </CustomStatusButton>\n      );\n    }\n\n    if (status === 'draft') {\n      return (\n        <CustomStatusButton icon={<CheckCircle />} color=\"success600\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.ready-to-publish',\n            defaultMessage: 'Ready to publish',\n          })}\n        </CustomStatusButton>\n      );\n    }\n\n    if (status === 'modified') {\n      return (\n        <CustomStatusButton icon={<ArrowsCounterClockwise />} color=\"alternative600\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.modified',\n            defaultMessage: 'Ready to publish changes',\n          })}\n        </CustomStatusButton>\n      );\n    }\n\n    return (\n      <CustomStatusButton icon={<CheckCircle />} color=\"success600\">\n        {formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.entry-validation.already-published',\n          defaultMessage: 'Already published',\n        })}\n      </CustomStatusButton>\n    );\n  }\n\n  if (status === 'published') {\n    return (\n      <CustomStatusButton icon={<CheckCircle />} color=\"success600\">\n        {formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.entry-validation.ready-to-unpublish',\n          defaultMessage: 'Ready to unpublish',\n        })}\n      </CustomStatusButton>\n    );\n  }\n\n  return (\n    <CustomStatusButton icon={<CheckCircle />} color=\"success600\">\n      {formatMessage({\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.already-unpublished',\n        defaultMessage: 'Already unpublished',\n      })}\n    </CustomStatusButton>\n  );\n};\n\ninterface FieldsValidationProps {\n  hasErrors: boolean;\n  errors: FormErrors<FormValues> | null;\n  kind?: string;\n  contentTypeUid?: string;\n  documentId?: string;\n  locale?: string;\n}\n\nconst FieldsValidation = ({\n  hasErrors,\n  errors,\n  kind,\n  contentTypeUid,\n  documentId,\n  locale,\n}: FieldsValidationProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex direction=\"column\" gap={1} width=\"100%\" padding={5}>\n      <Flex gap={2} width=\"100%\">\n        <Typography fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.fields',\n            defaultMessage: 'Fields',\n          })}\n        </Typography>\n        {hasErrors ? <CrossCircle fill=\"danger600\" /> : <CheckCircle fill=\"success600\" />}\n      </Flex>\n      <Typography width=\"100%\" textColor=\"neutral600\">\n        {hasErrors\n          ? formatMessage(\n              {\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.error',\n                defaultMessage: '{errors} errors on fields.',\n              },\n              { errors: errors ? Object.keys(errors).length : 0 }\n            )\n          : formatMessage({\n              id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.success',\n              defaultMessage: 'All fields are filled correctly.',\n            })}\n      </Typography>\n      {hasErrors && (\n        <LinkButton\n          tag={Link}\n          to={{\n            pathname: `/content-manager/${kind === 'collectionType' ? 'collection-types' : 'single-types'}/${contentTypeUid}/${documentId}`,\n            search: locale\n              ? stringify({\n                  plugins: {\n                    i18n: {\n                      locale,\n                    },\n                  },\n                })\n              : '',\n          }}\n          variant=\"secondary\"\n          fullWidth\n          state={{ forceValidation: true }}\n        >\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.see-errors',\n            defaultMessage: 'See errors',\n          })}\n        </LinkButton>\n      )}\n    </Flex>\n  );\n};\n\nconst getReviewStageIcon = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}) => {\n  if (!contentTypeHasReviewWorkflow) {\n    return <CheckCircle fill=\"neutral200\" />;\n  }\n  if (requiredStage && requiredStage.id !== entryStage?.id) {\n    return <CrossCircle fill=\"danger600\" />;\n  }\n  return <CheckCircle fill=\"success600\" />;\n};\n\nconst getReviewStageMessage = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n  formatMessage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n  formatMessage: (messageDescriptor: MessageDescriptor, values?: Record<string, string>) => string;\n}) => {\n  if (!contentTypeHasReviewWorkflow) {\n    return formatMessage({\n      id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-enabled',\n      defaultMessage: 'This entry is not associated to any workflow.',\n    });\n  }\n\n  if (requiredStage && requiredStage.id !== entryStage?.id) {\n    return formatMessage(\n      {\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-ready',\n        defaultMessage: 'This entry is not at the required stage for publishing. ({stageName})',\n      },\n      {\n        stageName: requiredStage?.name ?? '',\n      }\n    );\n  }\n\n  if (requiredStage && requiredStage.id === entryStage?.id) {\n    return formatMessage(\n      {\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.ready',\n        defaultMessage: 'This entry is at the required stage for publishing. ({stageName})',\n      },\n      {\n        stageName: requiredStage?.name ?? '',\n      }\n    );\n  }\n\n  return formatMessage({\n    id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.stage-not-required',\n    defaultMessage: 'No required stage for publication',\n  });\n};\n\nconst ReviewStageValidation = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}) => {\n  const { formatMessage } = useIntl();\n\n  const Icon = getReviewStageIcon({\n    contentTypeHasReviewWorkflow,\n    requiredStage,\n    entryStage,\n  });\n\n  return (\n    <Flex direction=\"column\" gap={1} width=\"100%\" padding={5}>\n      <Flex gap={2} width=\"100%\">\n        <Typography fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage',\n            defaultMessage: 'Review stage',\n          })}\n        </Typography>\n        {Icon}\n      </Flex>\n      <Typography textColor=\"neutral600\">\n        {getReviewStageMessage({\n          contentTypeHasReviewWorkflow,\n          requiredStage,\n          entryStage,\n          formatMessage,\n        })}\n      </Typography>\n    </Flex>\n  );\n};\n\nexport const EntryValidationPopover = ({\n  schema,\n  entry,\n  status,\n  action,\n}: EntryValidationPopoverProps) => {\n  const { validate, isLoading } = unstable_useDocument(\n    {\n      collectionType: schema?.kind ?? '',\n      model: schema?.uid ?? '',\n    },\n    {\n      // useDocument makes a request to get more data about the entry, but we only want to have the validation function so we skip the request\n      skip: true,\n    }\n  );\n\n  // Validation errors\n  const errors = isLoading ? null : validate(entry);\n  const hasErrors = errors ? Object.keys(errors).length > 0 : false;\n\n  // Entry stage\n  const contentTypeHasReviewWorkflow = schema?.hasReviewWorkflow ?? false;\n  const requiredStage = schema?.stageRequiredToPublish;\n  const entryStage = entry.strapi_stage;\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <Popover.Root>\n      <EntryStatusTrigger\n        action={action}\n        status={status}\n        hasErrors={hasErrors}\n        requiredStage={requiredStage}\n        entryStage={entryStage}\n      />\n      <Popover.Content>\n        <StyledPopoverFlex direction=\"column\">\n          <FieldsValidation\n            hasErrors={hasErrors}\n            errors={errors}\n            contentTypeUid={schema?.uid}\n            kind={schema?.kind}\n            documentId={entry.documentId}\n            locale={entry.locale}\n          />\n          <ReviewStageValidation\n            contentTypeHasReviewWorkflow={contentTypeHasReviewWorkflow}\n            requiredStage={requiredStage}\n            entryStage={entryStage}\n          />\n        </StyledPopoverFlex>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n", "import { Dispatch } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport type { Store } from '@strapi/admin/strapi-admin';\n\ntype RootState = ReturnType<Store['getState']>;\n\nconst useTypedDispatch: () => Dispatch = useDispatch;\nconst useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport { useTypedSelector, useTypedDispatch };\n", "import { SerializedError } from '@reduxjs/toolkit';\nimport { ApiError } from '@strapi/admin/strapi-admin';\n\ntype BaseQueryError = ApiError | SerializedError;\n\nconst isBaseQueryError = (error?: BaseQueryError): error is BaseQueryError => {\n  return typeof error !== 'undefined' && error.name !== undefined;\n};\n\nexport { isBaseQueryError };\nexport type { BaseQueryError };\n", "import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  Table,\n  BackButton,\n  ConfirmDialog,\n  useTracking,\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n  useStrapiApp,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Flex,\n  Main,\n  Tr,\n  Td,\n  Typography,\n  Badge,\n  SingleSelect,\n  SingleSelectOption,\n  EmptyStateLayout,\n  LinkButton,\n  Dialog,\n  SimpleMenu,\n  Menu,\n} from '@strapi/design-system';\nimport { More, Pencil, Trash } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport format from 'date-fns/format';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport { useIntl } from 'react-intl';\nimport { useParams, useNavigate, Link as ReactRouterLink, Navigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { EntryValidationPopover } from '../components/EntryValidationPopover';\nimport { RelativeTime } from '../components/RelativeTime';\nimport { ReleaseActionMenu } from '../components/ReleaseActionMenu';\nimport { ReleaseActionOptions } from '../components/ReleaseActionOptions';\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\nimport { PERMISSIONS } from '../constants';\nimport {\n  GetReleaseActionsQueryParams,\n  useGetReleaseActionsQuery,\n  useGetReleaseQuery,\n  useGetReleaseSettingsQuery,\n  useUpdateReleaseMutation,\n  useUpdateReleaseActionMutation,\n  usePublishReleaseMutation,\n  useDeleteReleaseMutation,\n  releaseApi,\n} from '../services/release';\nimport { useTypedDispatch } from '../store/hooks';\nimport { isBaseQueryError } from '../utils/api';\nimport { getTimezoneOffset } from '../utils/time';\n\nimport { getBadgeProps } from './ReleasesPage';\n\nimport type {\n  ReleaseAction,\n  ReleaseActionGroupBy,\n} from '../../../shared/contracts/release-actions';\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsLayout\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseInfoWrapper = styled(Flex)`\n  align-self: stretch;\n  border-bottom-right-radius: ${({ theme }) => theme.borderRadius};\n  border-bottom-left-radius: ${({ theme }) => theme.borderRadius};\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\ninterface ReleaseDetailsLayoutProps {\n  toggleEditReleaseModal: () => void;\n  toggleWarningSubmit: () => void;\n  children: React.ReactNode;\n}\n\nconst ReleaseDetailsLayout = ({\n  toggleEditReleaseModal,\n  toggleWarningSubmit,\n  children,\n}: ReleaseDetailsLayoutProps) => {\n  const { formatMessage, formatDate, formatTime } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const {\n    data,\n    isLoading: isLoadingDetails,\n    error,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const [publishRelease, { isLoading: isPublishing }] = usePublishReleaseMutation();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const { allowedActions } = useRBAC(PERMISSIONS);\n  const { canUpdate, canDelete, canPublish } = allowedActions;\n  const dispatch = useTypedDispatch();\n  const { trackUsage } = useTracking();\n\n  const release = data?.data;\n\n  const handlePublishRelease = (id: string) => async () => {\n    const response = await publishRelease({ id });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.publish-notification-success',\n          defaultMessage: 'Release was published successfully.',\n        }),\n      });\n\n      const { totalEntries, totalPublishedEntries, totalUnpublishedEntries } = response.data.meta;\n\n      trackUsage('didPublishRelease', {\n        totalEntries,\n        totalPublishedEntries,\n        totalUnpublishedEntries,\n      });\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleRefresh = () => {\n    dispatch(\n      releaseApi.util.invalidateTags([\n        { type: 'ReleaseAction', id: 'LIST' },\n        { type: 'Release', id: releaseId },\n      ])\n    );\n  };\n\n  const getCreatedByUser = () => {\n    if (!release?.createdBy) {\n      return null;\n    }\n\n    // Favor the username\n    if (release.createdBy.username) {\n      return release.createdBy.username;\n    }\n\n    // Firstname may not exist if created with SSO\n    if (release.createdBy.firstname) {\n      return `${release.createdBy.firstname} ${release.createdBy.lastname || ''}`.trim();\n    }\n\n    // All users must have at least an email\n    return release.createdBy.email;\n  };\n\n  if (isLoadingDetails) {\n    return <Page.Loading />;\n  }\n\n  if ((isBaseQueryError(error) && 'code' in error) || !release) {\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: [\n            {\n              // @ts-expect-error – TODO: fix this weird error flow\n              code: error?.code,\n            },\n          ],\n        }}\n      />\n    );\n  }\n\n  const totalEntries = release.actions.meta.count || 0;\n  const hasCreatedByUser = Boolean(getCreatedByUser());\n\n  const isScheduled = release.scheduledAt && release.timezone;\n  const numberOfEntriesText = formatMessage(\n    {\n      id: 'content-releases.pages.Details.header-subtitle',\n      defaultMessage: '{number, plural, =0 {No entries} one {# entry} other {# entries}}',\n    },\n    { number: totalEntries }\n  );\n  const scheduledText = isScheduled\n    ? formatMessage(\n        {\n          id: 'content-releases.pages.ReleaseDetails.header-subtitle.scheduled',\n          defaultMessage: 'Scheduled for {date} at {time} ({offset})',\n        },\n        {\n          date: formatDate(new Date(release.scheduledAt!), {\n            weekday: 'long',\n            day: 'numeric',\n            month: 'long',\n            year: 'numeric',\n            timeZone: release.timezone!,\n          }),\n          time: formatTime(new Date(release.scheduledAt!), {\n            timeZone: release.timezone!,\n            hourCycle: 'h23',\n          }),\n          offset: getTimezoneOffset(release.timezone!, new Date(release.scheduledAt!)),\n        }\n      )\n    : '';\n\n  return (\n    <Main aria-busy={isLoadingDetails}>\n      <Layouts.Header\n        title={release.name}\n        subtitle={\n          <Flex gap={2} lineHeight={6}>\n            <Typography textColor=\"neutral600\" variant=\"epsilon\">\n              {numberOfEntriesText + (isScheduled ? ` - ${scheduledText}` : '')}\n            </Typography>\n            <Badge {...getBadgeProps(release.status)}>{release.status}</Badge>\n          </Flex>\n        }\n        navigationAction={<BackButton fallback=\"..\" />}\n        primaryAction={\n          !release.releasedAt && (\n            <Flex gap={2}>\n              <SimpleMenuButton\n                label={<More />}\n                variant=\"tertiary\"\n                endIcon={null}\n                paddingLeft=\"7px\"\n                paddingRight=\"7px\"\n                aria-label={formatMessage({\n                  id: 'content-releases.header.actions.open-release-actions',\n                  defaultMessage: 'Release edit and delete menu',\n                })}\n                popoverPlacement=\"bottom-end\"\n              >\n                <Menu.Item\n                  disabled={!canUpdate}\n                  onSelect={toggleEditReleaseModal}\n                  startIcon={<Pencil />}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.edit',\n                    defaultMessage: 'Edit',\n                  })}\n                </Menu.Item>\n                <Menu.Item\n                  disabled={!canDelete}\n                  onSelect={toggleWarningSubmit}\n                  variant=\"danger\"\n                  startIcon={<Trash />}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.delete',\n                    defaultMessage: 'Delete',\n                  })}\n                </Menu.Item>\n                <ReleaseInfoWrapper\n                  direction=\"column\"\n                  justifyContent=\"center\"\n                  alignItems=\"flex-start\"\n                  gap={1}\n                  padding={4}\n                >\n                  <Typography variant=\"pi\" fontWeight=\"bold\">\n                    {formatMessage({\n                      id: 'content-releases.header.actions.created',\n                      defaultMessage: 'Created',\n                    })}\n                  </Typography>\n                  <Typography variant=\"pi\" color=\"neutral300\">\n                    <RelativeTime timestamp={new Date(release.createdAt)} />\n                    {formatMessage(\n                      {\n                        id: 'content-releases.header.actions.created.description',\n                        defaultMessage:\n                          '{hasCreatedByUser, select, true { by {createdBy}} other { by deleted user}}',\n                      },\n                      { createdBy: getCreatedByUser(), hasCreatedByUser }\n                    )}\n                  </Typography>\n                </ReleaseInfoWrapper>\n              </SimpleMenuButton>\n              <Button size=\"S\" variant=\"tertiary\" onClick={handleRefresh}>\n                {formatMessage({\n                  id: 'content-releases.header.actions.refresh',\n                  defaultMessage: 'Refresh',\n                })}\n              </Button>\n              {canPublish ? (\n                <Button\n                  size=\"S\"\n                  variant=\"default\"\n                  onClick={handlePublishRelease(release.id.toString())}\n                  loading={isPublishing}\n                  disabled={release.actions.meta.count === 0}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.publish',\n                    defaultMessage: 'Publish',\n                  })}\n                </Button>\n              ) : null}\n            </Flex>\n          )\n        }\n      />\n      {children}\n    </Main>\n  );\n};\n\nconst SimpleMenuButton = styled(SimpleMenu)`\n  & > span {\n    display: flex;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsBody\n * -----------------------------------------------------------------------------------------------*/\nconst GROUP_BY_OPTIONS = ['contentType', 'locale', 'action'] as const;\nconst GROUP_BY_OPTIONS_NO_LOCALE = ['contentType', 'action'] as const;\nconst getGroupByOptionLabel = (value: (typeof GROUP_BY_OPTIONS)[number]) => {\n  if (value === 'locale') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.locales',\n      defaultMessage: 'Locales',\n    };\n  }\n\n  if (value === 'action') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.actions',\n      defaultMessage: 'Actions',\n    };\n  }\n\n  return {\n    id: 'content-releases.pages.ReleaseDetails.groupBy.option.content-type',\n    defaultMessage: 'Content-Types',\n  };\n};\n\ninterface ReleaseDetailsBodyProps {\n  releaseId: string;\n}\n\nconst ReleaseDetailsBody = ({ releaseId }: ReleaseDetailsBodyProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<GetReleaseActionsQueryParams>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const {\n    data: releaseData,\n    isLoading: isReleaseLoading,\n    error: releaseError,\n  } = useGetReleaseQuery({ id: releaseId });\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(PERMISSIONS);\n  const runHookWaterfall = useStrapiApp('ReleaseDetailsPage', (state) => state.runHookWaterfall);\n\n  // TODO: Migrated displayedHeader to v5\n  const { displayedHeaders, hasI18nEnabled }: { displayedHeaders: any; hasI18nEnabled: boolean } =\n    runHookWaterfall('ContentReleases/pages/ReleaseDetails/add-locale-in-releases', {\n      displayedHeaders: [\n        {\n          label: {\n            id: 'content-releases.page.ReleaseDetails.table.header.label.name',\n            defaultMessage: 'name',\n          },\n          name: 'name',\n        },\n      ],\n      hasI18nEnabled: false,\n    });\n\n  const release = releaseData?.data;\n  const selectedGroupBy = query?.groupBy || 'contentType';\n\n  const {\n    isLoading,\n    isFetching,\n    isError,\n    data,\n    error: releaseActionsError,\n  } = useGetReleaseActionsQuery({\n    ...query,\n    releaseId,\n  });\n\n  const [updateReleaseAction] = useUpdateReleaseActionMutation();\n\n  const handleChangeType = async (\n    e: React.ChangeEvent<HTMLInputElement>,\n    actionId: ReleaseAction['id'],\n    actionPath: [string, number]\n  ) => {\n    const response = await updateReleaseAction({\n      params: {\n        releaseId,\n        actionId,\n      },\n      body: {\n        type: e.target.value as ReleaseAction['type'],\n      },\n      query, // We are passing the query params to make optimistic updates\n      actionPath, // We are passing the action path to found the position in the cache of the action for optimistic updates\n    });\n\n    if ('error' in response) {\n      if (isFetchError(response.error)) {\n        // When the response returns an object with 'error', handle fetch error\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        // Otherwise, the response returns an object with 'error', handle a generic error\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n        });\n      }\n    }\n  };\n\n  if (isLoading || isReleaseLoading) {\n    return <Page.Loading />;\n  }\n\n  const releaseActions = data?.data;\n  const releaseMeta = data?.meta;\n  const contentTypes = releaseMeta?.contentTypes || {};\n  const components = releaseMeta?.components || {};\n\n  if (isBaseQueryError(releaseError) || !release) {\n    const errorsArray = [];\n    if (releaseError && 'code' in releaseError) {\n      errorsArray.push({\n        code: releaseError.code,\n      });\n    }\n    if (releaseActionsError && 'code' in releaseActionsError) {\n      errorsArray.push({\n        code: releaseActionsError.code,\n      });\n    }\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: errorsArray,\n        }}\n      />\n    );\n  }\n\n  if (isError || !releaseActions) {\n    return <Page.Error />;\n  }\n\n  if (Object.keys(releaseActions).length === 0) {\n    return (\n      <Layouts.Content>\n        <EmptyStateLayout\n          action={\n            <LinkButton\n              tag={ReactRouterLink}\n              to={{\n                pathname: '/content-manager',\n              }}\n              style={{ textDecoration: 'none' }}\n              variant=\"secondary\"\n            >\n              {formatMessage({\n                id: 'content-releases.page.Details.button.openContentManager',\n                defaultMessage: 'Open the Content Manager',\n              })}\n            </LinkButton>\n          }\n          icon={<EmptyDocuments width=\"16rem\" />}\n          content={formatMessage({\n            id: 'content-releases.pages.Details.tab.emptyEntries',\n            defaultMessage:\n              'This release is empty. Open the Content Manager, select an entry and add it to the release.',\n          })}\n        />\n      </Layouts.Content>\n    );\n  }\n\n  const groupByLabel = formatMessage({\n    id: 'content-releases.pages.ReleaseDetails.groupBy.aria-label',\n    defaultMessage: 'Group by',\n  });\n  const headers = [\n    ...displayedHeaders,\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.content-type',\n        defaultMessage: 'content-type',\n      },\n      name: 'content-type',\n    },\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.action',\n        defaultMessage: 'action',\n      },\n      name: 'action',\n    },\n    ...(!release.releasedAt\n      ? [\n          {\n            label: {\n              id: 'content-releases.page.ReleaseDetails.table.header.label.status',\n              defaultMessage: 'status',\n            },\n            name: 'status',\n          },\n        ]\n      : []),\n  ];\n\n  const options = hasI18nEnabled ? GROUP_BY_OPTIONS : GROUP_BY_OPTIONS_NO_LOCALE;\n\n  return (\n    <Layouts.Content>\n      <Flex gap={8} direction=\"column\" alignItems=\"stretch\">\n        <Flex>\n          <SingleSelect\n            placeholder={groupByLabel}\n            aria-label={groupByLabel}\n            customizeContent={(value) =>\n              formatMessage(\n                {\n                  id: `content-releases.pages.ReleaseDetails.groupBy.label`,\n                  defaultMessage: `Group by {groupBy}`,\n                },\n                {\n                  groupBy: value,\n                }\n              )\n            }\n            value={formatMessage(getGroupByOptionLabel(selectedGroupBy))}\n            onChange={(value) => setQuery({ groupBy: value as ReleaseActionGroupBy })}\n          >\n            {options.map((option) => (\n              <SingleSelectOption key={option} value={option}>\n                {formatMessage(getGroupByOptionLabel(option))}\n              </SingleSelectOption>\n            ))}\n          </SingleSelect>\n        </Flex>\n        {Object.keys(releaseActions).map((key) => (\n          <Flex key={`releases-group-${key}`} gap={4} direction=\"column\" alignItems=\"stretch\">\n            <Flex role=\"separator\" aria-label={key}>\n              <Badge>{key}</Badge>\n            </Flex>\n            <Table.Root\n              rows={releaseActions[key].map((item) => ({\n                ...item,\n                id: Number(item.entry.id),\n              }))}\n              headers={headers}\n              isLoading={isLoading || isFetching}\n            >\n              <Table.Content>\n                <Table.Head>\n                  {headers.map(({ label, name }) => (\n                    <Table.HeaderCell key={name} label={formatMessage(label)} name={name} />\n                  ))}\n                </Table.Head>\n                <Table.Loading />\n                <Table.Body>\n                  {releaseActions[key].map(\n                    ({ id, contentType, locale, type, entry, status }, actionIndex) => (\n                      <Tr key={id}>\n                        <Td width=\"25%\" maxWidth=\"200px\">\n                          <Typography ellipsis>{`${\n                            contentType.mainFieldValue || entry.id\n                          }`}</Typography>\n                        </Td>\n                        {hasI18nEnabled && (\n                          <Td width=\"10%\">\n                            <Typography>{`${locale?.name ? locale.name : '-'}`}</Typography>\n                          </Td>\n                        )}\n\n                        <Td width=\"10%\">\n                          <Typography>{contentType.displayName || ''}</Typography>\n                        </Td>\n                        <Td width=\"20%\">\n                          {release.releasedAt ? (\n                            <Typography>\n                              {formatMessage(\n                                {\n                                  id: 'content-releases.page.ReleaseDetails.table.action-published',\n                                  defaultMessage:\n                                    'This entry was <b>{isPublish, select, true {published} other {unpublished}}</b>.',\n                                },\n                                {\n                                  isPublish: type === 'publish',\n                                  b: (children: React.ReactNode) => (\n                                    <Typography fontWeight=\"bold\">{children}</Typography>\n                                  ),\n                                }\n                              )}\n                            </Typography>\n                          ) : (\n                            <ReleaseActionOptions\n                              selected={type}\n                              handleChange={(e) => handleChangeType(e, id, [key, actionIndex])}\n                              name={`release-action-${id}-type`}\n                              disabled={!canUpdate}\n                            />\n                          )}\n                        </Td>\n                        {!release.releasedAt && (\n                          <>\n                            <Td width=\"20%\" minWidth=\"200px\">\n                              <EntryValidationPopover\n                                action={type}\n                                schema={contentTypes?.[contentType.uid]}\n                                entry={entry}\n                                status={status}\n                              />\n                            </Td>\n                            <Td>\n                              <Flex justifyContent=\"flex-end\">\n                                <ReleaseActionMenu.Root>\n                                  <ReleaseActionMenu.ReleaseActionEntryLinkItem\n                                    contentTypeUid={contentType.uid}\n                                    documentId={entry.documentId}\n                                    locale={locale?.code}\n                                  />\n                                  <ReleaseActionMenu.DeleteReleaseActionItem\n                                    releaseId={release.id}\n                                    actionId={id}\n                                  />\n                                </ReleaseActionMenu.Root>\n                              </Flex>\n                            </Td>\n                          </>\n                        )}\n                      </Tr>\n                    )\n                  )}\n                </Table.Body>\n              </Table.Content>\n            </Table.Root>\n          </Flex>\n        ))}\n        <Pagination.Root\n          {...releaseMeta?.pagination}\n          defaultPageSize={releaseMeta?.pagination?.pageSize}\n        >\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Flex>\n    </Layouts.Content>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsPage\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseDetailsPage = () => {\n  const { formatMessage } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\n  const [showWarningSubmit, setWarningSubmit] = React.useState(false);\n\n  const {\n    isLoading: isLoadingDetails,\n    data,\n    isSuccess: isSuccessDetails,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const { data: dataTimezone, isLoading: isLoadingTimezone } = useGetReleaseSettingsQuery();\n  const [updateRelease, { isLoading: isSubmittingForm }] = useUpdateReleaseMutation();\n  const [deleteRelease] = useDeleteReleaseMutation();\n\n  const toggleEditReleaseModal = () => {\n    setReleaseModalShown((prev) => !prev);\n  };\n\n  const getTimezoneValue = () => {\n    if (releaseData?.timezone) {\n      return releaseData.timezone;\n    } else {\n      if (dataTimezone?.data.defaultTimezone) {\n        return dataTimezone.data.defaultTimezone;\n      }\n      return null;\n    }\n  };\n\n  const toggleWarningSubmit = () => setWarningSubmit((prevState) => !prevState);\n\n  if (isLoadingDetails || isLoadingTimezone) {\n    return (\n      <ReleaseDetailsLayout\n        toggleEditReleaseModal={toggleEditReleaseModal}\n        toggleWarningSubmit={toggleWarningSubmit}\n      >\n        <Page.Loading />\n      </ReleaseDetailsLayout>\n    );\n  }\n\n  if (!releaseId) {\n    return <Navigate to=\"..\" />;\n  }\n\n  const releaseData = (isSuccessDetails && data?.data) || null;\n\n  const title = releaseData?.name || '';\n  const timezone = getTimezoneValue();\n  const scheduledAt =\n    releaseData?.scheduledAt && timezone ? utcToZonedTime(releaseData.scheduledAt, timezone) : null;\n  // Just get the date and time to display without considering updated timezone time\n  const date = scheduledAt ? format(scheduledAt, 'yyyy-MM-dd') : undefined;\n  const time = scheduledAt ? format(scheduledAt, 'HH:mm') : '';\n\n  const handleEditRelease = async (values: FormValues) => {\n    const response = await updateRelease({\n      id: releaseId,\n      name: values.name,\n      scheduledAt: values.scheduledAt,\n      timezone: values.timezone,\n    });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.modal.release-updated-notification-success',\n          defaultMessage: 'Release updated.',\n        }),\n      });\n      toggleEditReleaseModal();\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleDeleteRelease = async () => {\n    const response = await deleteRelease({\n      id: releaseId,\n    });\n\n    if ('data' in response) {\n      navigate('..');\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  return (\n    <ReleaseDetailsLayout\n      toggleEditReleaseModal={toggleEditReleaseModal}\n      toggleWarningSubmit={toggleWarningSubmit}\n    >\n      <ReleaseDetailsBody releaseId={releaseId} />\n      <ReleaseModal\n        open={releaseModalShown}\n        handleClose={toggleEditReleaseModal}\n        handleSubmit={handleEditRelease}\n        isLoading={isLoadingDetails || isSubmittingForm}\n        initialValues={{\n          name: title || '',\n          scheduledAt,\n          date,\n          time,\n          isScheduled: Boolean(scheduledAt),\n          timezone,\n        }}\n      />\n      <Dialog.Root open={showWarningSubmit} onOpenChange={toggleWarningSubmit}>\n        <ConfirmDialog onConfirm={handleDeleteRelease}>\n          {formatMessage({\n            id: 'content-releases.dialog.confirmation-message',\n            defaultMessage: 'Are you sure you want to delete this release?',\n          })}\n        </ConfirmDialog>\n      </Dialog.Root>\n    </ReleaseDetailsLayout>\n  );\n};\n\nexport { ReleaseDetailsPage };\n", "import { Page } from '@strapi/admin/strapi-admin';\nimport { Route, Routes } from 'react-router-dom';\n\nimport { PERMISSIONS } from '../constants';\n\nimport { ReleaseDetailsPage } from './ReleaseDetailsPage';\nimport { ReleasesPage } from './ReleasesPage';\n\nexport const App = () => {\n  return (\n    <Page.Protect permissions={PERMISSIONS.main}>\n      <Routes>\n        <Route index element={<ReleasesPage />} />\n        <Route path={':releaseId'} element={<ReleaseDetailsPage />} />\n      </Routes>\n    </Page.Protect>\n  );\n};\n"],
  "mappings": "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",
  "names": ["StyledPopoverFlex", "styled", "Flex", "theme", "colors", "neutral150", "ButtonContent", "CustomStatusButton", "children", "icon", "color", "_jsx", "Popover", "Trigger", "Button", "variant", "endIcon", "CaretDown", "_jsxs", "gap", "Typography", "textColor", "fontWeight", "EntryStatusTrigger", "action", "status", "hasErrors", "requiredStage", "entryStage", "formatMessage", "useIntl", "id", "CrossCircle", "defaultMessage", "CheckCircle", "ArrowsCounterClockwise", "FieldsValidation", "errors", "kind", "contentTypeUid", "documentId", "locale", "direction", "width", "padding", "fill", "Object", "keys", "length", "LinkButton", "tag", "Link", "to", "pathname", "search", "stringify", "plugins", "i18n", "fullWidth", "state", "forceValidation", "getReviewStageIcon", "contentTypeHasReviewWorkflow", "getReviewStageMessage", "stageName", "name", "ReviewStageValidation", "Icon", "EntryValidationPopover", "schema", "entry", "validate", "isLoading", "unstable_useDocument", "collectionType", "model", "uid", "skip", "hasReviewWorkflow", "stageRequiredToPublish", "strapi_stage", "Root", "Content", "useTypedDispatch", "useDispatch", "isBaseQueryError", "error", "name", "undefined", "ReleaseInfoWrapper", "styled", "Flex", "theme", "borderRadius", "colors", "neutral150", "ReleaseDetailsLayout", "toggleEditReleaseModal", "toggleWarningSubmit", "children", "formatMessage", "formatDate", "formatTime", "useIntl", "releaseId", "useParams", "data", "isLoading", "isLoadingDetails", "error", "useGetReleaseQuery", "id", "skip", "publishRelease", "isPublishing", "usePublishReleaseMutation", "toggleNotification", "useNotification", "formatAPIError", "useAPIErrorHandler", "allowedActions", "useRBAC", "PERMISSIONS", "canUpdate", "canDelete", "canPublish", "dispatch", "useTypedDispatch", "trackUsage", "useTracking", "release", "handlePublishRelease", "response", "type", "message", "defaultMessage", "totalEntries", "totalPublishedEntries", "totalUnpublishedEntries", "meta", "isFetchError", "handleRefresh", "releaseApi", "util", "invalidateTags", "getCreatedByUser", "createdBy", "username", "firstname", "lastname", "trim", "email", "_jsx", "Page", "Loading", "Navigate", "to", "state", "errors", "code", "actions", "count", "hasCreatedByUser", "Boolean", "isScheduled", "scheduledAt", "timezone", "numberOfEntriesText", "number", "scheduledText", "date", "Date", "weekday", "day", "month", "year", "timeZone", "time", "hourCycle", "offset", "getTimezoneOffset", "_jsxs", "Main", "aria-busy", "Layouts", "Header", "title", "name", "subtitle", "gap", "lineHeight", "Typography", "textColor", "variant", "Badge", "getBadgeProps", "status", "navigationAction", "BackButton", "fallback", "primaryAction", "releasedAt", "SimpleMenuButton", "label", "More", "endIcon", "paddingLeft", "paddingRight", "aria-label", "popoverPlacement", "Menu", "Item", "disabled", "onSelect", "startIcon", "Pencil", "Trash", "direction", "justifyContent", "alignItems", "padding", "fontWeight", "color", "RelativeTime", "timestamp", "createdAt", "Button", "size", "onClick", "toString", "loading", "SimpleMenu", "GROUP_BY_OPTIONS", "GROUP_BY_OPTIONS_NO_LOCALE", "getGroupByOptionLabel", "value", "ReleaseDetailsBody", "query", "setQuery", "useQueryParams", "releaseData", "isReleaseLoading", "releaseError", "runHookWaterfall", "useStrapiApp", "displayedHeaders", "hasI18nEnabled", "selectedGroupBy", "groupBy", "isFetching", "isError", "releaseActionsError", "useGetReleaseActionsQuery", "updateReleaseAction", "useUpdateReleaseActionMutation", "handleChangeType", "e", "actionId", "actionPath", "params", "body", "target", "releaseActions", "releaseMeta", "contentTypes", "components", "isBaseQueryError", "errorsArray", "push", "Error", "Object", "keys", "length", "Content", "EmptyStateLayout", "action", "LinkButton", "tag", "ReactRouterLink", "pathname", "style", "textDecoration", "icon", "EmptyDocuments", "width", "content", "groupByLabel", "headers", "options", "SingleSelect", "placeholder", "customizeContent", "onChange", "map", "option", "SingleSelectOption", "key", "role", "Table", "Root", "rows", "item", "Number", "entry", "Head", "HeaderCell", "Body", "contentType", "locale", "actionIndex", "Tr", "Td", "maxWidth", "ellipsis", "mainFieldValue", "displayName", "isPublish", "b", "ReleaseActionOptions", "selected", "handleChange", "_Fragment", "minWidth", "EntryValidationPopover", "schema", "uid", "ReleaseActionMenu", "ReleaseActionEntryLinkItem", "contentTypeUid", "documentId", "DeleteReleaseActionItem", "Pagination", "pagination", "defaultPageSize", "pageSize", "PageSize", "Links", "ReleaseDetailsPage", "navigate", "useNavigate", "releaseModalShown", "setReleaseModalShown", "useState", "showWarningSubmit", "setWarningSubmit", "isSuccess", "isSuccessDetails", "dataTimezone", "isLoadingTimezone", "useGetReleaseSettingsQuery", "updateRelease", "isSubmittingForm", "useUpdateReleaseMutation", "deleteRelease", "useDeleteReleaseMutation", "prev", "getTimezoneValue", "defaultTimezone", "prevState", "utcToZonedTime", "format", "undefined", "handleEditRelease", "values", "handleDeleteRelease", "ReleaseModal", "open", "handleClose", "handleSubmit", "initialValues", "Dialog", "onOpenChange", "ConfirmDialog", "onConfirm", "App", "_jsx", "Page", "Protect", "permissions", "PERMISSIONS", "main", "_jsxs", "Routes", "Route", "index", "element", "ReleasesPage", "path", "ReleaseDetailsPage"]
}
