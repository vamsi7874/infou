{
  "version": 3,
  "sources": ["../../../@strapi/admin/ee/admin/src/components/AuditLogs/Widgets.tsx"],
  "sourcesContent": ["import { useTracking, Widget } from '@strapi/admin/strapi-admin';\nimport { Box, IconButton, Table, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport { Eye } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { RelativeTime as BaseRelativeTime } from '../../../../../admin/src/components/RelativeTime';\nimport { useQueryParams } from '../../../../../admin/src/hooks/useQueryParams';\nimport { AuditLog } from '../../../../../shared/contracts/audit-logs';\nimport { AUDIT_LOGS_DEFAULT_PAGE_SIZE } from '../../constants';\nimport { getDefaultMessage } from '../../pages/SettingsPage/pages/AuditLogs/utils/getActionTypesDefaultMessages';\nimport { useGetAuditLogsQuery } from '../../services/auditLogs';\n\nconst RelativeTime = styled(BaseRelativeTime)`\n  display: inline-block;\n\n  &::first-letter {\n    text-transform: uppercase;\n  }\n`;\n\nconst LastActivityTable = ({ items }: { items: AuditLog[] }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n\n  const getAuditLogDetailsLink = (item: AuditLog): string => {\n    return `/settings/audit-logs?pageSize=${AUDIT_LOGS_DEFAULT_PAGE_SIZE}&page=1&sort=date:DESC&id=${item.id}`;\n  };\n\n  const handleRowClick = (document: AuditLog) => () => {\n    trackUsage('willOpenAuditLogDetailsFromHome');\n    const link = getAuditLogDetailsLink(document);\n    navigate(link);\n  };\n\n  return (\n    <Table colCount={4} rowCount={items?.length ?? 0}>\n      <Tbody>\n        {items?.map((item) => {\n          const action = formatMessage(\n            {\n              id: `Settings.permissions.auditLogs.${item.action}`,\n              // @ts-expect-error â€“ getDefaultMessage probably doesn't benefit from being so strongly typed unless we just add string at the end.\n              defaultMessage: getDefaultMessage(item.action),\n            },\n            { model: (item.payload.model as string) ?? '' }\n          );\n          const userDisplayName = item.user?.displayName ?? '-';\n          return (\n            <Tr\n              onClick={handleRowClick(item)}\n              cursor=\"pointer\"\n              key={`lastActivity_auditLog_${item.id}`}\n            >\n              <Td>\n                <Typography title={action} variant=\"omega\" textColor=\"neutral800\">\n                  {action}\n                </Typography>\n              </Td>\n              <Td>\n                <Typography variant=\"omega\" textColor=\"neutral800\">\n                  <RelativeTime timestamp={new Date(item.date)} />\n                </Typography>\n              </Td>\n              <Td>\n                <Typography title={userDisplayName} variant=\"omega\" textColor=\"neutral800\">\n                  {userDisplayName}\n                </Typography>\n              </Td>\n              <Td onClick={(e) => e.stopPropagation()}>\n                <Box display=\"inline-block\">\n                  <IconButton\n                    tag={Link}\n                    to={getAuditLogDetailsLink(item)}\n                    onClick={() => trackUsage('willOpenAuditLogDetailsFromHome')}\n                    label={formatMessage({\n                      id: 'global.details',\n                      defaultMessage: 'Details',\n                    })}\n                    variant=\"ghost\"\n                  >\n                    <Eye />\n                  </IconButton>\n                </Box>\n              </Td>\n            </Tr>\n          );\n        })}\n      </Tbody>\n    </Table>\n  );\n};\n\nconst AuditLogsWidget = () => {\n  const { formatMessage } = useIntl();\n  const [{ query }] = useQueryParams();\n  const { data, isLoading, error } = useGetAuditLogsQuery(\n    {\n      ...query,\n      page: 1,\n      pageSize: 4,\n      sort: 'date:DESC',\n    },\n    {\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data?.results) {\n    return <Widget.Error />;\n  }\n\n  if (data.results.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'widget.last-activity.no-activity',\n          defaultMessage: 'No activity',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <LastActivityTable items={data.results ?? []} />;\n};\n\nexport { AuditLogsWidget };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA,IAAMA,gBAAeC,GAAOC,YAAAA;;;;;;;AAQ5B,IAAMC,oBAAoB,CAAC,EAAEC,MAAK,MAAyB;AACzD,QAAM,EAAEC,cAAa,IAAKC,QAAAA;AAC1B,QAAM,EAAEC,WAAU,IAAKC,YAAAA;AACvB,QAAMC,WAAWC,YAAAA;AAEjB,QAAMC,yBAAyB,CAACC,SAAAA;AAC9B,WAAO,iCAAiCC,4BAAAA,6BAAyDD,KAAKE,EAAE;EAC1G;AAEA,QAAMC,iBAAiB,CAACC,aAAuB,MAAA;AAC7CT,eAAW,iCAAA;AACX,UAAMU,OAAON,uBAAuBK,QAAAA;AACpCP,aAASQ,IAAAA;EACX;AAEA,aACEC,wBAACC,OAAAA;IAAMC,UAAU;IAAGC,WAAUjB,+BAAOkB,WAAU;IAC7C,cAAAJ,wBAACK,OAAAA;MACEnB,UAAAA,+BAAOoB,IAAI,CAACZ,SAAAA;;AACX,cAAMa,SAASpB,cACb;UACES,IAAI,kCAAkCF,KAAKa,MAAM;;UAEjDC,gBAAgBC,kBAAkBf,KAAKa,MAAM;WAE/C;UAAEG,OAAO,KAAMC,QAAQD,SAAoB;QAAG,CAAA;AAEhD,cAAME,oBAAkBlB,UAAKmB,SAALnB,mBAAWoB,gBAAe;AAClD,mBACEC,yBAACC,IAAAA;UACCC,SAASpB,eAAeH,IAAAA;UACxBwB,QAAO;;gBAGPlB,wBAACmB,IAAAA;cACC,cAAAnB,wBAACoB,YAAAA;gBAAWC,OAAOd;gBAAQe,SAAQ;gBAAQC,WAAU;gBAClDhB,UAAAA;;;gBAGLP,wBAACmB,IAAAA;cACC,cAAAnB,wBAACoB,YAAAA;gBAAWE,SAAQ;gBAAQC,WAAU;gBACpC,cAAAvB,wBAAClB,eAAAA;kBAAa0C,WAAW,IAAIC,KAAK/B,KAAKgC,IAAI;;;;gBAG/C1B,wBAACmB,IAAAA;cACC,cAAAnB,wBAACoB,YAAAA;gBAAWC,OAAOT;gBAAiBU,SAAQ;gBAAQC,WAAU;gBAC3DX,UAAAA;;;gBAGLZ,wBAACmB,IAAAA;cAAGF,SAAS,CAACU,MAAMA,EAAEC,gBAAe;cACnC,cAAA5B,wBAAC6B,KAAAA;gBAAIC,SAAQ;gBACX,cAAA9B,wBAAC+B,YAAAA;kBACCC,KAAKC;kBACLC,IAAIzC,uBAAuBC,IAAAA;kBAC3BuB,SAAS,MAAM5B,WAAW,iCAAA;kBAC1B8C,OAAOhD,cAAc;oBACnBS,IAAI;oBACJY,gBAAgB;kBAClB,CAAA;kBACAc,SAAQ;kBAER,cAAAtB,wBAACoC,eAAAA,CAAAA,CAAAA;;;;;QA7BF,GAAA,yBAAyB1C,KAAKE,EAAE,EAAE;MAmC7C;;;AAIR;AAEA,IAAMyC,kBAAkB,MAAA;AACtB,QAAM,EAAElD,cAAa,IAAKC,QAAAA;AAC1B,QAAM,CAAC,EAAEkD,MAAK,CAAE,IAAIC,eAAAA;AACpB,QAAM,EAAEC,MAAMC,WAAWC,MAAK,IAAKC,qBACjC;IACE,GAAGL;IACHM,MAAM;IACNC,UAAU;IACVC,MAAM;KAER;IACEC,2BAA2B;EAC7B,CAAA;AAGF,MAAIN,WAAW;AACb,eAAOzC,wBAACgD,OAAOC,SAAO,CAAA,CAAA;EACxB;AAEA,MAAIP,SAAS,EAACF,6BAAMU,UAAS;AAC3B,eAAOlD,wBAACgD,OAAOG,OAAK,CAAA,CAAA;EACtB;AAEA,MAAIX,KAAKU,QAAQ9C,WAAW,GAAG;AAC7B,eACEJ,wBAACgD,OAAOI,QAAM;gBACXjE,cAAc;QACbS,IAAI;QACJY,gBAAgB;MAClB,CAAA;;EAGN;AAEA,aAAOR,wBAACf,mBAAAA;IAAkBC,OAAOsD,KAAKU,WAAW,CAAA;;AACnD;",
  "names": ["RelativeTime", "styled", "BaseRelativeTime", "LastActivityTable", "items", "formatMessage", "useIntl", "trackUsage", "useTracking", "navigate", "useNavigate", "getAuditLogDetailsLink", "item", "AUDIT_LOGS_DEFAULT_PAGE_SIZE", "id", "handleRowClick", "document", "link", "_jsx", "Table", "colCount", "rowCount", "length", "Tbody", "map", "action", "defaultMessage", "getDefaultMessage", "model", "payload", "userDisplayName", "user", "displayName", "_jsxs", "Tr", "onClick", "cursor", "Td", "Typography", "title", "variant", "textColor", "timestamp", "Date", "date", "e", "stopPropagation", "Box", "display", "IconButton", "tag", "Link", "to", "label", "Eye", "AuditLogsWidget", "query", "useQueryParams", "data", "isLoading", "error", "useGetAuditLogsQuery", "page", "pageSize", "sort", "refetchOnMountOrArgChange", "Widget", "Loading", "results", "Error", "NoData"]
}
