{
  "version": 3,
  "sources": ["../../../@strapi/plugin-users-permissions/admin/src/pages/AdvancedSettings/utils/layout.js", "../../../@strapi/plugin-users-permissions/admin/src/pages/AdvancedSettings/utils/schema.js", "../../../@strapi/plugin-users-permissions/admin/src/pages/AdvancedSettings/index.jsx"],
  "sourcesContent": ["import { getTrad } from '../../../utils';\n\nconst layout = [\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.email'),\n      defaultMessage: 'One account per email address',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.email'),\n      defaultMessage:\n        'Disallow the user to create multiple accounts using the same email address with different authentication providers.',\n    },\n    name: 'unique_email',\n    type: 'boolean',\n    size: 12,\n  },\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.sign-up'),\n      defaultMessage: 'Enable sign-ups',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.sign-up'),\n      defaultMessage:\n        'When disabled (OFF), the registration process is forbidden. No one can subscribe anymore no matter the used provider.',\n    },\n    name: 'allow_register',\n    type: 'boolean',\n    size: 12,\n  },\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.email-reset-password'),\n      defaultMessage: 'Reset password page',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.email-reset-password'),\n      defaultMessage: \"URL of your application's reset password page.\",\n    },\n    placeholder: {\n      id: getTrad('EditForm.inputToggle.placeholder.email-reset-password'),\n      defaultMessage: 'ex: https://youtfrontend.com/reset-password',\n    },\n    name: 'email_reset_password',\n    type: 'string',\n    size: 12,\n  },\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.email-confirmation'),\n      defaultMessage: 'Enable email confirmation',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.email-confirmation'),\n      defaultMessage: 'When enabled (ON), new registered users receive a confirmation email.',\n    },\n    name: 'email_confirmation',\n    type: 'boolean',\n    size: 12,\n  },\n  {\n    label: {\n      id: getTrad('EditForm.inputToggle.label.email-confirmation-redirection'),\n      defaultMessage: 'Redirection url',\n    },\n    hint: {\n      id: getTrad('EditForm.inputToggle.description.email-confirmation-redirection'),\n      defaultMessage: 'After you confirmed your email, choose where you will be redirected.',\n    },\n    placeholder: {\n      id: getTrad('EditForm.inputToggle.placeholder.email-confirmation-redirection'),\n      defaultMessage: 'ex: https://youtfrontend.com/email-confirmation',\n    },\n    name: 'email_confirmation_redirection',\n    type: 'string',\n    size: 12,\n  },\n];\n\nexport default layout;\n", "import { translatedErrors } from '@strapi/strapi/admin';\nimport * as yup from 'yup';\n\n// eslint-disable-next-line prefer-regex-literals\nconst URL_REGEX = new RegExp('(^$)|((.+:\\\\/\\\\/.*)(d*)\\\\/?(.*))');\n\nconst schema = yup.object().shape({\n  email_confirmation_redirection: yup.mixed().when('email_confirmation', {\n    is: true,\n    then: yup.string().matches(URL_REGEX).required(),\n    otherwise: yup.string().nullable(),\n  }),\n  email_reset_password: yup\n    .string(translatedErrors.string)\n    .matches(URL_REGEX, {\n      id: translatedErrors.regex.id,\n      defaultMessage: 'This is not a valid URL',\n    })\n    .nullable(),\n});\n\nexport default schema;\n", "import * as React from 'react';\n\nimport { Box, Button, Flex, Grid, Typography, useNotifyAT } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport {\n  useAPIErrorHandler,\n  Page,\n  Form,\n  InputRenderer,\n  useNotification,\n  useFetchClient,\n  useRBAC,\n  Layouts,\n} from '@strapi/strapi/admin';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery, useQueryClient } from 'react-query';\n\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport layout from './utils/layout';\nimport schema from './utils/schema';\n\nconst ProtectedAdvancedSettingsPage = () => (\n  <Page.Protect permissions={PERMISSIONS.readAdvancedSettings}>\n    <AdvancedSettingsPage />\n  </Page.Protect>\n);\n\nconst AdvancedSettingsPage = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { notifyStatus } = useNotifyAT();\n  const queryClient = useQueryClient();\n  const { get, put } = useFetchClient();\n  const { formatAPIError } = useAPIErrorHandler();\n\n  const {\n    isLoading: isLoadingForPermissions,\n    allowedActions: { canUpdate },\n  } = useRBAC({ update: PERMISSIONS.updateAdvancedSettings });\n\n  const { isLoading: isLoadingData, data } = useQuery(\n    ['users-permissions', 'advanced'],\n    async () => {\n      const { data } = await get('/users-permissions/advanced');\n\n      return data;\n    },\n    {\n      onSuccess() {\n        notifyStatus(\n          formatMessage({\n            id: getTrad('Form.advancedSettings.data.loaded'),\n            defaultMessage: 'Advanced settings data has been loaded',\n          })\n        );\n      },\n      onError() {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: getTrad('notification.error'),\n            defaultMessage: 'An error occured',\n          }),\n        });\n      },\n    }\n  );\n\n  const isLoading = isLoadingForPermissions || isLoadingData;\n\n  const submitMutation = useMutation((body) => put('/users-permissions/advanced', body), {\n    async onSuccess() {\n      await queryClient.invalidateQueries(['users-permissions', 'advanced']);\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: getTrad('notification.success.saved'),\n          defaultMessage: 'Saved',\n        }),\n      });\n    },\n    onError(error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    },\n    refetchActive: true,\n  });\n\n  const { isLoading: isSubmittingForm } = submitMutation;\n\n  const handleSubmit = async (body) => {\n    submitMutation.mutate({\n      ...body,\n      email_confirmation_redirection: body.email_confirmation\n        ? body.email_confirmation_redirection\n        : '',\n    });\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main aria-busy={isSubmittingForm}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: getTrad('HeaderNav.link.advancedSettings'),\n              defaultMessage: 'Advanced Settings',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Form onSubmit={handleSubmit} initialValues={data.settings} validationSchema={schema}>\n        {({ values, isSubmitting, modified }) => {\n          return (\n            <>\n              <Layouts.Header\n                title={formatMessage({\n                  id: getTrad('HeaderNav.link.advancedSettings'),\n                  defaultMessage: 'Advanced Settings',\n                })}\n                primaryAction={\n                  <Button\n                    loading={isSubmitting}\n                    type=\"submit\"\n                    disabled={!modified || !canUpdate}\n                    startIcon={<Check />}\n                    size=\"S\"\n                  >\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                  </Button>\n                }\n              />\n              <Layouts.Content>\n                <Box\n                  background=\"neutral0\"\n                  hasRadius\n                  shadow=\"filterShadow\"\n                  paddingTop={6}\n                  paddingBottom={6}\n                  paddingLeft={7}\n                  paddingRight={7}\n                >\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                    <Typography variant=\"delta\" tag=\"h2\">\n                      {formatMessage({\n                        id: 'global.settings',\n                        defaultMessage: 'Settings',\n                      })}\n                    </Typography>\n                    <Grid.Root gap={6}>\n                      {[\n                        {\n                          label: {\n                            id: getTrad('EditForm.inputSelect.label.role'),\n                            defaultMessage: 'Default role for authenticated users',\n                          },\n                          hint: {\n                            id: getTrad('EditForm.inputSelect.description.role'),\n                            defaultMessage:\n                              'It will attach the new authenticated user to the selected role.',\n                          },\n                          options: data.roles.map((role) => ({\n                            label: role.name,\n                            value: role.type,\n                          })),\n                          name: 'default_role',\n                          size: 6,\n                          type: 'enumeration',\n                        },\n                        ...layout,\n                      ].map(({ size, ...field }) => (\n                        <Grid.Item\n                          key={field.name}\n                          col={size}\n                          direction=\"column\"\n                          alignItems=\"stretch\"\n                        >\n                          <InputRenderer\n                            {...field}\n                            disabled={\n                              field.name === 'email_confirmation_redirection' &&\n                              values.email_confirmation === false\n                            }\n                            label={formatMessage(field.label)}\n                            hint={field.hint ? formatMessage(field.hint) : undefined}\n                            placeholder={\n                              field.placeholder ? formatMessage(field.placeholder) : undefined\n                            }\n                          />\n                        </Grid.Item>\n                      ))}\n                    </Grid.Root>\n                  </Flex>\n                </Box>\n              </Layouts.Content>\n            </>\n          );\n        }}\n      </Form>\n    </Page.Main>\n  );\n};\n\nexport { ProtectedAdvancedSettingsPage, AdvancedSettingsPage };\n"],
  "mappings": "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",
  "names": ["layout", "label", "id", "getTrad", "defaultMessage", "hint", "name", "type", "size", "placeholder", "URL_REGEX", "RegExp", "schema", "object", "shape", "email_confirmation_redirection", "mixed", "when", "is", "then", "string", "matches", "required", "otherwise", "nullable", "email_reset_password", "translatedErrors", "id", "regex", "defaultMessage", "ProtectedAdvancedSettingsPage", "_jsx", "Page", "Protect", "permissions", "PERMISSIONS", "readAdvancedSettings", "AdvancedSettingsPage", "formatMessage", "useIntl", "toggleNotification", "useNotification", "notifyStatus", "useNotifyAT", "queryClient", "useQueryClient", "get", "put", "useFetchClient", "formatAPIError", "useAPIErrorHandler", "isLoading", "isLoadingForPermissions", "allowedActions", "canUpdate", "useRBAC", "update", "updateAdvancedSettings", "isLoadingData", "data", "useQuery", "onSuccess", "id", "getTrad", "defaultMessage", "onError", "type", "message", "submitMutation", "useMutation", "body", "invalidateQueries", "error", "refetchActive", "isSubmittingForm", "handleSubmit", "mutate", "email_confirmation_redirection", "email_confirmation", "Loading", "_jsxs", "Main", "aria-busy", "Title", "name", "Form", "onSubmit", "initialValues", "settings", "validationSchema", "schema", "values", "isSubmitting", "modified", "_Fragment", "Layouts", "Header", "title", "primaryAction", "Button", "loading", "disabled", "startIcon", "Check", "size", "Content", "Box", "background", "hasRadius", "shadow", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "Flex", "direction", "alignItems", "gap", "Typography", "variant", "tag", "Grid", "Root", "label", "hint", "options", "roles", "map", "role", "value", "layout", "field", "Item", "col", "InputRenderer", "undefined", "placeholder"]
}
