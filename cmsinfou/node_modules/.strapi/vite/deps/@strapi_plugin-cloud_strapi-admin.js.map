{
  "version": 3,
  "sources": ["../../../@strapi/plugin-cloud/admin/src/components/Initializer.tsx", "../../../@strapi/plugin-cloud/admin/src/utils/prefixPluginTranslations.ts", "../../../@strapi/plugin-cloud/admin/src/index.ts"],
  "sourcesContent": ["/**\n *\n * Initializer\n *\n */\n\nimport { useEffect, useRef } from 'react';\n\nimport { pluginId } from '../pluginId';\n\ntype InitializerProps = {\n  setPlugin: (id: string) => void;\n};\n\nconst Initializer = ({ setPlugin }: InitializerProps) => {\n  const ref = useRef(setPlugin);\n\n  useEffect(() => {\n    ref.current(pluginId);\n  }, []);\n\n  return null;\n};\n\nexport { Initializer };\n", "type TradOptions = Record<string, string>;\n\nconst prefixPluginTranslations = (trad: TradOptions, pluginId: string): TradOptions => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {} as TradOptions);\n};\n\nexport { prefixPluginTranslations };\n", "/* eslint-disable check-file/filename-naming-convention */\n\nimport { Cloud } from '@strapi/icons';\n\nimport { Initializer } from './components/Initializer';\nimport { pluginId } from './pluginId';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\n\nconst pluginName = 'Deploy';\n\n// eslint-disable-next-line import/no-default-export\nexport default {\n  register(app: any) {\n    const { backendURL } = window.strapi;\n\n    // Only add the plugin menu link and registering it if the project is on development (localhost).\n    if (backendURL?.includes('localhost')) {\n      app.addMenuLink({\n        to: `plugins/${pluginId}`,\n        icon: Cloud,\n        intlLabel: {\n          id: `${pluginId}.Plugin.name`,\n          defaultMessage: pluginName,\n        },\n        Component: async () => {\n          const { App } = await import('./pages/App');\n\n          return App;\n        },\n      });\n      const plugin = {\n        id: pluginId,\n        initializer: Initializer,\n        isReady: false,\n        name: pluginName,\n      };\n\n      app.registerPlugin(plugin);\n    }\n  },\n\n  async registerTrads(app: any) {\n    const { locales } = app;\n\n    const importedTrads = await Promise.all(\n      (locales as any[]).map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAcA,IAAMA,cAAc,CAAC,EAAEC,UAAS,MAAoB;AAClD,QAAMC,UAAMC,qBAAOF,SAAAA;AAEnBG,8BAAU,MAAA;AACRF,QAAIG,QAAQC,QAAAA;EACd,GAAG,CAAA,CAAE;AAEL,SAAO;AACT;;;ACpBMC,IAAAA,2BAA2B,CAACC,MAAmBC,cAAAA;AAInD,SAAOC,OAAOC,KAAKH,IAAAA,EAAMI,OAAO,CAACC,KAAKC,YAAAA;AACpCD,QAAI,GAAGJ,SAAAA,IAAYK,OAAQ,EAAC,IAAIN,KAAKM,OAAQ;AAC7C,WAAOD;EACT,GAAG,CAAA,CAAC;AACN;;;;;;;;;;;;;;;;;;;;;;;;;ACFA,IAAME,aAAa;AAGnB,IAAA,QAAe;EACbC,SAASC,KAAQ;AACf,UAAM,EAAEC,WAAU,IAAKC,OAAOC;AAG9B,QAAIF,yCAAYG,SAAS,cAAc;AACrCJ,UAAIK,YAAY;QACdC,IAAI,WAAWC,QAAAA;QACfC,MAAMC;QACNC,WAAW;UACTC,IAAI,GAAGJ,QAAS;UAChBK,gBAAgBd;QAClB;QACAe,WAAW,YAAA;AACT,gBAAM,EAAEC,IAAG,IAAK,MAAM,OAAO,mBAAA;AAE7B,iBAAOA;QACT;MACF,CAAA;AACA,YAAMC,SAAS;QACbJ,IAAIJ;QACJS,aAAaC;QACbC,SAAS;QACTC,MAAMrB;MACR;AAEAE,UAAIoB,eAAeL,MAAAA;IACrB;EACF;EAEA,MAAMM,cAAcrB,KAAQ;AAC1B,UAAM,EAAEsB,QAAO,IAAKtB;AAEpB,UAAMuB,gBAAgB,MAAMC,QAAQC,IAClC,QAAmBC,IAAI,CAACC,WAAAA;AACtB,aAAO,kCAAO,kBAAkBA,MAAO,OAAM,EAC1CC,KAAK,CAAC,EAAEC,SAASC,KAAI,MAAE;AACtB,eAAO;UACLA,MAAMC,yBAAyBD,MAAMvB,QAAAA;UACrCoB;QACF;MACF,CAAA,EACCK,MAAM,MAAA;AACL,eAAO;UACLF,MAAM,CAAA;UACNH;QACF;MACF,CAAA;IACJ,CAAA,CAAA;AAGF,WAAOH,QAAQS,QAAQV,aAAAA;EACzB;AACF;",
  "names": ["Initializer", "setPlugin", "ref", "useRef", "useEffect", "current", "pluginId", "prefixPluginTranslations", "trad", "pluginId", "Object", "keys", "reduce", "acc", "current", "pluginName", "register", "app", "backendURL", "window", "strapi", "includes", "addMenuLink", "to", "pluginId", "icon", "Cloud", "intlLabel", "id", "defaultMessage", "Component", "App", "plugin", "initializer", "Initializer", "isReady", "name", "registerPlugin", "registerTrads", "locales", "importedTrads", "Promise", "all", "map", "locale", "then", "default", "data", "prefixPluginTranslations", "catch", "resolve"]
}
