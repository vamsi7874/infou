{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/pages/EditView/components/DocumentStatus.tsx", "../../../@strapi/content-manager/admin/src/components/RelativeTime.tsx"],
  "sourcesContent": ["import { Status, StatusProps, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { capitalise } from '../../../utils/strings';\n\ninterface DocumentStatusProps extends Omit<StatusProps, 'children' | 'variant'> {\n  /**\n   * The status of the document (draft, published, etc.)\n   * @default 'draft'\n   */\n  status?: string;\n}\n\n/**\n * @public\n * @description Displays the status of a document (draft, published, etc.)\n * and automatically calculates the appropriate variant for the status.\n */\nconst DocumentStatus = ({ status = 'draft', size = 'S', ...restProps }: DocumentStatusProps) => {\n  const statusVariant =\n    status === 'draft' ? 'secondary' : status === 'published' ? 'success' : 'alternative';\n\n  const { formatMessage } = useIntl();\n\n  return (\n    <Status {...restProps} size={size} variant={statusVariant} role=\"status\" aria-label={status}>\n      <Typography tag=\"span\" variant=\"omega\" fontWeight=\"bold\">\n        {formatMessage({\n          id: `content-manager.containers.List.${status}`,\n          defaultMessage: capitalise(status),\n        })}\n      </Typography>\n    </Status>\n  );\n};\n\nexport { DocumentStatus };\nexport type { DocumentStatusProps };\n", "import * as React from 'react';\n\nimport { Duration, intervalToDuration, isPast } from 'date-fns';\nimport { useIntl } from 'react-intl';\n\nconst intervals: Array<keyof Duration> = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'];\n\ninterface CustomInterval {\n  unit: keyof Duration;\n  text: string;\n  threshold: number;\n}\n\ninterface RelativeTimeProps extends React.ComponentPropsWithoutRef<'time'> {\n  timestamp: Date;\n  customIntervals?: CustomInterval[];\n}\n\n/**\n * Displays the relative time between a given timestamp and the current time.\n * You can display a custom message for given time intervals by passing an array of custom intervals.\n *\n * @example\n * ```jsx\n * <caption>Display \"last hour\" if the timestamp is less than an hour ago</caption>\n * <RelativeTime\n *  timestamp={new Date('2021-01-01')}\n *  customIntervals={[\n *   { unit: 'hours', threshold: 1, text: 'last hour' },\n *  ]}\n * ```\n */\nconst RelativeTime = React.forwardRef<HTMLTimeElement, RelativeTimeProps>(\n  ({ timestamp, customIntervals = [], ...restProps }, forwardedRef) => {\n    const { formatRelativeTime, formatDate, formatTime } = useIntl();\n\n    /**\n     * TODO: make this auto-update, like a clock.\n     */\n    const interval = intervalToDuration({\n      start: timestamp,\n      end: Date.now(),\n      // see https://github.com/date-fns/date-fns/issues/2891 â€“ No idea why it's all partial it returns it every time.\n    }) as Required<Duration>;\n\n    const unit =\n      intervals.find((intervalUnit) => {\n        return interval[intervalUnit] > 0 && Object.keys(interval).includes(intervalUnit);\n      }) ?? 'seconds';\n\n    const relativeTime = isPast(timestamp) ? -interval[unit] : interval[unit];\n\n    // Display custom text if interval is less than the threshold\n    const customInterval = customIntervals.find(\n      (custom) => interval[custom.unit] < custom.threshold\n    );\n\n    const displayText = customInterval\n      ? customInterval.text\n      : formatRelativeTime(relativeTime, unit, { numeric: 'auto' });\n\n    return (\n      <time\n        ref={forwardedRef}\n        dateTime={timestamp.toISOString()}\n        role=\"time\"\n        title={`${formatDate(timestamp)} ${formatTime(timestamp)}`}\n        {...restProps}\n      >\n        {displayText}\n      </time>\n    );\n  }\n);\n\nexport { RelativeTime };\nexport type { CustomInterval, RelativeTimeProps };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAkBA,IAAMA,iBAAiB,CAAC,EAAEC,SAAS,SAASC,OAAO,KAAK,GAAGC,UAAgC,MAAA;AACzF,QAAMC,gBACJH,WAAW,UAAU,cAAcA,WAAW,cAAc,YAAY;AAE1E,QAAM,EAAEI,cAAa,IAAKC,QAAAA;AAE1B,aACEC,wBAACC,QAAAA;IAAQ,GAAGL;IAAWD;IAAYO,SAASL;IAAeM,MAAK;IAASC,cAAYV;IACnF,cAAAM,wBAACK,YAAAA;MAAWC,KAAI;MAAOJ,SAAQ;MAAQK,YAAW;gBAC/CT,cAAc;QACbU,IAAI,mCAAmCd,MAAAA;QACvCe,gBAAgBC,WAAWhB,MAAAA;MAC7B,CAAA;;;AAIR;;;;;AC7BA,IAAMiB,YAAmC;EAAC;EAAS;EAAU;EAAQ;EAAS;EAAW;AAAU;AA2B7FC,IAAAA,eAAqBC,iBACzB,CAAC,EAAEC,WAAWC,kBAAkB,CAAA,GAAI,GAAGC,UAAAA,GAAaC,iBAAAA;AAClD,QAAM,EAAEC,oBAAoBC,YAAYC,WAAU,IAAKC,QAAAA;AAKvD,QAAMC,WAAWC,mBAAmB;IAClCC,OAAOV;IACPW,KAAKC,KAAKC,IAAG;EAEf,CAAA;AAEA,QAAMC,OACJjB,UAAUkB,KAAK,CAACC,iBAAAA;AACd,WAAOR,SAASQ,YAAAA,IAAgB,KAAKC,OAAOC,KAAKV,QAAUW,EAAAA,SAASH,YAAAA;GAChE,KAAA;AAER,QAAMI,eAAeC,OAAOrB,SAAAA,IAAa,CAACQ,SAASM,IAAK,IAAGN,SAASM,IAAK;AAGzE,QAAMQ,iBAAiBrB,gBAAgBc,KACrC,CAACQ,WAAWf,SAASe,OAAOT,IAAI,IAAIS,OAAOC,SAAS;AAGtD,QAAMC,cAAcH,iBAChBA,eAAeI,OACftB,mBAAmBgB,cAAcN,MAAM;IAAEa,SAAS;EAAO,CAAA;AAE7D,aACEC,yBAACC,QAAAA;IACCC,KAAK3B;IACL4B,UAAU/B,UAAUgC,YAAW;IAC/BC,MAAK;IACLC,OAAO,GAAG7B,WAAWL,SAAAA,CAAAA,IAAcM,WAAWN,SAAAA,CAAAA;IAC7C,GAAGE;IAEHuB,UAAAA;;AAGP,CAAA;",
  "names": ["DocumentStatus", "status", "size", "restProps", "statusVariant", "formatMessage", "useIntl", "_jsx", "Status", "variant", "role", "aria-label", "Typography", "tag", "fontWeight", "id", "defaultMessage", "capitalise", "intervals", "RelativeTime", "forwardRef", "timestamp", "customIntervals", "restProps", "forwardedRef", "formatRelativeTime", "formatDate", "formatTime", "useIntl", "interval", "intervalToDuration", "start", "end", "Date", "now", "unit", "find", "intervalUnit", "Object", "keys", "includes", "relativeTime", "isPast", "customInterval", "custom", "threshold", "displayText", "text", "numeric", "_jsx", "time", "ref", "dateTime", "toISOString", "role", "title"]
}
