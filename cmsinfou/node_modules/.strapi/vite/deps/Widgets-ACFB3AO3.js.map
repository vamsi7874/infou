{
  "version": 3,
  "sources": ["../../../@strapi/content-releases/admin/src/services/homepage.ts", "../../../@strapi/content-releases/admin/src/components/Widgets.tsx"],
  "sourcesContent": ["import { adminApi } from '@strapi/admin/strapi-admin';\n\nimport * as Homepage from '../../../shared/contracts/homepage';\n\nimport type { Contracts } from '@strapi/content-manager/_internal/shared';\n\ntype ContentType = Contracts.ContentTypes.ContentType;\ninterface ContentTypes {\n  collectionType: ContentType[];\n  singleType: ContentType[];\n}\n\nconst contentManagerApi = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['UpcomingReleasesList'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      getUpcomingReleases: builder.query<Homepage.GetUpcomingReleases.Response['data'], void>({\n        query: () => '/content-releases/homepage/upcoming-releases',\n        transformResponse: (response: Homepage.GetUpcomingReleases.Response) => response.data,\n        providesTags: (_, _err) => ['UpcomingReleasesList'],\n      }),\n    }),\n    overrideExisting: true,\n  });\n\nconst { useGetUpcomingReleasesQuery } = contentManagerApi;\n\nexport { useGetUpcomingReleasesQuery };\nexport type { ContentTypes, ContentType };\n", "import { useTracking, Widget } from '@strapi/admin/strapi-admin';\nimport { Badge, Box, IconButton, Table, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport { Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { Release } from '../../../shared/contracts/releases';\nimport { getBadgeProps } from '../pages/ReleasesPage';\nimport { useGetUpcomingReleasesQuery } from '../services/homepage';\n\nimport { RelativeTime } from './RelativeTime';\n\nconst CellTypography = styled(Typography)`\n  display: block;\n  max-width: 14.4rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst ReleasesTable = ({ items }: { items: Release[] }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n\n  const getEditViewLink = (item: Release): string => {\n    return `/plugins/content-releases/${item.id}`;\n  };\n\n  const handleRowClick = (item: Release) => () => {\n    trackUsage('willEditReleaseFromHome');\n    const link = getEditViewLink(item);\n    navigate(link);\n  };\n\n  return (\n    <Table colCount={4} rowCount={items?.length ?? 0}>\n      <Tbody>\n        {items?.map((item) => (\n          <Tr onClick={handleRowClick(item)} cursor=\"pointer\" key={item.documentId}>\n            <Td>\n              <CellTypography title={item.name} variant=\"omega\" textColor=\"neutral800\">\n                {item.name}\n              </CellTypography>\n            </Td>\n            <Td>\n              <Box display=\"inline-block\">\n                {item.status ? (\n                  <Badge {...getBadgeProps(item.status)}>{item.status}</Badge>\n                ) : (\n                  <Typography textColor=\"neutral600\" aria-hidden>\n                    -\n                  </Typography>\n                )}\n              </Box>\n            </Td>\n            <Td>\n              <Typography variant=\"omega\" textTransform=\"capitalize\" textColor=\"neutral600\">\n                {item.scheduledAt ? (\n                  <RelativeTime timestamp={new Date(item.scheduledAt)} />\n                ) : (\n                  formatMessage({\n                    id: 'content-releases.pages.Releases.not-scheduled',\n                    defaultMessage: 'Not scheduled',\n                  })\n                )}\n              </Typography>\n            </Td>\n            <Td onClick={(e) => e.stopPropagation()}>\n              <Box display=\"inline-block\">\n                <IconButton\n                  tag={Link}\n                  to={getEditViewLink(item)}\n                  onClick={() => trackUsage('willEditReleaseFromHome')}\n                  label={formatMessage({\n                    id: 'content-manager.actions.edit.label',\n                    defaultMessage: 'Edit',\n                  })}\n                  variant=\"ghost\"\n                >\n                  <Pencil />\n                </IconButton>\n              </Box>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Upcoming Releases\n * -----------------------------------------------------------------------------------------------*/\n\nconst UpcomingReleasesWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetUpcomingReleasesQuery();\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-releases.widget.upcoming-releases.no-data',\n          defaultMessage: 'No releases',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <ReleasesTable items={data} />;\n};\n\nexport { UpcomingReleasesWidget };\n"],
  "mappings": "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",
  "names": ["contentManagerApi", "adminApi", "enhanceEndpoints", "addTagTypes", "injectEndpoints", "endpoints", "builder", "getUpcomingReleases", "query", "transformResponse", "response", "data", "providesTags", "_", "_err", "overrideExisting", "useGetUpcomingReleasesQuery", "CellTypography", "styled", "Typography", "ReleasesTable", "items", "formatMessage", "useIntl", "trackUsage", "useTracking", "navigate", "useNavigate", "getEditViewLink", "item", "id", "handleRowClick", "link", "_jsx", "Table", "colCount", "rowCount", "length", "Tbody", "map", "_jsxs", "Tr", "onClick", "cursor", "Td", "title", "name", "variant", "textColor", "Box", "display", "status", "Badge", "getBadgeProps", "aria-hidden", "textTransform", "scheduledAt", "RelativeTime", "timestamp", "Date", "defaultMessage", "e", "stopPropagation", "IconButton", "tag", "Link", "to", "label", "Pencil", "documentId", "UpcomingReleasesWidget", "data", "isLoading", "error", "useGetUpcomingReleasesQuery", "Widget", "Loading", "Error", "NoData"]
}
