{
  "version": 3,
  "sources": ["../../../@strapi/content-manager/admin/src/services/homepage.ts", "../../../@strapi/content-manager/admin/src/components/Widgets.tsx"],
  "sourcesContent": ["import * as Homepage from '../../../shared/contracts/homepage';\n\nimport { contentManagerApi } from './api';\n\nconst homepageService = contentManagerApi\n  .enhanceEndpoints({\n    addTagTypes: ['RecentDocumentList'],\n  })\n  .injectEndpoints({\n    /**\n     * TODO: Remove overrideExisting when we remove the future flag\n     * and delete the old homepage service in the admin\n     */\n    overrideExisting: true,\n    endpoints: (builder) => ({\n      getRecentDocuments: builder.query<\n        Homepage.GetRecentDocuments.Response['data'],\n        Homepage.GetRecentDocuments.Request['query']\n      >({\n        query: (params) => `/content-manager/homepage/recent-documents?action=${params.action}`,\n        transformResponse: (response: Homepage.GetRecentDocuments.Response) => response.data,\n        providesTags: (res, _err, { action }) => [\n          { type: 'RecentDocumentList' as const, id: action },\n        ],\n      }),\n    }),\n  });\n\nconst { useGetRecentDocumentsQuery } = homepageService;\n\nexport { useGetRecentDocumentsQuery };\n", "import * as React from 'react';\n\nimport { Widget, useTracking, useGetCountDocumentsQuery } from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Flex,\n  IconButton,\n  Table,\n  Tbody,\n  Td,\n  Tr,\n  Typography,\n  Portal,\n} from '@strapi/design-system';\nimport { Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { styled, DefaultTheme } from 'styled-components';\n\nimport { DocumentStatus } from '../pages/EditView/components/DocumentStatus';\nimport { useGetRecentDocumentsQuery } from '../services/homepage';\n\nimport { RelativeTime } from './RelativeTime';\n\nimport type { RecentDocument } from '../../../shared/contracts/homepage';\n\nconst CellTypography = styled(Typography)`\n  display: block;\n  max-width: 14.4rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst RecentDocumentsTable = ({\n  documents,\n  type,\n}: {\n  documents: RecentDocument[];\n  type: 'edited' | 'published';\n}) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n\n  const getEditViewLink = (document: RecentDocument): string => {\n    const isSingleType = document.kind === 'singleType';\n    const kindPath = isSingleType ? 'single-types' : 'collection-types';\n    const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : '';\n\n    return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? '' : '/' + document.documentId}${queryParams}`;\n  };\n\n  const handleRowClick = (document: RecentDocument) => () => {\n    trackUsage('willEditEntryFromHome', {\n      entryType: type,\n    });\n    const link = getEditViewLink(document);\n    navigate(link);\n  };\n\n  return (\n    <Table colCount={5} rowCount={documents?.length ?? 0}>\n      <Tbody>\n        {documents?.map((document) => (\n          <Tr onClick={handleRowClick(document)} cursor=\"pointer\" key={document.documentId}>\n            <Td>\n              <CellTypography title={document.title} variant=\"omega\" textColor=\"neutral800\">\n                {document.title}\n              </CellTypography>\n            </Td>\n            <Td>\n              <CellTypography variant=\"omega\" textColor=\"neutral600\">\n                {document.kind === 'singleType'\n                  ? formatMessage({\n                      id: 'content-manager.widget.last-edited.single-type',\n                      defaultMessage: 'Single-Type',\n                    })\n                  : formatMessage({\n                      id: document.contentTypeDisplayName,\n                      defaultMessage: document.contentTypeDisplayName,\n                    })}\n              </CellTypography>\n            </Td>\n            <Td>\n              <Box display=\"inline-block\">\n                {document.status ? (\n                  <DocumentStatus status={document.status} />\n                ) : (\n                  <Typography textColor=\"neutral600\" aria-hidden>\n                    -\n                  </Typography>\n                )}\n              </Box>\n            </Td>\n            <Td>\n              <Typography textColor=\"neutral600\">\n                <RelativeTime timestamp={new Date(document.updatedAt)} />\n              </Typography>\n            </Td>\n            <Td onClick={(e) => e.stopPropagation()}>\n              <Box display=\"inline-block\">\n                <IconButton\n                  tag={Link}\n                  to={getEditViewLink(document)}\n                  onClick={() => trackUsage('willEditEntryFromHome', { type })}\n                  label={formatMessage({\n                    id: 'content-manager.actions.edit.label',\n                    defaultMessage: 'Edit',\n                  })}\n                  variant=\"ghost\"\n                >\n                  <Pencil />\n                </IconButton>\n              </Box>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastEditedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastEditedWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'update' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-edited.no-data',\n          defaultMessage: 'No edited entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} type=\"edited\" />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * LastPublishedWidget\n * -----------------------------------------------------------------------------------------------*/\n\nconst LastPublishedWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetRecentDocumentsQuery({ action: 'publish' });\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-published.no-data',\n          defaultMessage: 'No published entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <RecentDocumentsTable documents={data} type=\"published\" />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ChartEntriesWidget\n * -----------------------------------------------------------------------------------------------*/\nconst RADIUS = 80;\nconst STROKE = 10;\nconst CIRCUMFERENCE = 2 * Math.PI * (RADIUS - STROKE / 2);\n\ntype ThemeColor = keyof DefaultTheme['colors'];\n\nconst ArcChart = styled.circle<{ $arcColor: ThemeColor }>`\n  stroke: ${({ theme, $arcColor }) => theme.colors[$arcColor]};\n`;\n\nconst TextChart = styled.tspan<{ $textColor: ThemeColor }>`\n  text-transform: lowercase;\n  fill: ${({ theme, $textColor }) => theme.colors[$textColor]};\n`;\n\nconst KeyChartItem = styled(Flex)`\n  width: 100%;\n\n  ${({ theme }) => theme.breakpoints.small} {\n    width: auto;\n  }\n`;\n\ninterface ChartData {\n  label: string;\n  count: number;\n  color: ThemeColor;\n}\n\nconst DonutChartSVG = ({ data }: { data: ChartData[] }) => {\n  const { locale } = useIntl();\n  const { formatMessage } = useIntl();\n  const total = data.reduce((acc, curr) => acc + curr.count, 0);\n  const [tooltip, setTooltip] = React.useState<{\n    visible: boolean;\n    x: number;\n    y: number;\n    value: ChartData | null;\n    isTouch?: boolean;\n  }>({ visible: false, x: 0, y: 0, value: null });\n\n  let cumulativePercent = 0;\n\n  const handleMouseOver = (e: React.MouseEvent<SVGCircleElement>, value: ChartData) => {\n    setTooltip({\n      visible: true,\n      x: e.clientX,\n      y: e.clientY,\n      value,\n    });\n  };\n  const handleMouseOut = () => {\n    setTooltip((t) => ({ ...t, visible: false }));\n  };\n\n  const handleFocus = (e: React.FocusEvent<SVGCircleElement>, value: ChartData) => {\n    setTooltip({\n      visible: true,\n      x:\n        e.currentTarget.getBoundingClientRect().width / 2 +\n        e.currentTarget.getBoundingClientRect().left,\n      y:\n        e.currentTarget.getBoundingClientRect().height +\n        e.currentTarget.getBoundingClientRect().top,\n      value,\n    });\n  };\n\n  return (\n    <Flex direction=\"column\" gap={6} margin=\"auto\">\n      <svg\n        width={RADIUS * 2}\n        height={RADIUS * 2}\n        viewBox={`0 0 ${RADIUS * 2} ${RADIUS * 2}`}\n        style={{ position: 'relative', zIndex: 1 }}\n      >\n        <g transform={`rotate(-90 ${RADIUS} ${RADIUS})`}>\n          {data.map((value) => {\n            const percent = (value.count / total) * 100;\n            const arcLength = (percent / 100) * CIRCUMFERENCE;\n            const dashArray = `${arcLength} ${CIRCUMFERENCE - arcLength}`;\n            const dashOffset = CIRCUMFERENCE * (1 - cumulativePercent / 100);\n            const el = (\n              <ArcChart\n                key={value.label}\n                cx={RADIUS}\n                cy={RADIUS}\n                r={RADIUS - STROKE / 2}\n                fill=\"none\"\n                strokeWidth={STROKE}\n                strokeDasharray={dashArray}\n                strokeDashoffset={dashOffset}\n                style={{ transition: 'stroke-dashoffset 0.3s', cursor: 'pointer' }}\n                tabIndex={0}\n                aria-describedby={tooltip.visible ? 'chart-tooltip' : undefined}\n                onFocus={(e) => handleFocus(e, value)}\n                onBlur={handleMouseOut}\n                onMouseMove={(e) => handleMouseOver(e, value)}\n                onMouseLeave={handleMouseOut}\n                $arcColor={value.color}\n              />\n            );\n            cumulativePercent += percent;\n            return el;\n          })}\n        </g>\n        <text x={RADIUS} y={RADIUS} textAnchor=\"middle\" fontSize=\"2.4rem\" fontWeight=\"bold\">\n          <TextChart x={RADIUS} dy=\"0\" $textColor=\"neutral800\">\n            {new Intl.NumberFormat(locale, {\n              notation: 'compact',\n              maximumFractionDigits: 1,\n            }).format(total)}\n          </TextChart>\n          <TextChart\n            x={RADIUS}\n            dy=\"1.4em\"\n            fontSize=\"1.4rem\"\n            fontWeight=\"normal\"\n            $textColor=\"neutral600\"\n          >\n            {formatMessage(\n              {\n                id: 'content-manager.widget.chart-entries.count.label',\n                defaultMessage: '{count, plural, =0 {entries} one {entry} other {entries}}',\n              },\n              { count: total }\n            )}\n          </TextChart>\n        </text>\n      </svg>\n      {tooltip.visible && tooltip.value && (\n        <Portal\n          style={{\n            position: 'fixed',\n            left: 16,\n            top: 16,\n            zIndex: 2,\n            transform: `translate(${tooltip.x}px, ${tooltip.y}px)`,\n          }}\n          data-testid=\"entries-chart-tooltip\"\n        >\n          <Box\n            background=\"neutral900\"\n            padding={2}\n            borderRadius={1}\n            textAlign=\"center\"\n            role=\"tooltip\"\n            aria-live=\"polite\"\n          >\n            <Typography textColor=\"neutral0\">\n              {formatMessage(\n                {\n                  id: 'content-manager.widget.chart-entries.tooltip',\n                  defaultMessage: '{count} items',\n                },\n                {\n                  count: tooltip.value.count,\n                  label: tooltip.value.label,\n                }\n              )}\n            </Typography>\n          </Box>\n        </Portal>\n      )}\n      <Flex gap={4} wrap=\"wrap\">\n        {data.map(\n          (value) =>\n            value.count > 0 && (\n              <KeyChartItem gap={1} key={value.label}>\n                <Box background={value.color} padding={2} borderRadius={1} />\n                <Typography variant=\"pi\">{value.label}</Typography>\n              </KeyChartItem>\n            )\n        )}\n      </Flex>\n    </Flex>\n  );\n};\n\nconst ChartEntriesWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data: countDocuments, isLoading, error } = useGetCountDocumentsQuery();\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error) {\n    return <Widget.Error />;\n  }\n\n  const { draft, published, modified } = countDocuments ?? {\n    draft: 0,\n    published: 0,\n    modified: 0,\n  };\n\n  const total = draft + published + modified;\n\n  if (!total) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-manager.widget.last-published.no-data',\n          defaultMessage: 'No published entries',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return (\n    <Flex minHeight=\"100%\">\n      <DonutChartSVG\n        data={[\n          {\n            label: formatMessage({\n              id: 'content-manager.containers.List.draft',\n              defaultMessage: 'Draft',\n            }),\n            count: draft,\n            color: 'secondary500',\n          },\n          {\n            label: formatMessage({\n              id: 'content-manager.containers.List.modified',\n              defaultMessage: 'Modified',\n            }),\n            count: modified,\n            color: 'alternative500',\n          },\n          {\n            label: formatMessage({\n              id: 'content-manager.containers.List.published',\n              defaultMessage: 'Published',\n            }),\n            count: published,\n            color: 'success500',\n          },\n        ]}\n      />\n    </Flex>\n  );\n};\n\nexport { ChartEntriesWidget, LastEditedWidget, LastPublishedWidget };\n"],
  "mappings": "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",
  "names": ["homepageService", "contentManagerApi", "enhanceEndpoints", "addTagTypes", "injectEndpoints", "overrideExisting", "endpoints", "builder", "getRecentDocuments", "query", "params", "action", "transformResponse", "response", "data", "providesTags", "res", "_err", "type", "id", "useGetRecentDocumentsQuery", "CellTypography", "styled", "Typography", "RecentDocumentsTable", "documents", "type", "formatMessage", "useIntl", "trackUsage", "useTracking", "navigate", "useNavigate", "getEditViewLink", "document", "isSingleType", "kind", "kindPath", "queryParams", "locale", "contentTypeUid", "documentId", "handleRowClick", "entryType", "link", "_jsx", "Table", "colCount", "rowCount", "length", "Tbody", "map", "_jsxs", "Tr", "onClick", "cursor", "Td", "title", "variant", "textColor", "id", "defaultMessage", "contentTypeDisplayName", "Box", "display", "status", "DocumentStatus", "aria-hidden", "RelativeTime", "timestamp", "Date", "updatedAt", "e", "stopPropagation", "IconButton", "tag", "Link", "to", "label", "Pencil", "LastEditedWidget", "data", "isLoading", "error", "useGetRecentDocumentsQuery", "action", "Widget", "Loading", "Error", "NoData", "LastPublishedWidget", "RADIUS", "STROKE", "CIRCUMFERENCE", "Math", "PI", "ArcChart", "circle", "theme", "$arcColor", "colors", "TextChart", "tspan", "$textColor", "KeyChartItem", "Flex", "breakpoints", "small", "DonutChartSVG", "total", "reduce", "acc", "curr", "count", "tooltip", "setTooltip", "useState", "visible", "x", "y", "value", "cumulativePercent", "handleMouseOver", "clientX", "clientY", "handleMouseOut", "t", "handleFocus", "currentTarget", "getBoundingClientRect", "width", "left", "height", "top", "direction", "gap", "margin", "svg", "viewBox", "style", "position", "zIndex", "g", "transform", "percent", "arcLength", "dashArray", "dashOffset", "el", "cx", "cy", "r", "fill", "strokeWidth", "strokeDasharray", "strokeDashoffset", "transition", "tabIndex", "aria-describedby", "undefined", "onFocus", "onBlur", "onMouseMove", "onMouseLeave", "color", "text", "textAnchor", "fontSize", "fontWeight", "dy", "Intl", "NumberFormat", "notation", "maximumFractionDigits", "format", "Portal", "data-testid", "background", "padding", "borderRadius", "textAlign", "role", "aria-live", "wrap", "ChartEntriesWidget", "countDocuments", "useGetCountDocumentsQuery", "draft", "published", "modified", "minHeight"]
}
