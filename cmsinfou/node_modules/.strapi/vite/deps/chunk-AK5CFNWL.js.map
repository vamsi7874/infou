{
  "version": 3,
  "sources": ["../../../@strapi/review-workflows/admin/src/utils/api.ts"],
  "sourcesContent": ["import { SerializedError } from '@reduxjs/toolkit';\nimport { type UnknownApiError, type ApiError } from '@strapi/admin/strapi-admin';\n\nexport type BaseQueryError = ApiError | UnknownApiError | SerializedError;\n\nconst isBaseQueryError = (error: BaseQueryError): error is ApiError | UnknownApiError => {\n  return error.name !== undefined;\n};\n\ninterface Query {\n  plugins?: Record<string, unknown>;\n  _q?: string;\n  [key: string]: any;\n}\n\n/**\n * This type extracts the plugin options from the query\n * and appends them to the root of the query\n */\ntype TransformedQuery<TQuery extends Query> = Omit<TQuery, 'plugins'> & {\n  [key: string]: string;\n};\n\n/**\n * @description\n * Creates a valid query params object for get requests\n * ie. plugins[18n][locale]=en becomes locale=en\n */\nconst buildValidParams = <TQuery extends Query>(query: TQuery): TransformedQuery<TQuery> => {\n  if (!query) return query;\n\n  // Extract pluginOptions from the query, they shouldn't be part of the URL\n  const { plugins: _, ...validQueryParams } = {\n    ...query,\n    ...Object.values(query?.plugins ?? {}).reduce<Record<string, string>>(\n      (acc, current) => Object.assign(acc, current),\n      {}\n    ),\n  };\n\n  return validQueryParams;\n};\n\nexport { isBaseQueryError, buildValidParams };\n"],
  "mappings": ";AAKA,IAAMA,mBAAmB,CAACC,UAAAA;AACxB,SAAOA,MAAMC,SAASC;AACxB;AAqBA,IAAMC,mBAAmB,CAAuBC,UAAAA;AAC9C,MAAI,CAACA,MAAO,QAAOA;AAGnB,QAAM,EAAEC,SAASC,GAAG,GAAGC,iBAAAA,IAAqB;IAC1C,GAAGH;IACH,GAAGI,OAAOC,QAAOL,+BAAOC,YAAW,CAAA,CAAA,EAAIK,OACrC,CAACC,KAAKC,YAAYJ,OAAOK,OAAOF,KAAKC,OAAAA,GACrC,CAAA,CACD;EACH;AAEA,SAAOL;AACT;",
  "names": ["isBaseQueryError", "error", "name", "undefined", "buildValidParams", "query", "plugins", "_", "validQueryParams", "Object", "values", "reduce", "acc", "current", "assign"]
}
