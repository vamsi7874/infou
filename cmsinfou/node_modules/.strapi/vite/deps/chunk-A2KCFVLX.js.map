{
  "version": 3,
  "sources": ["../../../@strapi/content-releases/admin/src/components/ReleaseActionOptions.tsx", "../../../@strapi/content-releases/admin/src/components/ReleaseActionMenu.tsx"],
  "sourcesContent": ["import * as React from 'react';\n\nimport { VisuallyHidden, Field, Flex } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\ninterface FieldWrapperProps extends Field.Props {\n  actionType: 'publish' | 'unpublish';\n}\n\nconst getBorderLeftRadiusValue = (actionType: FieldWrapperProps['actionType']) => {\n  return actionType === 'publish' ? 1 : 0;\n};\n\nconst getBorderRightRadiusValue = (actionType: FieldWrapperProps['actionType']) => {\n  return actionType === 'publish' ? 0 : 1;\n};\n\nconst FieldWrapper = styled(Field.Root)<{\n  $actionType: 'publish' | 'unpublish';\n}>`\n  border-top-left-radius: ${({ $actionType, theme }) =>\n    theme.spaces[getBorderLeftRadiusValue($actionType)]};\n  border-bottom-left-radius: ${({ $actionType, theme }) =>\n    theme.spaces[getBorderLeftRadiusValue($actionType)]};\n  border-top-right-radius: ${({ $actionType, theme }) =>\n    theme.spaces[getBorderRightRadiusValue($actionType)]};\n  border-bottom-right-radius: ${({ $actionType, theme }) =>\n    theme.spaces[getBorderRightRadiusValue($actionType)]};\n\n  > label {\n    color: inherit;\n    padding: ${({ theme }) => `${theme.spaces[2]} ${theme.spaces[3]}`};\n    text-align: center;\n    vertical-align: middle;\n    text-transform: capitalize;\n  }\n\n  &[data-checked='true'] {\n    color: ${({ theme, $actionType }) =>\n      $actionType === 'publish' ? theme.colors.primary700 : theme.colors.danger600};\n    background-color: ${({ theme, $actionType }) =>\n      $actionType === 'publish' ? theme.colors.primary100 : theme.colors.danger100};\n    border-color: ${({ theme, $actionType }) =>\n      $actionType === 'publish' ? theme.colors.primary700 : theme.colors.danger600};\n  }\n\n  &[data-checked='false'] {\n    border-left: ${({ $actionType }) => $actionType === 'unpublish' && 'none'};\n    border-right: ${({ $actionType }) => $actionType === 'publish' && 'none'};\n  }\n\n  &[data-checked='false'][data-disabled='false']:hover {\n    color: ${({ theme }) => theme.colors.neutral700};\n    background-color: ${({ theme }) => theme.colors.neutral100};\n    border-color: ${({ theme }) => theme.colors.neutral200};\n\n    & > label {\n      cursor: pointer;\n    }\n  }\n\n  &[data-disabled='true'] {\n    color: ${({ theme }) => theme.colors.neutral600};\n    background-color: ${({ theme }) => theme.colors.neutral150};\n    border-color: ${({ theme }) => theme.colors.neutral300};\n  }\n`;\n\ninterface ActionOptionProps {\n  selected: 'publish' | 'unpublish';\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  name: string;\n  disabled?: boolean;\n}\n\ninterface OptionProps extends ActionOptionProps {\n  actionType: 'publish' | 'unpublish';\n}\n\nconst ActionOption = ({\n  selected,\n  actionType,\n  handleChange,\n  name,\n  disabled = false,\n}: OptionProps) => {\n  return (\n    <FieldWrapper\n      $actionType={actionType}\n      background=\"primary0\"\n      borderColor=\"neutral200\"\n      color={selected === actionType ? 'primary600' : 'neutral600'}\n      position=\"relative\"\n      cursor=\"pointer\"\n      data-checked={selected === actionType}\n      data-disabled={disabled && selected !== actionType}\n    >\n      <Field.Label>\n        <VisuallyHidden>\n          <Field.Input\n            type=\"radio\"\n            name={name}\n            checked={selected === actionType}\n            onChange={handleChange}\n            value={actionType}\n            disabled={disabled}\n          />\n        </VisuallyHidden>\n        {actionType}\n      </Field.Label>\n    </FieldWrapper>\n  );\n};\n\nexport const ReleaseActionOptions = ({\n  selected,\n  handleChange,\n  name,\n  disabled = false,\n}: ActionOptionProps) => {\n  return (\n    <Flex>\n      <ActionOption\n        actionType=\"publish\"\n        selected={selected}\n        handleChange={handleChange}\n        name={name}\n        disabled={disabled}\n      />\n      <ActionOption\n        actionType=\"unpublish\"\n        selected={selected}\n        handleChange={handleChange}\n        name={name}\n        disabled={disabled}\n      />\n    </Flex>\n  );\n};\n", "import * as React from 'react';\n\nimport {\n  useAPIErrorHandler,\n  useNotification,\n  useAuth,\n  useRBAC,\n  isFetchError,\n} from '@strapi/admin/strapi-admin';\nimport { Menu, AccessibleIcon } from '@strapi/design-system';\nimport { Cross, More, Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { DeleteReleaseAction, ReleaseAction } from '../../../shared/contracts/release-actions';\nimport { Release } from '../../../shared/contracts/releases';\nimport { PERMISSIONS } from '../constants';\nimport { useDeleteReleaseActionMutation } from '../services/release';\n\n// TODO: has to be fixed in the DS - https://github.com/strapi/design-system/issues/1934\nconst StyledMenuLink = styled(Menu.Item)`\n  span,\n  &:hover span {\n    color: ${({ theme }) => theme.colors['neutral800']};\n  }\n\n  svg path,\n  &:hover svg path {\n    fill: ${({ theme }) => theme.colors['neutral500']};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * DeleteReleaseActionItemProps\n * -----------------------------------------------------------------------------------------------*/\ninterface DeleteReleaseActionItemProps {\n  releaseId: DeleteReleaseAction.Request['params']['releaseId'];\n  actionId: DeleteReleaseAction.Request['params']['actionId'];\n}\n\nconst DeleteReleaseActionItem = ({ releaseId, actionId }: DeleteReleaseActionItemProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const [deleteReleaseAction] = useDeleteReleaseActionMutation();\n  const {\n    allowedActions: { canDeleteAction },\n  } = useRBAC(PERMISSIONS);\n\n  const handleDeleteAction = async () => {\n    const response = await deleteReleaseAction({\n      params: { releaseId, actionId },\n    });\n\n    if ('data' in response) {\n      // Handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.content-manager-edit-view.remove-from-release.notification.success',\n          defaultMessage: 'Entry removed from release',\n        }),\n      });\n\n      return;\n    }\n\n    if ('error' in response) {\n      if (isFetchError(response.error)) {\n        // Handle fetch error\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        // Handle generic error\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n        });\n      }\n    }\n  };\n\n  if (!canDeleteAction) {\n    return null;\n  }\n\n  return (\n    <Menu.Item variant=\"danger\" startIcon={<Cross />} onSelect={handleDeleteAction}>\n      {formatMessage({\n        id: 'content-releases.content-manager-edit-view.remove-from-release',\n        defaultMessage: 'Remove from release',\n      })}\n    </Menu.Item>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseActionEntryLinkItem\n * -----------------------------------------------------------------------------------------------*/\ninterface ReleaseActionEntryLinkItemProps {\n  contentTypeUid: ReleaseAction['contentType'];\n  documentId: ReleaseAction['entry']['documentId'];\n  locale: ReleaseAction['locale'];\n}\n\nconst ReleaseActionEntryLinkItem = ({\n  contentTypeUid,\n  documentId,\n  locale,\n}: ReleaseActionEntryLinkItemProps) => {\n  const { formatMessage } = useIntl();\n  const userPermissions = useAuth('ReleaseActionEntryLinkItem', (state) => state.permissions);\n\n  // Confirm user has permissions to access the entry for the given locale\n  const canUpdateEntryForLocale = React.useMemo(() => {\n    const updatePermissions = userPermissions.find(\n      (permission) =>\n        permission.subject === contentTypeUid &&\n        permission.action === 'plugin::content-manager.explorer.update'\n    );\n\n    if (!updatePermissions) {\n      return false;\n    }\n\n    return Boolean(!locale || updatePermissions.properties?.locales?.includes(locale));\n  }, [contentTypeUid, locale, userPermissions]);\n\n  const {\n    allowedActions: { canUpdate: canUpdateContentType },\n  } = useRBAC({\n    updateContentType: [\n      {\n        action: 'plugin::content-manager.explorer.update',\n        subject: contentTypeUid,\n      },\n    ],\n  });\n\n  if (!canUpdateContentType || !canUpdateEntryForLocale) {\n    return null;\n  }\n\n  return (\n    <StyledMenuLink\n      /* @ts-expect-error inference isn't working in DS */\n      tag={NavLink}\n      isLink\n      to={{\n        pathname: `/content-manager/collection-types/${contentTypeUid}/${documentId}`,\n        search: locale && `?plugins[i18n][locale]=${locale}`,\n      }}\n      startIcon={<Pencil />}\n    >\n      {formatMessage({\n        id: 'content-releases.content-manager-edit-view.edit-entry',\n        defaultMessage: 'Edit entry',\n      })}\n    </StyledMenuLink>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EditReleaseItem\n * -----------------------------------------------------------------------------------------------*/\ninterface EditReleaseItemProps {\n  releaseId: Release['id'];\n}\n\nconst EditReleaseItem = ({ releaseId }: EditReleaseItemProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <StyledMenuLink\n      /* @ts-expect-error inference isn't working in DS */\n      tag={NavLink}\n      isLink\n      to={`/plugins/content-releases/${releaseId}`}\n      startIcon={<Pencil />}\n    >\n      {formatMessage({\n        id: 'content-releases.content-manager-edit-view.edit-release',\n        defaultMessage: 'Edit release',\n      })}\n    </StyledMenuLink>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Root\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RootProps {\n  children: React.ReactNode;\n  hasTriggerBorder?: boolean;\n}\n\nconst Root = ({ children }: RootProps) => {\n  const { formatMessage } = useIntl();\n\n  const { allowedActions } = useRBAC(PERMISSIONS);\n\n  return (\n    // A user can access the dropdown if they have permissions to delete a release-action OR update a release\n    allowedActions.canDeleteAction || allowedActions.canUpdate ? (\n      <Menu.Root>\n        <StyledMoreButton variant=\"tertiary\" endIcon={null} paddingLeft=\"7px\" paddingRight=\"7px\">\n          <AccessibleIcon\n            label={formatMessage({\n              id: 'content-releases.content-manager-edit-view.release-action-menu',\n              defaultMessage: 'Release action options',\n            })}\n          >\n            <More />\n          </AccessibleIcon>\n        </StyledMoreButton>\n        <Menu.Content top={1} popoverPlacement=\"bottom-end\">\n          {children}\n        </Menu.Content>\n      </Menu.Root>\n    ) : null\n  );\n};\n\nconst StyledMoreButton = styled(Menu.Trigger)`\n  & > span {\n    display: flex;\n  }\n`;\n\nexport const ReleaseActionMenu = {\n  Root,\n  EditReleaseItem,\n  DeleteReleaseActionItem,\n  ReleaseActionEntryLinkItem,\n};\n"],
  "mappings": "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",
  "names": ["getBorderLeftRadiusValue", "actionType", "getBorderRightRadiusValue", "FieldWrapper", "styled", "Field", "Root", "$actionType", "theme", "spaces", "colors", "primary700", "danger600", "primary100", "danger100", "neutral700", "neutral100", "neutral200", "neutral600", "neutral150", "neutral300", "ActionOption", "selected", "handleChange", "name", "disabled", "_jsx", "background", "borderColor", "color", "position", "cursor", "data-checked", "data-disabled", "_jsxs", "Label", "VisuallyHidden", "Input", "type", "checked", "onChange", "value", "ReleaseActionOptions", "Flex", "StyledMenuLink", "styled", "Menu", "Item", "theme", "colors", "DeleteReleaseActionItem", "releaseId", "actionId", "formatMessage", "useIntl", "toggleNotification", "useNotification", "formatAPIError", "useAPIErrorHandler", "deleteReleaseAction", "useDeleteReleaseActionMutation", "allowedActions", "canDeleteAction", "useRBAC", "PERMISSIONS", "handleDeleteAction", "response", "params", "type", "message", "id", "defaultMessage", "isFetchError", "error", "_jsx", "variant", "startIcon", "Cross", "onSelect", "ReleaseActionEntryLinkItem", "contentTypeUid", "documentId", "locale", "userPermissions", "useAuth", "state", "permissions", "canUpdateEntryForLocale", "useMemo", "updatePermissions", "find", "permission", "subject", "action", "Boolean", "properties", "locales", "includes", "canUpdate", "canUpdateContentType", "updateContentType", "tag", "NavLink", "isLink", "to", "pathname", "search", "Pencil", "EditReleaseItem", "Root", "children", "_jsxs", "StyledMoreButton", "endIcon", "paddingLeft", "paddingRight", "AccessibleIcon", "label", "More", "Content", "top", "popoverPlacement", "Trigger", "ReleaseActionMenu"]
}
