{"version":3,"file":"Widgets.js","sources":["../../../admin/src/components/Widgets.tsx"],"sourcesContent":["import { useTracking, Widget } from '@strapi/admin/strapi-admin';\nimport { Badge, Box, IconButton, Table, Tbody, Td, Tr, Typography } from '@strapi/design-system';\nimport { Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { Release } from '../../../shared/contracts/releases';\nimport { getBadgeProps } from '../pages/ReleasesPage';\nimport { useGetUpcomingReleasesQuery } from '../services/homepage';\n\nimport { RelativeTime } from './RelativeTime';\n\nconst CellTypography = styled(Typography)`\n  display: block;\n  max-width: 14.4rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nconst ReleasesTable = ({ items }: { items: Release[] }) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n\n  const getEditViewLink = (item: Release): string => {\n    return `/plugins/content-releases/${item.id}`;\n  };\n\n  const handleRowClick = (item: Release) => () => {\n    trackUsage('willEditReleaseFromHome');\n    const link = getEditViewLink(item);\n    navigate(link);\n  };\n\n  return (\n    <Table colCount={4} rowCount={items?.length ?? 0}>\n      <Tbody>\n        {items?.map((item) => (\n          <Tr onClick={handleRowClick(item)} cursor=\"pointer\" key={item.documentId}>\n            <Td>\n              <CellTypography title={item.name} variant=\"omega\" textColor=\"neutral800\">\n                {item.name}\n              </CellTypography>\n            </Td>\n            <Td>\n              <Box display=\"inline-block\">\n                {item.status ? (\n                  <Badge {...getBadgeProps(item.status)}>{item.status}</Badge>\n                ) : (\n                  <Typography textColor=\"neutral600\" aria-hidden>\n                    -\n                  </Typography>\n                )}\n              </Box>\n            </Td>\n            <Td>\n              <Typography variant=\"omega\" textTransform=\"capitalize\" textColor=\"neutral600\">\n                {item.scheduledAt ? (\n                  <RelativeTime timestamp={new Date(item.scheduledAt)} />\n                ) : (\n                  formatMessage({\n                    id: 'content-releases.pages.Releases.not-scheduled',\n                    defaultMessage: 'Not scheduled',\n                  })\n                )}\n              </Typography>\n            </Td>\n            <Td onClick={(e) => e.stopPropagation()}>\n              <Box display=\"inline-block\">\n                <IconButton\n                  tag={Link}\n                  to={getEditViewLink(item)}\n                  onClick={() => trackUsage('willEditReleaseFromHome')}\n                  label={formatMessage({\n                    id: 'content-manager.actions.edit.label',\n                    defaultMessage: 'Edit',\n                  })}\n                  variant=\"ghost\"\n                >\n                  <Pencil />\n                </IconButton>\n              </Box>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Upcoming Releases\n * -----------------------------------------------------------------------------------------------*/\n\nconst UpcomingReleasesWidget = () => {\n  const { formatMessage } = useIntl();\n  const { data, isLoading, error } = useGetUpcomingReleasesQuery();\n\n  if (isLoading) {\n    return <Widget.Loading />;\n  }\n\n  if (error || !data) {\n    return <Widget.Error />;\n  }\n\n  if (data.length === 0) {\n    return (\n      <Widget.NoData>\n        {formatMessage({\n          id: 'content-releases.widget.upcoming-releases.no-data',\n          defaultMessage: 'No releases',\n        })}\n      </Widget.NoData>\n    );\n  }\n\n  return <ReleasesTable items={data} />;\n};\n\nexport { UpcomingReleasesWidget };\n"],"names":["CellTypography","styled","Typography","ReleasesTable","items","formatMessage","useIntl","trackUsage","useTracking","navigate","useNavigate","getEditViewLink","item","id","handleRowClick","link","_jsx","Table","colCount","rowCount","length","Tbody","map","_jsxs","Tr","onClick","cursor","Td","title","name","variant","textColor","Box","display","status","Badge","getBadgeProps","aria-hidden","textTransform","scheduledAt","RelativeTime","timestamp","Date","defaultMessage","e","stopPropagation","IconButton","tag","Link","to","label","Pencil","documentId","UpcomingReleasesWidget","data","isLoading","error","useGetUpcomingReleasesQuery","Widget","Loading","Error","NoData"],"mappings":"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"}