{"version":3,"file":"EntryValidationPopover.js","sources":["../../../admin/src/components/EntryValidationPopover.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { FormErrors, FormValues } from '@strapi/admin/strapi-admin';\nimport { unstable_useDocument } from '@strapi/content-manager/strapi-admin';\nimport { Button, LinkButton, Flex, Typography, Popover } from '@strapi/design-system';\nimport { CheckCircle, CrossCircle, ArrowsCounterClockwise, CaretDown } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl, MessageDescriptor } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport type {\n  ReleaseAction,\n  ReleaseActionEntry,\n  Stage,\n} from '../../../shared/contracts/release-actions';\nimport type { Struct } from '@strapi/types';\n\nconst StyledPopoverFlex = styled(Flex)`\n  width: 100%;\n  max-width: 256px;\n\n  & > * {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};\n  }\n\n  & > *:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst ButtonContent = styled(Flex)`\n  svg {\n    fill: currentColor;\n  }\n`;\n\nconst CustomStatusButton = ({\n  children,\n  icon,\n  color,\n}: {\n  icon: React.ReactElement;\n  color: string;\n} & React.PropsWithChildren) => {\n  return (\n    <Popover.Trigger>\n      <Button variant=\"ghost\" endIcon={<CaretDown />}>\n        <ButtonContent color={color} gap={2}>\n          {icon}\n          <Typography textColor={color} variant=\"omega\" fontWeight=\"bold\">\n            {children}\n          </Typography>\n        </ButtonContent>\n      </Button>\n    </Popover.Trigger>\n  );\n};\n\ninterface EntryValidationPopoverProps {\n  action: ReleaseAction['type'];\n  schema?: Struct.ContentTypeSchema & {\n    hasReviewWorkflow: boolean;\n    stageRequiredToPublish?: Stage;\n  };\n  entry: ReleaseActionEntry;\n  status: ReleaseAction['status'];\n}\n\ninterface ValidationStatusProps {\n  action: ReleaseAction['type'];\n  status: ReleaseAction['status'];\n  hasErrors: boolean | null;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}\n\nconst EntryStatusTrigger = ({\n  action,\n  status,\n  hasErrors,\n  requiredStage,\n  entryStage,\n}: ValidationStatusProps) => {\n  const { formatMessage } = useIntl();\n\n  if (action === 'publish') {\n    if (hasErrors || (requiredStage && requiredStage.id !== entryStage?.id)) {\n      return (\n        <CustomStatusButton icon={<CrossCircle />} color=\"danger600\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.not-ready',\n            defaultMessage: 'Not ready to publish',\n          })}\n        </CustomStatusButton>\n      );\n    }\n\n    if (status === 'draft') {\n      return (\n        <CustomStatusButton icon={<CheckCircle />} color=\"success600\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.ready-to-publish',\n            defaultMessage: 'Ready to publish',\n          })}\n        </CustomStatusButton>\n      );\n    }\n\n    if (status === 'modified') {\n      return (\n        <CustomStatusButton icon={<ArrowsCounterClockwise />} color=\"alternative600\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.modified',\n            defaultMessage: 'Ready to publish changes',\n          })}\n        </CustomStatusButton>\n      );\n    }\n\n    return (\n      <CustomStatusButton icon={<CheckCircle />} color=\"success600\">\n        {formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.entry-validation.already-published',\n          defaultMessage: 'Already published',\n        })}\n      </CustomStatusButton>\n    );\n  }\n\n  if (status === 'published') {\n    return (\n      <CustomStatusButton icon={<CheckCircle />} color=\"success600\">\n        {formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.entry-validation.ready-to-unpublish',\n          defaultMessage: 'Ready to unpublish',\n        })}\n      </CustomStatusButton>\n    );\n  }\n\n  return (\n    <CustomStatusButton icon={<CheckCircle />} color=\"success600\">\n      {formatMessage({\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.already-unpublished',\n        defaultMessage: 'Already unpublished',\n      })}\n    </CustomStatusButton>\n  );\n};\n\ninterface FieldsValidationProps {\n  hasErrors: boolean;\n  errors: FormErrors<FormValues> | null;\n  kind?: string;\n  contentTypeUid?: string;\n  documentId?: string;\n  locale?: string;\n}\n\nconst FieldsValidation = ({\n  hasErrors,\n  errors,\n  kind,\n  contentTypeUid,\n  documentId,\n  locale,\n}: FieldsValidationProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex direction=\"column\" gap={1} width=\"100%\" padding={5}>\n      <Flex gap={2} width=\"100%\">\n        <Typography fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.fields',\n            defaultMessage: 'Fields',\n          })}\n        </Typography>\n        {hasErrors ? <CrossCircle fill=\"danger600\" /> : <CheckCircle fill=\"success600\" />}\n      </Flex>\n      <Typography width=\"100%\" textColor=\"neutral600\">\n        {hasErrors\n          ? formatMessage(\n              {\n                id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.error',\n                defaultMessage: '{errors} errors on fields.',\n              },\n              { errors: errors ? Object.keys(errors).length : 0 }\n            )\n          : formatMessage({\n              id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.success',\n              defaultMessage: 'All fields are filled correctly.',\n            })}\n      </Typography>\n      {hasErrors && (\n        <LinkButton\n          tag={Link}\n          to={{\n            pathname: `/content-manager/${kind === 'collectionType' ? 'collection-types' : 'single-types'}/${contentTypeUid}/${documentId}`,\n            search: locale\n              ? stringify({\n                  plugins: {\n                    i18n: {\n                      locale,\n                    },\n                  },\n                })\n              : '',\n          }}\n          variant=\"secondary\"\n          fullWidth\n          state={{ forceValidation: true }}\n        >\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.fields.see-errors',\n            defaultMessage: 'See errors',\n          })}\n        </LinkButton>\n      )}\n    </Flex>\n  );\n};\n\nconst getReviewStageIcon = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}) => {\n  if (!contentTypeHasReviewWorkflow) {\n    return <CheckCircle fill=\"neutral200\" />;\n  }\n  if (requiredStage && requiredStage.id !== entryStage?.id) {\n    return <CrossCircle fill=\"danger600\" />;\n  }\n  return <CheckCircle fill=\"success600\" />;\n};\n\nconst getReviewStageMessage = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n  formatMessage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n  formatMessage: (messageDescriptor: MessageDescriptor, values?: Record<string, string>) => string;\n}) => {\n  if (!contentTypeHasReviewWorkflow) {\n    return formatMessage({\n      id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-enabled',\n      defaultMessage: 'This entry is not associated to any workflow.',\n    });\n  }\n\n  if (requiredStage && requiredStage.id !== entryStage?.id) {\n    return formatMessage(\n      {\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.not-ready',\n        defaultMessage: 'This entry is not at the required stage for publishing. ({stageName})',\n      },\n      {\n        stageName: requiredStage?.name ?? '',\n      }\n    );\n  }\n\n  if (requiredStage && requiredStage.id === entryStage?.id) {\n    return formatMessage(\n      {\n        id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.ready',\n        defaultMessage: 'This entry is at the required stage for publishing. ({stageName})',\n      },\n      {\n        stageName: requiredStage?.name ?? '',\n      }\n    );\n  }\n\n  return formatMessage({\n    id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage.stage-not-required',\n    defaultMessage: 'No required stage for publication',\n  });\n};\n\nconst ReviewStageValidation = ({\n  contentTypeHasReviewWorkflow,\n  requiredStage,\n  entryStage,\n}: {\n  contentTypeHasReviewWorkflow: boolean;\n  requiredStage?: Stage;\n  entryStage?: Stage;\n}) => {\n  const { formatMessage } = useIntl();\n\n  const Icon = getReviewStageIcon({\n    contentTypeHasReviewWorkflow,\n    requiredStage,\n    entryStage,\n  });\n\n  return (\n    <Flex direction=\"column\" gap={1} width=\"100%\" padding={5}>\n      <Flex gap={2} width=\"100%\">\n        <Typography fontWeight=\"bold\">\n          {formatMessage({\n            id: 'content-releases.pages.ReleaseDetails.entry-validation.review-stage',\n            defaultMessage: 'Review stage',\n          })}\n        </Typography>\n        {Icon}\n      </Flex>\n      <Typography textColor=\"neutral600\">\n        {getReviewStageMessage({\n          contentTypeHasReviewWorkflow,\n          requiredStage,\n          entryStage,\n          formatMessage,\n        })}\n      </Typography>\n    </Flex>\n  );\n};\n\nexport const EntryValidationPopover = ({\n  schema,\n  entry,\n  status,\n  action,\n}: EntryValidationPopoverProps) => {\n  const { validate, isLoading } = unstable_useDocument(\n    {\n      collectionType: schema?.kind ?? '',\n      model: schema?.uid ?? '',\n    },\n    {\n      // useDocument makes a request to get more data about the entry, but we only want to have the validation function so we skip the request\n      skip: true,\n    }\n  );\n\n  // Validation errors\n  const errors = isLoading ? null : validate(entry);\n  const hasErrors = errors ? Object.keys(errors).length > 0 : false;\n\n  // Entry stage\n  const contentTypeHasReviewWorkflow = schema?.hasReviewWorkflow ?? false;\n  const requiredStage = schema?.stageRequiredToPublish;\n  const entryStage = entry.strapi_stage;\n\n  if (isLoading) {\n    return null;\n  }\n\n  return (\n    <Popover.Root>\n      <EntryStatusTrigger\n        action={action}\n        status={status}\n        hasErrors={hasErrors}\n        requiredStage={requiredStage}\n        entryStage={entryStage}\n      />\n      <Popover.Content>\n        <StyledPopoverFlex direction=\"column\">\n          <FieldsValidation\n            hasErrors={hasErrors}\n            errors={errors}\n            contentTypeUid={schema?.uid}\n            kind={schema?.kind}\n            documentId={entry.documentId}\n            locale={entry.locale}\n          />\n          <ReviewStageValidation\n            contentTypeHasReviewWorkflow={contentTypeHasReviewWorkflow}\n            requiredStage={requiredStage}\n            entryStage={entryStage}\n          />\n        </StyledPopoverFlex>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n"],"names":["StyledPopoverFlex","styled","Flex","theme","colors","neutral150","ButtonContent","CustomStatusButton","children","icon","color","_jsx","Popover","Trigger","Button","variant","endIcon","CaretDown","_jsxs","gap","Typography","textColor","fontWeight","EntryStatusTrigger","action","status","hasErrors","requiredStage","entryStage","formatMessage","useIntl","id","CrossCircle","defaultMessage","CheckCircle","ArrowsCounterClockwise","FieldsValidation","errors","kind","contentTypeUid","documentId","locale","direction","width","padding","fill","Object","keys","length","LinkButton","tag","Link","to","pathname","search","stringify","plugins","i18n","fullWidth","state","forceValidation","getReviewStageIcon","contentTypeHasReviewWorkflow","getReviewStageMessage","stageName","name","ReviewStageValidation","Icon","EntryValidationPopover","schema","entry","validate","isLoading","unstable_useDocument","collectionType","model","uid","skip","hasReviewWorkflow","stageRequiredToPublish","strapi_stage","Root","Content"],"mappings":";;;;;;;;;;;;AAkBA,MAAMA,iBAAAA,GAAoBC,uBAAOC,CAAAA,iBAAAA,CAAK;;;;;6BAKT,EAAE,CAAC,EAAEC,KAAK,EAAE,GAAKA,KAAMC,CAAAA,MAAM,CAACC,UAAU,CAAC;;;;;;AAMtE,CAAC;AAED,MAAMC,aAAAA,GAAgBL,uBAAOC,CAAAA,iBAAAA,CAAK;;;;AAIlC,CAAC;AAED,MAAMK,kBAAAA,GAAqB,CAAC,EAC1BC,QAAQ,EACRC,IAAI,EACJC,KAAK,EAIoB,GAAA;IACzB,qBACEC,cAAA,CAACC,qBAAQC,OAAO,EAAA;AACd,QAAA,QAAA,gBAAAF,cAACG,CAAAA,mBAAAA,EAAAA;YAAOC,OAAQ,EAAA,OAAA;AAAQC,YAAAA,OAAAA,gBAASL,cAACM,CAAAA,eAAAA,EAAAA,EAAAA,CAAAA;AAChC,YAAA,QAAA,gBAAAC,eAACZ,CAAAA,aAAAA,EAAAA;gBAAcI,KAAOA,EAAAA,KAAAA;gBAAOS,GAAK,EAAA,CAAA;;AAC/BV,oBAAAA,IAAAA;kCACDE,cAACS,CAAAA,uBAAAA,EAAAA;wBAAWC,SAAWX,EAAAA,KAAAA;wBAAOK,OAAQ,EAAA,OAAA;wBAAQO,UAAW,EAAA,MAAA;AACtDd,wBAAAA,QAAAA,EAAAA;;;;;;AAMb,CAAA;AAoBA,MAAMe,kBAAqB,GAAA,CAAC,EAC1BC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,aAAa,EACbC,UAAU,EACY,GAAA;IACtB,MAAM,EAAEC,aAAa,EAAE,GAAGC,iBAAAA,EAAAA;AAE1B,IAAA,IAAIN,WAAW,SAAW,EAAA;AACxB,QAAA,IAAIE,aAAcC,aAAiBA,IAAAA,aAAAA,CAAcI,EAAE,KAAKH,YAAYG,EAAK,EAAA;AACvE,YAAA,qBACEpB,cAACJ,CAAAA,kBAAAA,EAAAA;AAAmBE,gBAAAA,IAAAA,gBAAME,cAACqB,CAAAA,iBAAAA,EAAAA,EAAAA,CAAAA;gBAAgBtB,KAAM,EAAA,WAAA;0BAC9CmB,aAAc,CAAA;oBACbE,EAAI,EAAA,kEAAA;oBACJE,cAAgB,EAAA;AAClB,iBAAA;;AAGN;AAEA,QAAA,IAAIR,WAAW,OAAS,EAAA;AACtB,YAAA,qBACEd,cAACJ,CAAAA,kBAAAA,EAAAA;AAAmBE,gBAAAA,IAAAA,gBAAME,cAACuB,CAAAA,iBAAAA,EAAAA,EAAAA,CAAAA;gBAAgBxB,KAAM,EAAA,YAAA;0BAC9CmB,aAAc,CAAA;oBACbE,EAAI,EAAA,yEAAA;oBACJE,cAAgB,EAAA;AAClB,iBAAA;;AAGN;AAEA,QAAA,IAAIR,WAAW,UAAY,EAAA;AACzB,YAAA,qBACEd,cAACJ,CAAAA,kBAAAA,EAAAA;AAAmBE,gBAAAA,IAAAA,gBAAME,cAACwB,CAAAA,4BAAAA,EAAAA,EAAAA,CAAAA;gBAA2BzB,KAAM,EAAA,gBAAA;0BACzDmB,aAAc,CAAA;oBACbE,EAAI,EAAA,iEAAA;oBACJE,cAAgB,EAAA;AAClB,iBAAA;;AAGN;AAEA,QAAA,qBACEtB,cAACJ,CAAAA,kBAAAA,EAAAA;AAAmBE,YAAAA,IAAAA,gBAAME,cAACuB,CAAAA,iBAAAA,EAAAA,EAAAA,CAAAA;YAAgBxB,KAAM,EAAA,YAAA;sBAC9CmB,aAAc,CAAA;gBACbE,EAAI,EAAA,0EAAA;gBACJE,cAAgB,EAAA;AAClB,aAAA;;AAGN;AAEA,IAAA,IAAIR,WAAW,WAAa,EAAA;AAC1B,QAAA,qBACEd,cAACJ,CAAAA,kBAAAA,EAAAA;AAAmBE,YAAAA,IAAAA,gBAAME,cAACuB,CAAAA,iBAAAA,EAAAA,EAAAA,CAAAA;YAAgBxB,KAAM,EAAA,YAAA;sBAC9CmB,aAAc,CAAA;gBACbE,EAAI,EAAA,2EAAA;gBACJE,cAAgB,EAAA;AAClB,aAAA;;AAGN;AAEA,IAAA,qBACEtB,cAACJ,CAAAA,kBAAAA,EAAAA;AAAmBE,QAAAA,IAAAA,gBAAME,cAACuB,CAAAA,iBAAAA,EAAAA,EAAAA,CAAAA;QAAgBxB,KAAM,EAAA,YAAA;kBAC9CmB,aAAc,CAAA;YACbE,EAAI,EAAA,4EAAA;YACJE,cAAgB,EAAA;AAClB,SAAA;;AAGN,CAAA;AAWA,MAAMG,gBAAmB,GAAA,CAAC,EACxBV,SAAS,EACTW,MAAM,EACNC,IAAI,EACJC,cAAc,EACdC,UAAU,EACVC,MAAM,EACgB,GAAA;IACtB,MAAM,EAAEZ,aAAa,EAAE,GAAGC,iBAAAA,EAAAA;AAE1B,IAAA,qBACEZ,eAAChB,CAAAA,iBAAAA,EAAAA;QAAKwC,SAAU,EAAA,QAAA;QAASvB,GAAK,EAAA,CAAA;QAAGwB,KAAM,EAAA,MAAA;QAAOC,OAAS,EAAA,CAAA;;0BACrD1B,eAAChB,CAAAA,iBAAAA,EAAAA;gBAAKiB,GAAK,EAAA,CAAA;gBAAGwB,KAAM,EAAA,MAAA;;kCAClBhC,cAACS,CAAAA,uBAAAA,EAAAA;wBAAWE,UAAW,EAAA,MAAA;kCACpBO,aAAc,CAAA;4BACbE,EAAI,EAAA,+DAAA;4BACJE,cAAgB,EAAA;AAClB,yBAAA;;AAEDP,oBAAAA,SAAAA,iBAAYf,cAACqB,CAAAA,iBAAAA,EAAAA;wBAAYa,IAAK,EAAA;uCAAiBlC,cAACuB,CAAAA,iBAAAA,EAAAA;wBAAYW,IAAK,EAAA;;;;0BAEpElC,cAACS,CAAAA,uBAAAA,EAAAA;gBAAWuB,KAAM,EAAA,MAAA;gBAAOtB,SAAU,EAAA,YAAA;AAChCK,gBAAAA,QAAAA,EAAAA,SAAAA,GACGG,aACE,CAAA;oBACEE,EAAI,EAAA,qEAAA;oBACJE,cAAgB,EAAA;iBAElB,EAAA;AAAEI,oBAAAA,MAAAA,EAAQA,SAASS,MAAOC,CAAAA,IAAI,CAACV,MAAAA,CAAAA,CAAQW,MAAM,GAAG;AAAE,iBAAA,CAAA,GAEpDnB,aAAc,CAAA;oBACZE,EAAI,EAAA,uEAAA;oBACJE,cAAgB,EAAA;AAClB,iBAAA;;AAELP,YAAAA,SAAAA,kBACCf,cAACsC,CAAAA,uBAAAA,EAAAA;gBACCC,GAAKC,EAAAA,mBAAAA;gBACLC,EAAI,EAAA;AACFC,oBAAAA,QAAAA,EAAU,CAAC,iBAAiB,EAAEf,IAAAA,KAAS,gBAAmB,GAAA,kBAAA,GAAqB,cAAe,CAAA,CAAC,EAAEC,cAAAA,CAAe,CAAC,EAAEC,WAAW,CAAC;AAC/Hc,oBAAAA,MAAAA,EAAQb,SACJc,YAAU,CAAA;wBACRC,OAAS,EAAA;4BACPC,IAAM,EAAA;AACJhB,gCAAAA;AACF;AACF;qBAEF,CAAA,GAAA;AACN,iBAAA;gBACA1B,OAAQ,EAAA,WAAA;gBACR2C,SAAS,EAAA,IAAA;gBACTC,KAAO,EAAA;oBAAEC,eAAiB,EAAA;AAAK,iBAAA;0BAE9B/B,aAAc,CAAA;oBACbE,EAAI,EAAA,0EAAA;oBACJE,cAAgB,EAAA;AAClB,iBAAA;;;;AAKV,CAAA;AAEA,MAAM4B,kBAAAA,GAAqB,CAAC,EAC1BC,4BAA4B,EAC5BnC,aAAa,EACbC,UAAU,EAKX,GAAA;AACC,IAAA,IAAI,CAACkC,4BAA8B,EAAA;AACjC,QAAA,qBAAOnD,cAACuB,CAAAA,iBAAAA,EAAAA;YAAYW,IAAK,EAAA;;AAC3B;AACA,IAAA,IAAIlB,aAAiBA,IAAAA,aAAAA,CAAcI,EAAE,KAAKH,YAAYG,EAAI,EAAA;AACxD,QAAA,qBAAOpB,cAACqB,CAAAA,iBAAAA,EAAAA;YAAYa,IAAK,EAAA;;AAC3B;AACA,IAAA,qBAAOlC,cAACuB,CAAAA,iBAAAA,EAAAA;QAAYW,IAAK,EAAA;;AAC3B,CAAA;AAEA,MAAMkB,qBAAAA,GAAwB,CAAC,EAC7BD,4BAA4B,EAC5BnC,aAAa,EACbC,UAAU,EACVC,aAAa,EAMd,GAAA;AACC,IAAA,IAAI,CAACiC,4BAA8B,EAAA;AACjC,QAAA,OAAOjC,aAAc,CAAA;YACnBE,EAAI,EAAA,iFAAA;YACJE,cAAgB,EAAA;AAClB,SAAA,CAAA;AACF;AAEA,IAAA,IAAIN,aAAiBA,IAAAA,aAAAA,CAAcI,EAAE,KAAKH,YAAYG,EAAI,EAAA;AACxD,QAAA,OAAOF,aACL,CAAA;YACEE,EAAI,EAAA,+EAAA;YACJE,cAAgB,EAAA;SAElB,EAAA;AACE+B,YAAAA,SAAAA,EAAWrC,eAAesC,IAAQ,IAAA;AACpC,SAAA,CAAA;AAEJ;AAEA,IAAA,IAAItC,aAAiBA,IAAAA,aAAAA,CAAcI,EAAE,KAAKH,YAAYG,EAAI,EAAA;AACxD,QAAA,OAAOF,aACL,CAAA;YACEE,EAAI,EAAA,2EAAA;YACJE,cAAgB,EAAA;SAElB,EAAA;AACE+B,YAAAA,SAAAA,EAAWrC,eAAesC,IAAQ,IAAA;AACpC,SAAA,CAAA;AAEJ;AAEA,IAAA,OAAOpC,aAAc,CAAA;QACnBE,EAAI,EAAA,wFAAA;QACJE,cAAgB,EAAA;AAClB,KAAA,CAAA;AACF,CAAA;AAEA,MAAMiC,qBAAAA,GAAwB,CAAC,EAC7BJ,4BAA4B,EAC5BnC,aAAa,EACbC,UAAU,EAKX,GAAA;IACC,MAAM,EAAEC,aAAa,EAAE,GAAGC,iBAAAA,EAAAA;AAE1B,IAAA,MAAMqC,OAAON,kBAAmB,CAAA;AAC9BC,QAAAA,4BAAAA;AACAnC,QAAAA,aAAAA;AACAC,QAAAA;AACF,KAAA,CAAA;AAEA,IAAA,qBACEV,eAAChB,CAAAA,iBAAAA,EAAAA;QAAKwC,SAAU,EAAA,QAAA;QAASvB,GAAK,EAAA,CAAA;QAAGwB,KAAM,EAAA,MAAA;QAAOC,OAAS,EAAA,CAAA;;0BACrD1B,eAAChB,CAAAA,iBAAAA,EAAAA;gBAAKiB,GAAK,EAAA,CAAA;gBAAGwB,KAAM,EAAA,MAAA;;kCAClBhC,cAACS,CAAAA,uBAAAA,EAAAA;wBAAWE,UAAW,EAAA,MAAA;kCACpBO,aAAc,CAAA;4BACbE,EAAI,EAAA,qEAAA;4BACJE,cAAgB,EAAA;AAClB,yBAAA;;AAEDkC,oBAAAA;;;0BAEHxD,cAACS,CAAAA,uBAAAA,EAAAA;gBAAWC,SAAU,EAAA,YAAA;0BACnB0C,qBAAsB,CAAA;AACrBD,oBAAAA,4BAAAA;AACAnC,oBAAAA,aAAAA;AACAC,oBAAAA,UAAAA;AACAC,oBAAAA;AACF,iBAAA;;;;AAIR,CAAA;AAEO,MAAMuC,sBAAyB,GAAA,CAAC,EACrCC,MAAM,EACNC,KAAK,EACL7C,MAAM,EACND,MAAM,EACsB,GAAA;AAC5B,IAAA,MAAM,EAAE+C,QAAQ,EAAEC,SAAS,EAAE,GAAGC,gCAC9B,CAAA;AACEC,QAAAA,cAAAA,EAAgBL,QAAQ/B,IAAQ,IAAA,EAAA;AAChCqC,QAAAA,KAAAA,EAAON,QAAQO,GAAO,IAAA;KAExB,EAAA;;QAEEC,IAAM,EAAA;AACR,KAAA,CAAA;;IAIF,MAAMxC,MAAAA,GAASmC,SAAY,GAAA,IAAA,GAAOD,QAASD,CAAAA,KAAAA,CAAAA;IAC3C,MAAM5C,SAAAA,GAAYW,SAASS,MAAOC,CAAAA,IAAI,CAACV,MAAQW,CAAAA,CAAAA,MAAM,GAAG,CAAI,GAAA,KAAA;;IAG5D,MAAMc,4BAAAA,GAA+BO,QAAQS,iBAAqB,IAAA,KAAA;AAClE,IAAA,MAAMnD,gBAAgB0C,MAAQU,EAAAA,sBAAAA;IAC9B,MAAMnD,UAAAA,GAAa0C,MAAMU,YAAY;AAErC,IAAA,IAAIR,SAAW,EAAA;QACb,OAAO,IAAA;AACT;IAEA,qBACEtD,eAAA,CAACN,qBAAQqE,IAAI,EAAA;;0BACXtE,cAACY,CAAAA,kBAAAA,EAAAA;gBACCC,MAAQA,EAAAA,MAAAA;gBACRC,MAAQA,EAAAA,MAAAA;gBACRC,SAAWA,EAAAA,SAAAA;gBACXC,aAAeA,EAAAA,aAAAA;gBACfC,UAAYA,EAAAA;;AAEd,0BAAAjB,cAAA,CAACC,qBAAQsE,OAAO,EAAA;AACd,gBAAA,QAAA,gBAAAhE,eAAClB,CAAAA,iBAAAA,EAAAA;oBAAkB0C,SAAU,EAAA,QAAA;;sCAC3B/B,cAACyB,CAAAA,gBAAAA,EAAAA;4BACCV,SAAWA,EAAAA,SAAAA;4BACXW,MAAQA,EAAAA,MAAAA;AACRE,4BAAAA,cAAAA,EAAgB8B,MAAQO,EAAAA,GAAAA;AACxBtC,4BAAAA,IAAAA,EAAM+B,MAAQ/B,EAAAA,IAAAA;AACdE,4BAAAA,UAAAA,EAAY8B,MAAM9B,UAAU;AAC5BC,4BAAAA,MAAAA,EAAQ6B,MAAM7B;;sCAEhB9B,cAACuD,CAAAA,qBAAAA,EAAAA;4BACCJ,4BAA8BA,EAAAA,4BAAAA;4BAC9BnC,aAAeA,EAAAA,aAAAA;4BACfC,UAAYA,EAAAA;;;;;;;AAMxB;;;;"}