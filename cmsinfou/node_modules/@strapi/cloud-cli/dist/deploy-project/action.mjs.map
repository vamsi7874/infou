{"version":3,"file":"action.mjs","sources":["../../src/deploy-project/action.ts"],"sourcesContent":["import fse from 'fs-extra';\nimport inquirer from 'inquirer';\nimport boxen from 'boxen';\nimport path from 'path';\nimport chalk from 'chalk';\nimport { AxiosError } from 'axios';\nimport * as crypto from 'node:crypto';\nimport { apiConfig } from '../config/api';\nimport { compressFilesToTar } from '../utils/compress-files';\nimport createProjectAction from '../create-project/action';\nimport type {\n  CLIContext,\n  CloudApiService,\n  CloudCliConfig,\n  EnvironmentDetails,\n  ProjectInfo,\n} from '../types';\nimport { getTmpStoragePath } from '../config/local';\nimport { cloudApiFactory, tokenServiceFactory, local } from '../services';\nimport { VERSION } from '../services/cli-api';\nimport { notificationServiceFactory } from '../services/notification';\nimport { loadPkg } from '../utils/pkg';\nimport { buildLogsServiceFactory } from '../services/build-logs';\nimport { promptLogin } from '../login/action';\nimport { trackEvent } from '../utils/analytics';\nimport {\n  environmentCreationErrorFactory,\n  environmentErrorMessageFactory,\n} from '../utils/error-message-factories';\n\ntype PackageJson = {\n  name: string;\n  strapi?: {\n    uuid: string;\n  };\n};\n\ninterface CmdOptions {\n  env?: string;\n  force?: boolean;\n}\n\nconst boxenOptions: boxen.Options = {\n  padding: 1,\n  margin: 1,\n  align: 'center',\n  borderColor: 'yellow',\n  borderStyle: 'round',\n};\n\nconst QUIT_OPTION = 'Quit';\n\nasync function promptForEnvironment(environments: string[]): Promise<string> {\n  const choices = environments.map((env) => ({ name: env, value: env }));\n  const { selectedEnvironment } = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'selectedEnvironment',\n      message: 'Select the environment to deploy:',\n      choices: [...choices, { name: chalk.grey(`(${QUIT_OPTION})`), value: null }],\n    },\n  ]);\n  if (selectedEnvironment === null) {\n    process.exit(1);\n  }\n\n  return selectedEnvironment;\n}\n\nasync function upload(\n  ctx: CLIContext,\n  project: Omit<ProjectInfo, 'id'>,\n  cliConfig: CloudCliConfig,\n  token: string,\n  maxProjectFileSize: number\n) {\n  const cloudApi = await cloudApiFactory(ctx, token);\n  try {\n    const storagePath = await getTmpStoragePath();\n    const projectFolder = path.resolve(process.cwd());\n    const packageJson = (await loadPkg(ctx)) as PackageJson;\n\n    if (!packageJson) {\n      ctx.logger.error(\n        'Unable to deploy the project. Please make sure the package.json file is correctly formatted.'\n      );\n      return;\n    }\n\n    const compressSpinner = ctx.logger.spinner('Compressing project...').start();\n    compressSpinner.indent = 1;\n    // hash packageJson.name to avoid conflicts\n    const hashname = crypto.createHash('sha512').update(packageJson.name).digest('hex');\n    const compressedFilename = `${hashname}.tar.gz`;\n    try {\n      ctx.logger.debug(\n        'Compression parameters\\n',\n        `Storage path: ${storagePath}\\n`,\n        `Project folder: ${projectFolder}\\n`,\n        `Compressed filename: ${compressedFilename}`\n      );\n      await compressFilesToTar(storagePath, projectFolder, compressedFilename);\n      compressSpinner.succeed(`Project compressed successfully!`);\n    } catch (e: unknown) {\n      compressSpinner.fail(\n        'Project compression failed. Try again later or check for large/incompatible files.'\n      );\n      ctx.logger.debug(e);\n      process.exit(1);\n    }\n\n    const tarFilePath = path.resolve(storagePath, compressedFilename);\n    const fileStats = await fse.stat(tarFilePath);\n\n    if (fileStats.size > maxProjectFileSize) {\n      ctx.logger.log(\n        'Unable to proceed: Your project is too big to be transferred, please use a git repo instead.'\n      );\n      try {\n        await fse.remove(tarFilePath);\n      } catch (e: any) {\n        ctx.logger.log('Unable to remove file: ', tarFilePath);\n        ctx.logger.debug(e);\n      }\n      return;\n    }\n\n    const progressBar = ctx.logger.progressBar(100, ' ∷ Uploading project');\n\n    try {\n      const { data } = await cloudApi.deploy(\n        { filePath: tarFilePath, project },\n        {\n          onUploadProgress(progressEvent) {\n            const total = progressEvent.total || fileStats.size;\n            const percentage = Math.round((progressEvent.loaded * 100) / total);\n            progressBar.update(percentage);\n          },\n        }\n      );\n\n      progressBar.update(100);\n      progressBar.stop();\n      ctx.logger.log(`${chalk.green.bold('✔')} Upload finished!\\n`);\n      return data.build_id;\n    } catch (e: any) {\n      progressBar.stop();\n      await handleUploadError(ctx, e, project, cliConfig);\n    } finally {\n      await fse.remove(tarFilePath);\n    }\n    process.exit(0);\n  } catch (e: any) {\n    ctx.logger.error('An error occurred while deploying the project. Please try again later.');\n    ctx.logger.debug(e);\n    process.exit(1);\n  }\n}\n\nasync function handleUploadError(\n  ctx: CLIContext,\n  error: any,\n  project: any,\n  cliConfig: CloudCliConfig\n) {\n  const { logger } = ctx;\n  logger.debug(error);\n\n  if (error.response?.status) {\n    switch (error.response.status) {\n      case 405: {\n        const environmentErrorMessage = environmentErrorMessageFactory({\n          projectName: project.name,\n          firstLine: cliConfig.projectDeployment.errors.environmentNotReady.firstLine,\n          secondLine: cliConfig.projectDeployment.errors.environmentNotReady.secondLine,\n        });\n        logger.log(environmentCreationErrorFactory(environmentErrorMessage));\n        return;\n      }\n      case 413:\n        logger.error(\n          'The project you are trying to upload is too big. Please remove unnecessary files and try again.'\n        );\n        return;\n      default:\n        break;\n    }\n  }\n  logger.error('An error occurred while deploying the project. Please try again later.');\n}\n\nasync function getProject(ctx: CLIContext) {\n  const { project } = await local.retrieve();\n  if (!project) {\n    try {\n      const projectResponse = await createProjectAction(ctx);\n      if (projectResponse) {\n        const { project: projectSaved } = await local.retrieve();\n        return projectSaved;\n      }\n    } catch (e: any) {\n      ctx.logger.error('An error occurred while deploying the project. Please try again later.');\n      ctx.logger.debug(e);\n      process.exit(1);\n    }\n  }\n  return project;\n}\n\nasync function getConfig({\n  ctx,\n  cloudApiService,\n}: {\n  ctx: CLIContext;\n  cloudApiService: CloudApiService;\n}): Promise<CloudCliConfig | null> {\n  try {\n    const { data: cliConfig } = await cloudApiService.config();\n    return cliConfig;\n  } catch (e) {\n    ctx.logger.debug('Failed to get cli config', e);\n    return null;\n  }\n}\n\nfunction validateEnvironment(ctx: CLIContext, environment: string, environments: string[]): void {\n  if (!environments.includes(environment)) {\n    ctx.logger.error(`Environment ${environment} does not exist.`);\n    process.exit(1);\n  }\n}\n\nasync function getTargetEnvironment(\n  ctx: CLIContext,\n  opts: CmdOptions,\n  project: Omit<ProjectInfo, 'id'>,\n  environments: string[]\n): Promise<string> {\n  if (opts.env) {\n    validateEnvironment(ctx, opts.env, environments);\n    return opts.env;\n  }\n\n  if (project.targetEnvironment) {\n    return project.targetEnvironment;\n  }\n\n  if (environments.length > 1) {\n    return promptForEnvironment(environments);\n  }\n\n  return environments[0];\n}\n\nfunction hasPendingOrLiveDeployment(\n  environments: EnvironmentDetails[],\n  targetEnvironment: string\n): boolean {\n  const environment = environments.find((env) => env.name === targetEnvironment);\n  if (!environment) {\n    throw new Error(`Environment details ${targetEnvironment} not found.`);\n  }\n  return environment.hasPendingDeployment || environment.hasLiveDeployment || false;\n}\n\nexport default async (ctx: CLIContext, opts: CmdOptions) => {\n  const { getValidToken } = await tokenServiceFactory(ctx);\n  const token = await getValidToken(ctx, promptLogin);\n  if (!token) {\n    return;\n  }\n\n  const project = await getProject(ctx);\n  if (!project) {\n    process.exit(1);\n  }\n\n  const cloudApiService = await cloudApiFactory(ctx, token);\n  let projectData;\n  let environments: string[];\n  let environmentsDetails: EnvironmentDetails[];\n\n  try {\n    const {\n      data: { data, metadata },\n    } = await cloudApiService.getProject({ name: project.name });\n    projectData = data;\n    environments = projectData.environments;\n    environmentsDetails = projectData.environmentsDetails;\n    const isProjectSuspended = projectData.suspendedAt;\n\n    if (isProjectSuspended) {\n      ctx.logger.log(\n        '\\n Oops! This project has been suspended. \\n\\n Please reactivate it from the dashboard to continue deploying: '\n      );\n      ctx.logger.log(chalk.underline(`${metadata.dashboardUrls.project}`));\n      return;\n    }\n  } catch (e: Error | unknown) {\n    if (e instanceof AxiosError && e.response?.data) {\n      if (e.response.status === 404) {\n        ctx.logger.warn(\n          `The project associated with this folder does not exist in Strapi Cloud. \\nPlease link your local project to an existing Strapi Cloud project using the ${chalk.cyan(\n            'link'\n          )} command before deploying.`\n        );\n      } else {\n        ctx.logger.error(e.response.data);\n      }\n    } else {\n      ctx.logger.error(\n        \"An error occurred while retrieving the project's information. Please try again later.\"\n      );\n    }\n    ctx.logger.debug(e);\n    return;\n  }\n\n  await trackEvent(ctx, cloudApiService, 'willDeployWithCLI', {\n    projectInternalName: project.name,\n  });\n\n  const notificationService = notificationServiceFactory(ctx);\n  const buildLogsService = buildLogsServiceFactory(ctx);\n\n  const cliConfig = await getConfig({ ctx, cloudApiService });\n  if (!cliConfig) {\n    ctx.logger.error(\n      'An error occurred while retrieving data from Strapi Cloud. Please check your network or try again later.'\n    );\n    return;\n  }\n\n  let maxSize: number = parseInt(cliConfig.maxProjectFileSize, 10);\n  if (Number.isNaN(maxSize)) {\n    ctx.logger.debug(\n      'An error occurred while parsing the maxProjectFileSize. Using default value.'\n    );\n    maxSize = 100000000;\n  }\n\n  project.targetEnvironment = await getTargetEnvironment(ctx, opts, project, environments);\n\n  if (!opts.force) {\n    const shouldDisplayWarning = hasPendingOrLiveDeployment(\n      environmentsDetails,\n      project.targetEnvironment\n    );\n    if (shouldDisplayWarning) {\n      ctx.logger.log(boxen(cliConfig.projectDeployment.confirmationText, boxenOptions));\n      const { confirm } = await inquirer.prompt([\n        {\n          type: 'confirm',\n          name: 'confirm',\n          message: `Do you want to proceed with deployment to ${chalk.cyan(projectData.displayName)} on ${chalk.cyan(project.targetEnvironment)} environment?`,\n        },\n      ]);\n      if (!confirm) {\n        process.exit(1);\n      }\n    }\n  }\n\n  const buildId = await upload(ctx, project, cliConfig, token, maxSize);\n\n  if (!buildId) {\n    return;\n  }\n\n  let notifications: ReturnType<typeof notificationService> | null = null;\n\n  try {\n    ctx.logger.log(\n      `∷ Deploying project to ${chalk.cyan(project.targetEnvironment ?? `production`)} environment...`\n    );\n\n    notifications = notificationService(\n      `${apiConfig.apiBaseUrl}/${VERSION}/notifications`,\n      token,\n      cliConfig\n    );\n\n    await buildLogsService(`${apiConfig.apiBaseUrl}/${VERSION}/logs/${buildId}`, token, cliConfig);\n    const dashboardUrlLine =\n      chalk.cyan(' →  ') +\n      chalk.cyan.underline(`${apiConfig.dashboardBaseUrl}/projects/${project.name}/deployments`);\n    ctx.logger.log(\n      boxen(`Project and deployment logs ready at:\\n${dashboardUrlLine}`, {\n        padding: 1,\n        margin: 1,\n        borderStyle: 'round',\n        borderColor: 'white',\n        titleAlignment: 'left',\n      })\n    );\n  } catch (e: Error | unknown) {\n    ctx.logger.debug(e);\n    if (e instanceof Error) {\n      ctx.logger.error(e.message);\n    } else {\n      ctx.logger.error('An error occurred while deploying the project. Please try again later.');\n    }\n  } finally {\n    if (notifications) {\n      notifications.close();\n    }\n  }\n};\n"],"names":["boxenOptions","padding","margin","align","borderColor","borderStyle","QUIT_OPTION","promptForEnvironment","environments","choices","map","env","name","value","selectedEnvironment","inquirer","prompt","type","message","chalk","grey","process","exit","upload","ctx","project","cliConfig","token","maxProjectFileSize","cloudApi","cloudApiFactory","storagePath","getTmpStoragePath","projectFolder","path","resolve","cwd","packageJson","loadPkg","logger","error","compressSpinner","spinner","start","indent","hashname","crypto","createHash","update","digest","compressedFilename","debug","compressFilesToTar","succeed","e","fail","tarFilePath","fileStats","fse","stat","size","log","remove","progressBar","data","deploy","filePath","onUploadProgress","progressEvent","total","percentage","Math","round","loaded","stop","green","bold","build_id","handleUploadError","response","status","environmentErrorMessage","environmentErrorMessageFactory","projectName","firstLine","projectDeployment","errors","environmentNotReady","secondLine","environmentCreationErrorFactory","getProject","local","projectResponse","createProjectAction","projectSaved","getConfig","cloudApiService","config","validateEnvironment","environment","includes","getTargetEnvironment","opts","targetEnvironment","length","hasPendingOrLiveDeployment","find","Error","hasPendingDeployment","hasLiveDeployment","getValidToken","tokenServiceFactory","promptLogin","projectData","environmentsDetails","metadata","isProjectSuspended","suspendedAt","underline","dashboardUrls","AxiosError","warn","cyan","trackEvent","projectInternalName","notificationService","notificationServiceFactory","buildLogsService","buildLogsServiceFactory","maxSize","parseInt","Number","isNaN","force","shouldDisplayWarning","boxen","confirmationText","confirm","displayName","buildId","notifications","apiConfig","apiBaseUrl","VERSION","dashboardUrlLine","dashboardBaseUrl","titleAlignment","close"],"mappings":"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"}