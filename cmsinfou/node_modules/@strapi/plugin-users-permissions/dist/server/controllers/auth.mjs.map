{"version":3,"file":"auth.mjs","sources":["../../../server/controllers/auth.js"],"sourcesContent":["'use strict';\n\n/**\n * Auth.js controller\n *\n * @description: A set of functions called \"actions\" for managing `Auth`.\n */\n\n/* eslint-disable no-useless-escape */\nconst crypto = require('crypto');\nconst _ = require('lodash');\nconst { concat, compact, isArray } = require('lodash/fp');\nconst utils = require('@strapi/utils');\nconst { getService } = require('../utils');\nconst {\n  validateCallbackBody,\n  validateRegisterBody,\n  validateSendEmailConfirmationBody,\n  validateForgotPasswordBody,\n  validateResetPasswordBody,\n  validateEmailConfirmationBody,\n  validateChangePasswordBody,\n} = require('./validation/auth');\n\nconst { ApplicationError, ValidationError, ForbiddenError } = utils.errors;\n\nconst sanitizeUser = (user, ctx) => {\n  const { auth } = ctx.state;\n  const userSchema = strapi.getModel('plugin::users-permissions.user');\n\n  return strapi.contentAPI.sanitize.output(user, userSchema, { auth });\n};\n\nconst extractDeviceId = (requestBody) => {\n  const { deviceId } = requestBody || {};\n\n  return typeof deviceId === 'string' && deviceId.length > 0 ? deviceId : undefined;\n};\n\nmodule.exports = ({ strapi }) => ({\n  async callback(ctx) {\n    const provider = ctx.params.provider || 'local';\n    const params = ctx.request.body;\n\n    const store = strapi.store({ type: 'plugin', name: 'users-permissions' });\n    const grantSettings = await store.get({ key: 'grant' });\n\n    const grantProvider = provider === 'local' ? 'email' : provider;\n\n    if (!_.get(grantSettings, [grantProvider, 'enabled'])) {\n      throw new ApplicationError('This provider is disabled');\n    }\n\n    if (provider === 'local') {\n      await validateCallbackBody(params);\n\n      const { identifier } = params;\n\n      // Check if the user exists.\n      const user = await strapi.db.query('plugin::users-permissions.user').findOne({\n        where: {\n          provider,\n          $or: [{ email: identifier.toLowerCase() }, { username: identifier }],\n        },\n      });\n\n      if (!user) {\n        throw new ValidationError('Invalid identifier or password');\n      }\n\n      if (!user.password) {\n        throw new ValidationError('Invalid identifier or password');\n      }\n\n      const validPassword = await getService('user').validatePassword(\n        params.password,\n        user.password\n      );\n\n      if (!validPassword) {\n        throw new ValidationError('Invalid identifier or password');\n      }\n\n      const advancedSettings = await store.get({ key: 'advanced' });\n      const requiresConfirmation = _.get(advancedSettings, 'email_confirmation');\n\n      if (requiresConfirmation && user.confirmed !== true) {\n        throw new ApplicationError('Your account email is not confirmed');\n      }\n\n      if (user.blocked === true) {\n        throw new ApplicationError('Your account has been blocked by an administrator');\n      }\n\n      const mode = strapi.config.get('plugin::users-permissions.jwtManagement', 'legacy-support');\n      if (mode === 'refresh') {\n        const deviceId = extractDeviceId(ctx.request.body);\n\n        const refresh = await strapi\n          .sessionManager('users-permissions')\n          .generateRefreshToken(String(user.id), deviceId, { type: 'refresh' });\n\n        const access = await strapi\n          .sessionManager('users-permissions')\n          .generateAccessToken(refresh.token);\n        if ('error' in access) {\n          throw new ApplicationError('Invalid credentials');\n        }\n\n        const upSessions = strapi.config.get('plugin::users-permissions.sessions');\n        const requestHttpOnly = ctx.request.header['x-strapi-refresh-cookie'] === 'httpOnly';\n        if (upSessions?.httpOnly || requestHttpOnly) {\n          const cookieName = upSessions.cookie?.name || 'strapi_up_refresh';\n          const cookieOptions = {\n            httpOnly: true,\n            secure: Boolean(upSessions.cookie?.secure),\n            sameSite: upSessions.cookie?.sameSite ?? 'lax',\n            path: upSessions.cookie?.path ?? '/',\n            domain: upSessions.cookie?.domain,\n            overwrite: true,\n          };\n\n          ctx.cookies.set(cookieName, refresh.token, cookieOptions);\n          return ctx.send({ jwt: access.token, user: await sanitizeUser(user, ctx) });\n        }\n\n        return ctx.send({\n          jwt: access.token,\n          refreshToken: refresh.token,\n          user: await sanitizeUser(user, ctx),\n        });\n      }\n\n      return ctx.send({\n        jwt: getService('jwt').issue({ id: user.id }),\n        user: await sanitizeUser(user, ctx),\n      });\n    }\n\n    // Connect the user with the third-party provider.\n    try {\n      const user = await getService('providers').connect(provider, ctx.query);\n\n      if (user.blocked) {\n        throw new ForbiddenError('Your account has been blocked by an administrator');\n      }\n\n      const mode = strapi.config.get('plugin::users-permissions.jwtManagement', 'legacy-support');\n      if (mode === 'refresh') {\n        const deviceId = extractDeviceId(ctx.request.body);\n\n        const refresh = await strapi\n          .sessionManager('users-permissions')\n          .generateRefreshToken(String(user.id), deviceId, { type: 'refresh' });\n\n        const access = await strapi\n          .sessionManager('users-permissions')\n          .generateAccessToken(refresh.token);\n        if ('error' in access) {\n          throw new ApplicationError('Invalid credentials');\n        }\n\n        const upSessions = strapi.config.get('plugin::users-permissions.sessions');\n        const requestHttpOnly = ctx.request.header['x-strapi-refresh-cookie'] === 'httpOnly';\n        if (upSessions?.httpOnly || requestHttpOnly) {\n          const cookieName = upSessions.cookie?.name || 'strapi_up_refresh';\n          const cookieOptions = {\n            httpOnly: true,\n            secure: Boolean(upSessions.cookie?.secure),\n            sameSite: upSessions.cookie?.sameSite ?? 'lax',\n            path: upSessions.cookie?.path ?? '/',\n            domain: upSessions.cookie?.domain,\n            overwrite: true,\n          };\n          ctx.cookies.set(cookieName, refresh.token, cookieOptions);\n          return ctx.send({ jwt: access.token, user: await sanitizeUser(user, ctx) });\n        }\n        return ctx.send({\n          jwt: access.token,\n          refreshToken: refresh.token,\n          user: await sanitizeUser(user, ctx),\n        });\n      }\n\n      return ctx.send({\n        jwt: getService('jwt').issue({ id: user.id }),\n        user: await sanitizeUser(user, ctx),\n      });\n    } catch (error) {\n      throw new ApplicationError(error.message);\n    }\n  },\n\n  async changePassword(ctx) {\n    if (!ctx.state.user) {\n      throw new ApplicationError('You must be authenticated to reset your password');\n    }\n\n    const validations = strapi.config.get('plugin::users-permissions.validationRules');\n\n    const { currentPassword, password } = await validateChangePasswordBody(\n      ctx.request.body,\n      validations\n    );\n\n    const user = await strapi.db\n      .query('plugin::users-permissions.user')\n      .findOne({ where: { id: ctx.state.user.id } });\n\n    const validPassword = await getService('user').validatePassword(currentPassword, user.password);\n\n    if (!validPassword) {\n      throw new ValidationError('The provided current password is invalid');\n    }\n\n    if (currentPassword === password) {\n      throw new ValidationError('Your new password must be different than your current password');\n    }\n\n    await getService('user').edit(user.id, { password });\n\n    const mode = strapi.config.get('plugin::users-permissions.jwtManagement', 'legacy-support');\n    if (mode === 'refresh') {\n      const deviceId = extractDeviceId(ctx.request.body);\n\n      if (deviceId) {\n        // Invalidate sessions: specific device if deviceId provided\n        await strapi\n          .sessionManager('users-permissions')\n          .invalidateRefreshToken(String(user.id), deviceId);\n      }\n\n      const newDeviceId = deviceId || crypto.randomUUID();\n      const refresh = await strapi\n        .sessionManager('users-permissions')\n        .generateRefreshToken(String(user.id), newDeviceId, { type: 'refresh' });\n\n      const access = await strapi\n        .sessionManager('users-permissions')\n        .generateAccessToken(refresh.token);\n      if ('error' in access) {\n        throw new ApplicationError('Invalid credentials');\n      }\n\n      return ctx.send({\n        jwt: access.token,\n        refreshToken: refresh.token,\n        user: await sanitizeUser(user, ctx),\n      });\n    }\n\n    return ctx.send({\n      jwt: getService('jwt').issue({ id: user.id }),\n      user: await sanitizeUser(user, ctx),\n    });\n  },\n\n  async resetPassword(ctx) {\n    const validations = strapi.config.get('plugin::users-permissions.validationRules');\n\n    const { password, passwordConfirmation, code } = await validateResetPasswordBody(\n      ctx.request.body,\n      validations\n    );\n\n    if (password !== passwordConfirmation) {\n      throw new ValidationError('Passwords do not match');\n    }\n\n    const user = await strapi.db\n      .query('plugin::users-permissions.user')\n      .findOne({ where: { resetPasswordToken: code } });\n\n    if (!user) {\n      throw new ValidationError('Incorrect code provided');\n    }\n\n    await getService('user').edit(user.id, {\n      resetPasswordToken: null,\n      password,\n    });\n\n    const mode = strapi.config.get('plugin::users-permissions.jwtManagement', 'legacy-support');\n    if (mode === 'refresh') {\n      const deviceId = extractDeviceId(ctx.request.body);\n\n      if (deviceId) {\n        // Invalidate sessions: specific device if deviceId provided\n        await strapi\n          .sessionManager('users-permissions')\n          .invalidateRefreshToken(String(user.id), deviceId);\n      }\n\n      const newDeviceId = deviceId || crypto.randomUUID();\n      const refresh = await strapi\n        .sessionManager('users-permissions')\n        .generateRefreshToken(String(user.id), newDeviceId, { type: 'refresh' });\n\n      const access = await strapi\n        .sessionManager('users-permissions')\n        .generateAccessToken(refresh.token);\n      if ('error' in access) {\n        throw new ApplicationError('Invalid credentials');\n      }\n\n      return ctx.send({\n        jwt: access.token,\n        refreshToken: refresh.token,\n        user: await sanitizeUser(user, ctx),\n      });\n    }\n\n    return ctx.send({\n      jwt: getService('jwt').issue({ id: user.id }),\n      user: await sanitizeUser(user, ctx),\n    });\n  },\n  async refresh(ctx) {\n    const mode = strapi.config.get('plugin::users-permissions.jwtManagement', 'legacy-support');\n    if (mode !== 'refresh') {\n      return ctx.notFound();\n    }\n\n    const { refreshToken } = ctx.request.body || {};\n    if (!refreshToken || typeof refreshToken !== 'string') {\n      return ctx.badRequest('Missing refresh token');\n    }\n\n    const rotation = await strapi\n      .sessionManager('users-permissions')\n      .rotateRefreshToken(refreshToken);\n    if ('error' in rotation) {\n      return ctx.unauthorized('Invalid refresh token');\n    }\n\n    const result = await strapi\n      .sessionManager('users-permissions')\n      .generateAccessToken(rotation.token);\n    if ('error' in result) {\n      return ctx.unauthorized('Invalid refresh token');\n    }\n\n    const upSessions = strapi.config.get('plugin::users-permissions.sessions');\n    const requestHttpOnly = ctx.request.header['x-strapi-refresh-cookie'] === 'httpOnly';\n    if (upSessions?.httpOnly || requestHttpOnly) {\n      const cookieName = upSessions.cookie?.name || 'strapi_up_refresh';\n      const cookieOptions = {\n        httpOnly: true,\n        secure: Boolean(upSessions.cookie?.secure),\n        sameSite: upSessions.cookie?.sameSite ?? 'lax',\n        path: upSessions.cookie?.path ?? '/',\n        domain: upSessions.cookie?.domain,\n        overwrite: true,\n      };\n      ctx.cookies.set(cookieName, rotation.token, cookieOptions);\n      return ctx.send({ jwt: result.token });\n    }\n    return ctx.send({ jwt: result.token, refreshToken: rotation.token });\n  },\n  async logout(ctx) {\n    const mode = strapi.config.get('plugin::users-permissions.jwtManagement', 'legacy-support');\n    if (mode !== 'refresh') {\n      return ctx.notFound();\n    }\n\n    // Invalidate all sessions for the authenticated user, or by deviceId if provided\n    if (!ctx.state.user) {\n      return ctx.unauthorized('Missing authentication');\n    }\n\n    const deviceId = extractDeviceId(ctx.request.body);\n    try {\n      await strapi\n        .sessionManager('users-permissions')\n        .invalidateRefreshToken(String(ctx.state.user.id), deviceId);\n    } catch (err) {\n      strapi.log.error('UP logout failed', err);\n    }\n\n    const upSessions = strapi.config.get('plugin::users-permissions.sessions');\n    const requestHttpOnly = ctx.request.header['x-strapi-refresh-cookie'] === 'httpOnly';\n    if (upSessions?.httpOnly || requestHttpOnly) {\n      const cookieName = upSessions.cookie?.name || 'strapi_up_refresh';\n      ctx.cookies.set(cookieName, '', { expires: new Date(0) });\n    }\n    return ctx.send({ ok: true });\n  },\n  async connect(ctx, next) {\n    const grant = require('grant').koa();\n\n    const providers = await strapi\n      .store({ type: 'plugin', name: 'users-permissions', key: 'grant' })\n      .get();\n\n    const apiPrefix = strapi.config.get('api.rest.prefix');\n    const grantConfig = {\n      defaults: {\n        prefix: `${apiPrefix}/connect`,\n      },\n      ...providers,\n    };\n\n    const [requestPath] = ctx.request.url.split('?');\n    const provider = requestPath.split('/connect/')[1].split('/')[0];\n\n    if (!_.get(grantConfig[provider], 'enabled')) {\n      throw new ApplicationError('This provider is disabled');\n    }\n\n    if (!strapi.config.server.url.startsWith('http')) {\n      strapi.log.warn(\n        'You are using a third party provider for login. Make sure to set an absolute url in config/server.js. More info here: https://docs.strapi.io/developer-docs/latest/plugins/users-permissions.html#setting-up-the-server-url'\n      );\n    }\n\n    // Ability to pass OAuth callback dynamically\n    const queryCustomCallback = _.get(ctx, 'query.callback');\n    const dynamicSessionCallback = _.get(ctx, 'session.grant.dynamic.callback');\n\n    const customCallback = queryCustomCallback ?? dynamicSessionCallback;\n\n    // The custom callback is validated to make sure it's not redirecting to an unwanted actor.\n    if (customCallback !== undefined) {\n      try {\n        // We're extracting the callback validator from the plugin config since it can be user-customized\n        const { validate: validateCallback } = strapi\n          .plugin('users-permissions')\n          .config('callback');\n\n        await validateCallback(customCallback, grantConfig[provider]);\n\n        grantConfig[provider].callback = customCallback;\n      } catch (e) {\n        throw new ValidationError('Invalid callback URL provided', { callback: customCallback });\n      }\n    }\n\n    // Build a valid redirect URI for the current provider\n    grantConfig[provider].redirect_uri = getService('providers').buildRedirectUri(provider);\n\n    return grant(grantConfig)(ctx, next);\n  },\n\n  async forgotPassword(ctx) {\n    const { email } = await validateForgotPasswordBody(ctx.request.body);\n\n    const pluginStore = await strapi.store({ type: 'plugin', name: 'users-permissions' });\n\n    const emailSettings = await pluginStore.get({ key: 'email' });\n    const advancedSettings = await pluginStore.get({ key: 'advanced' });\n\n    // Find the user by email.\n    const user = await strapi.db\n      .query('plugin::users-permissions.user')\n      .findOne({ where: { email: email.toLowerCase() } });\n\n    if (!user || user.blocked) {\n      return ctx.send({ ok: true });\n    }\n\n    // Generate random token.\n    const userInfo = await sanitizeUser(user, ctx);\n\n    const resetPasswordToken = crypto.randomBytes(64).toString('hex');\n\n    const resetPasswordSettings = _.get(emailSettings, 'reset_password.options', {});\n    const emailBody = await getService('users-permissions').template(\n      resetPasswordSettings.message,\n      {\n        URL: advancedSettings.email_reset_password,\n        SERVER_URL: strapi.config.get('server.absoluteUrl'),\n        ADMIN_URL: strapi.config.get('admin.absoluteUrl'),\n        USER: userInfo,\n        TOKEN: resetPasswordToken,\n      }\n    );\n\n    const emailObject = await getService('users-permissions').template(\n      resetPasswordSettings.object,\n      {\n        USER: userInfo,\n      }\n    );\n\n    const emailToSend = {\n      to: user.email,\n      from:\n        resetPasswordSettings.from.email || resetPasswordSettings.from.name\n          ? `${resetPasswordSettings.from.name} <${resetPasswordSettings.from.email}>`\n          : undefined,\n      replyTo: resetPasswordSettings.response_email,\n      subject: emailObject,\n      text: emailBody,\n      html: emailBody,\n    };\n\n    // NOTE: Update the user before sending the email so an Admin can generate the link if the email fails\n    await getService('user').edit(user.id, { resetPasswordToken });\n\n    // Send an email to the user.\n    await strapi.plugin('email').service('email').send(emailToSend);\n\n    ctx.send({ ok: true });\n  },\n\n  async register(ctx) {\n    const pluginStore = await strapi.store({ type: 'plugin', name: 'users-permissions' });\n\n    const settings = await pluginStore.get({ key: 'advanced' });\n\n    if (!settings.allow_register) {\n      throw new ApplicationError('Register action is currently disabled');\n    }\n\n    const { register } = strapi.config.get('plugin::users-permissions');\n    const alwaysAllowedKeys = ['username', 'password', 'email'];\n\n    // Note that we intentionally do not filter allowedFields to allow a project to explicitly accept private or other Strapi field on registration\n    const allowedKeys = compact(\n      concat(alwaysAllowedKeys, isArray(register?.allowedFields) ? register.allowedFields : [])\n    );\n\n    // Check if there are any keys in requestBody that are not in allowedKeys\n    const invalidKeys = Object.keys(ctx.request.body).filter((key) => !allowedKeys.includes(key));\n\n    if (invalidKeys.length > 0) {\n      // If there are invalid keys, throw an error\n      throw new ValidationError(`Invalid parameters: ${invalidKeys.join(', ')}`);\n    }\n\n    const params = {\n      ..._.pick(ctx.request.body, allowedKeys),\n      provider: 'local',\n    };\n\n    const validations = strapi.config.get('plugin::users-permissions.validationRules');\n\n    await validateRegisterBody(params, validations);\n\n    const role = await strapi.db\n      .query('plugin::users-permissions.role')\n      .findOne({ where: { type: settings.default_role } });\n\n    if (!role) {\n      throw new ApplicationError('Impossible to find the default role');\n    }\n\n    const { email, username, provider } = params;\n\n    const identifierFilter = {\n      $or: [\n        { email: email.toLowerCase() },\n        { username: email.toLowerCase() },\n        { username },\n        { email: username },\n      ],\n    };\n\n    const conflictingUserCount = await strapi.db.query('plugin::users-permissions.user').count({\n      where: { ...identifierFilter, provider },\n    });\n\n    if (conflictingUserCount > 0) {\n      throw new ApplicationError('Email or Username are already taken');\n    }\n\n    if (settings.unique_email) {\n      const conflictingUserCount = await strapi.db.query('plugin::users-permissions.user').count({\n        where: { ...identifierFilter },\n      });\n\n      if (conflictingUserCount > 0) {\n        throw new ApplicationError('Email or Username are already taken');\n      }\n    }\n\n    const newUser = {\n      ...params,\n      role: role.id,\n      email: email.toLowerCase(),\n      username,\n      confirmed: !settings.email_confirmation,\n    };\n\n    const user = await getService('user').add(newUser);\n\n    const sanitizedUser = await sanitizeUser(user, ctx);\n\n    if (settings.email_confirmation) {\n      try {\n        await getService('user').sendConfirmationEmail(sanitizedUser);\n      } catch (err) {\n        strapi.log.error(err);\n        throw new ApplicationError('Error sending confirmation email');\n      }\n\n      return ctx.send({ user: sanitizedUser });\n    }\n\n    const mode = strapi.config.get('plugin::users-permissions.jwtManagement', 'legacy-support');\n    if (mode === 'refresh') {\n      const deviceId = extractDeviceId(ctx.request.body) || crypto.randomUUID();\n\n      const refresh = await strapi\n        .sessionManager('users-permissions')\n        .generateRefreshToken(String(user.id), deviceId, { type: 'refresh' });\n\n      const access = await strapi\n        .sessionManager('users-permissions')\n        .generateAccessToken(refresh.token);\n      if ('error' in access) {\n        throw new ApplicationError('Invalid credentials');\n      }\n\n      return ctx.send({ jwt: access.token, refreshToken: refresh.token, user: sanitizedUser });\n    }\n\n    const jwt = getService('jwt').issue(_.pick(user, ['id']));\n    return ctx.send({ jwt, user: sanitizedUser });\n  },\n\n  async emailConfirmation(ctx, next, returnUser) {\n    const { confirmation: confirmationToken } = await validateEmailConfirmationBody(ctx.query);\n\n    const userService = getService('user');\n    const jwtService = getService('jwt');\n\n    const [user] = await userService.fetchAll({ filters: { confirmationToken } });\n\n    if (!user) {\n      throw new ValidationError('Invalid token');\n    }\n\n    await userService.edit(user.id, { confirmed: true, confirmationToken: null });\n\n    if (returnUser) {\n      ctx.send({\n        jwt: jwtService.issue({ id: user.id }),\n        user: await sanitizeUser(user, ctx),\n      });\n    } else {\n      const settings = await strapi\n        .store({ type: 'plugin', name: 'users-permissions', key: 'advanced' })\n        .get();\n\n      ctx.redirect(settings.email_confirmation_redirection || '/');\n    }\n  },\n\n  async sendEmailConfirmation(ctx) {\n    const { email } = await validateSendEmailConfirmationBody(ctx.request.body);\n\n    const user = await strapi.db.query('plugin::users-permissions.user').findOne({\n      where: { email: email.toLowerCase() },\n    });\n\n    if (!user) {\n      return ctx.send({ email, sent: true });\n    }\n\n    if (user.confirmed) {\n      throw new ApplicationError('Already confirmed');\n    }\n\n    if (user.blocked) {\n      throw new ApplicationError('User blocked');\n    }\n\n    await getService('user').sendConfirmationEmail(user);\n\n    ctx.send({\n      email: user.email,\n      sent: true,\n    });\n  },\n});\n"],"names":["crypto","require$$0","_","require$$1","concat","compact","isArray","require$$2","utils","require$$3","getService","require$$4","validateCallbackBody","validateRegisterBody","validateSendEmailConfirmationBody","validateForgotPasswordBody","validateResetPasswordBody","validateEmailConfirmationBody","validateChangePasswordBody","require$$5","ApplicationError","ValidationError","ForbiddenError","errors","sanitizeUser","user","ctx","auth","state","userSchema","strapi","getModel","contentAPI","sanitize","output","extractDeviceId","requestBody","deviceId","length","undefined","callback","provider","params","request","body","store","type","name","grantSettings","get","key","grantProvider","identifier","db","query","findOne","where","$or","email","toLowerCase","username","password","validPassword","validatePassword","advancedSettings","requiresConfirmation","confirmed","blocked","mode","config","refresh","sessionManager","generateRefreshToken","String","id","access","generateAccessToken","token","upSessions","requestHttpOnly","header","httpOnly","cookieName","cookie","cookieOptions","secure","Boolean","sameSite","path","domain","overwrite","cookies","set","send","jwt","refreshToken","issue","connect","error","message","changePassword","validations","currentPassword","edit","invalidateRefreshToken","newDeviceId","randomUUID","resetPassword","passwordConfirmation","code","resetPasswordToken","notFound","badRequest","rotation","rotateRefreshToken","unauthorized","result","logout","err","log","expires","Date","ok","next","grant","require$$6","koa","providers","apiPrefix","grantConfig","defaults","prefix","requestPath","url","split","server","startsWith","warn","queryCustomCallback","dynamicSessionCallback","customCallback","validate","validateCallback","plugin","e","redirect_uri","buildRedirectUri","forgotPassword","pluginStore","emailSettings","userInfo","randomBytes","toString","resetPasswordSettings","emailBody","template","URL","email_reset_password","SERVER_URL","ADMIN_URL","USER","TOKEN","emailObject","object","emailToSend","to","from","replyTo","response_email","subject","text","html","service","register","settings","allow_register","alwaysAllowedKeys","allowedKeys","allowedFields","invalidKeys","Object","keys","filter","includes","join","pick","role","default_role","identifierFilter","conflictingUserCount","count","unique_email","newUser","email_confirmation","add","sanitizedUser","sendConfirmationEmail","emailConfirmation","returnUser","confirmation","confirmationToken","userService","jwtService","fetchAll","filters","redirect","email_confirmation_redirection","sendEmailConfirmation","sent"],"mappings":"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"}