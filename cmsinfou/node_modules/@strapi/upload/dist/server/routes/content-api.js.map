{"version":3,"file":"content-api.js","sources":["../../../server/src/routes/content-api.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\nimport * as z from 'zod/v4';\nimport { createContentApiRoutesFactory } from '@strapi/utils';\nimport { UploadRouteValidator } from './validation';\n\nconst createRoutes = createContentApiRoutesFactory((): Core.RouterInput['routes'] => {\n  const validator = new UploadRouteValidator(strapi);\n\n  return [\n    {\n      method: 'POST',\n      path: '/',\n      handler: 'content-api.upload',\n      request: {\n        query: { id: validator.fileId.optional() },\n        // Note: multipart/form-data is handled by Koa middleware, not Zod\n      },\n      response: z.union([validator.file, validator.files]),\n    },\n    {\n      method: 'GET',\n      path: '/files',\n      handler: 'content-api.find',\n      request: {\n        query: {\n          fields: validator.queryFields.optional(),\n          populate: validator.queryPopulate.optional(),\n          sort: validator.querySort.optional(),\n          pagination: validator.pagination.optional(),\n          filters: validator.filters.optional(),\n        },\n      },\n      response: validator.files,\n    },\n    {\n      method: 'GET',\n      path: '/files/:id',\n      handler: 'content-api.findOne',\n      request: {\n        params: { id: validator.fileId },\n        query: {\n          fields: validator.queryFields.optional(),\n          populate: validator.queryPopulate.optional(),\n        },\n      },\n      response: validator.file,\n    },\n    {\n      method: 'DELETE',\n      path: '/files/:id',\n      handler: 'content-api.destroy',\n      request: {\n        params: { id: validator.fileId },\n      },\n      response: validator.file,\n    },\n  ];\n});\n\nexport const routes = createRoutes;\n"],"names":["createRoutes","createContentApiRoutesFactory","validator","UploadRouteValidator","strapi","method","path","handler","request","query","id","fileId","optional","response","z","union","file","files","fields","queryFields","populate","queryPopulate","sort","querySort","pagination","filters","params","routes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAKA,MAAMA,eAAeC,mCAA8B,CAAA,IAAA;IACjD,MAAMC,SAAAA,GAAY,IAAIC,2BAAqBC,CAAAA,MAAAA,CAAAA;IAE3C,OAAO;AACL,QAAA;YACEC,MAAQ,EAAA,MAAA;YACRC,IAAM,EAAA,GAAA;YACNC,OAAS,EAAA,oBAAA;YACTC,OAAS,EAAA;gBACPC,KAAO,EAAA;oBAAEC,EAAIR,EAAAA,SAAAA,CAAUS,MAAM,CAACC,QAAQ;AAAG;AAE3C,aAAA;YACAC,QAAUC,EAAAA,YAAAA,CAAEC,KAAK,CAAC;AAACb,gBAAAA,SAAAA,CAAUc,IAAI;AAAEd,gBAAAA,SAAAA,CAAUe;AAAM,aAAA;AACrD,SAAA;AACA,QAAA;YACEZ,MAAQ,EAAA,KAAA;YACRC,IAAM,EAAA,QAAA;YACNC,OAAS,EAAA,kBAAA;YACTC,OAAS,EAAA;gBACPC,KAAO,EAAA;oBACLS,MAAQhB,EAAAA,SAAAA,CAAUiB,WAAW,CAACP,QAAQ,EAAA;oBACtCQ,QAAUlB,EAAAA,SAAAA,CAAUmB,aAAa,CAACT,QAAQ,EAAA;oBAC1CU,IAAMpB,EAAAA,SAAAA,CAAUqB,SAAS,CAACX,QAAQ,EAAA;oBAClCY,UAAYtB,EAAAA,SAAAA,CAAUsB,UAAU,CAACZ,QAAQ,EAAA;oBACzCa,OAASvB,EAAAA,SAAAA,CAAUuB,OAAO,CAACb,QAAQ;AACrC;AACF,aAAA;AACAC,YAAAA,QAAAA,EAAUX,UAAUe;AACtB,SAAA;AACA,QAAA;YACEZ,MAAQ,EAAA,KAAA;YACRC,IAAM,EAAA,YAAA;YACNC,OAAS,EAAA,qBAAA;YACTC,OAAS,EAAA;gBACPkB,MAAQ,EAAA;AAAEhB,oBAAAA,EAAAA,EAAIR,UAAUS;AAAO,iBAAA;gBAC/BF,KAAO,EAAA;oBACLS,MAAQhB,EAAAA,SAAAA,CAAUiB,WAAW,CAACP,QAAQ,EAAA;oBACtCQ,QAAUlB,EAAAA,SAAAA,CAAUmB,aAAa,CAACT,QAAQ;AAC5C;AACF,aAAA;AACAC,YAAAA,QAAAA,EAAUX,UAAUc;AACtB,SAAA;AACA,QAAA;YACEX,MAAQ,EAAA,QAAA;YACRC,IAAM,EAAA,YAAA;YACNC,OAAS,EAAA,qBAAA;YACTC,OAAS,EAAA;gBACPkB,MAAQ,EAAA;AAAEhB,oBAAAA,EAAAA,EAAIR,UAAUS;AAAO;AACjC,aAAA;AACAE,YAAAA,QAAAA,EAAUX,UAAUc;AACtB;AACD,KAAA;AACH,CAAA,CAAA;AAEO,MAAMW,SAAS3B;;;;"}