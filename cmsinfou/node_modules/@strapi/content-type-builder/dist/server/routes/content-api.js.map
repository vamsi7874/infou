{"version":3,"file":"content-api.js","sources":["../../../server/src/routes/content-api.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\nimport * as z from 'zod/v4';\n\nimport { createContentApiRoutesFactory } from '@strapi/utils';\n\nconst ctUIDRegexp = /^((strapi|admin)::[\\w-]+|(api|plugin)::[\\w-]+\\.[\\w-]+)$/;\nconst componentUIDRegexp = /^[\\w-]+\\.[\\w-]+$/;\n\nconst baseAttributeSchema = z.object({\n  type: z.string(),\n  configurable: z.literal(false).optional(),\n  private: z.boolean().optional(),\n  pluginOptions: z.record(z.string(), z.unknown()).optional(),\n});\n\nconst mediaAttributeSchema = baseAttributeSchema.extend({\n  type: z.literal('media'),\n  multiple: z.boolean(),\n  required: z.boolean().optional(),\n  allowedTypes: z.array(z.string()).optional(),\n});\n\nconst relationAttributeSchema = baseAttributeSchema.extend({\n  type: z.literal('relation'),\n  relation: z.string(),\n  target: z.string().regex(ctUIDRegexp),\n  targetAttribute: z.string().nullable(),\n  autoPopulate: z.boolean().optional(),\n  mappedBy: z.string().optional(),\n  inversedBy: z.string().optional(),\n});\n\nconst componentAttributeSchema = baseAttributeSchema.extend({\n  type: z.literal('component'),\n  component: z.string(),\n  repeatable: z.boolean(),\n  required: z.boolean().optional(),\n  min: z.number().optional(),\n  max: z.number().optional(),\n});\n\nconst dynamicZoneAttributeSchema = baseAttributeSchema.extend({\n  type: z.literal('dynamiczone'),\n  components: z.array(z.string().regex(componentUIDRegexp)),\n  required: z.boolean().optional(),\n  min: z.number().optional(),\n  max: z.number().optional(),\n});\n\nconst uidAttributeSchema = baseAttributeSchema.extend({\n  type: z.literal('uid'),\n  targetField: z.string().optional(),\n});\n\nconst genericAttributeSchema = z.object({\n  type: z.string(),\n  required: z.boolean().optional(),\n  unique: z.boolean().optional(),\n  default: z.unknown().optional(),\n  min: z.union([z.number(), z.string()]).optional(),\n  max: z.union([z.number(), z.string()]).optional(),\n  minLength: z.number().optional(),\n  maxLength: z.number().optional(),\n  enum: z.array(z.string()).optional(),\n  regex: z.string().optional(),\n  private: z.boolean().optional(),\n  configurable: z.boolean().optional(),\n  pluginOptions: z.record(z.string(), z.unknown()).optional(),\n});\n\nconst attributeSchema = z.union([\n  mediaAttributeSchema,\n  relationAttributeSchema,\n  componentAttributeSchema,\n  dynamicZoneAttributeSchema,\n  uidAttributeSchema,\n  genericAttributeSchema,\n]);\n\nconst contentTypeSchemaBase = z.object({\n  displayName: z.string(),\n  singularName: z.string(),\n  pluralName: z.string(),\n  description: z.string(),\n  draftAndPublish: z.boolean(),\n  kind: z.enum(['collectionType', 'singleType']),\n  collectionName: z.string().optional(),\n  attributes: z.record(z.string(), attributeSchema),\n  visible: z.boolean(),\n  restrictRelationsTo: z.array(z.string()).nullable(),\n  pluginOptions: z.record(z.string(), z.unknown()).optional(),\n  options: z.record(z.string(), z.unknown()).optional(),\n  reviewWorkflows: z.boolean().optional(),\n  populateCreatorFields: z.boolean().optional(),\n  comment: z.string().optional(),\n  version: z.string().optional(),\n});\n\nconst formattedContentTypeSchema = z.object({\n  uid: z.string().regex(ctUIDRegexp),\n  plugin: z.string().optional(),\n  apiID: z.string(),\n  schema: contentTypeSchemaBase,\n});\n\nconst componentSchemaBase = z.object({\n  displayName: z.string(),\n  description: z.string(),\n  icon: z.string().optional(),\n  connection: z.string().optional(),\n  collectionName: z.string().optional(),\n  attributes: z.record(z.string(), attributeSchema),\n  pluginOptions: z.record(z.string(), z.unknown()).optional(),\n});\n\nconst formattedComponentSchema = z.object({\n  uid: z.string().regex(componentUIDRegexp),\n  category: z.string(),\n  apiId: z.string(),\n  schema: componentSchemaBase,\n});\n\nconst createRoutes = createContentApiRoutesFactory((): Core.RouterInput['routes'] => {\n  return [\n    {\n      method: 'GET',\n      path: '/content-types',\n      handler: 'content-types.getContentTypes',\n      request: {\n        query: { kind: z.enum(['collectionType', 'singleType']) },\n      },\n      response: z.object({ data: z.array(formattedContentTypeSchema) }),\n    },\n    {\n      method: 'GET',\n      path: '/content-types/:uid',\n      handler: 'content-types.getContentType',\n      request: {\n        params: {\n          uid: z.string().regex(ctUIDRegexp),\n        },\n      },\n      response: z.object({ data: formattedContentTypeSchema }),\n    },\n    {\n      method: 'GET',\n      path: '/components',\n      handler: 'components.getComponents',\n      response: z.object({ data: z.array(formattedComponentSchema) }),\n    },\n    {\n      method: 'GET',\n      path: '/components/:uid',\n      handler: 'components.getComponent',\n      request: {\n        params: {\n          uid: z.string().regex(componentUIDRegexp),\n        },\n      },\n      response: z.object({ data: formattedComponentSchema }),\n    },\n  ];\n});\n\nexport default createRoutes;\n"],"names":["ctUIDRegexp","componentUIDRegexp","baseAttributeSchema","z","object","type","string","configurable","literal","optional","private","boolean","pluginOptions","record","unknown","mediaAttributeSchema","extend","multiple","required","allowedTypes","array","relationAttributeSchema","relation","target","regex","targetAttribute","nullable","autoPopulate","mappedBy","inversedBy","componentAttributeSchema","component","repeatable","min","number","max","dynamicZoneAttributeSchema","components","uidAttributeSchema","targetField","genericAttributeSchema","unique","default","union","minLength","maxLength","enum","attributeSchema","contentTypeSchemaBase","displayName","singularName","pluralName","description","draftAndPublish","kind","collectionName","attributes","visible","restrictRelationsTo","options","reviewWorkflows","populateCreatorFields","comment","version","formattedContentTypeSchema","uid","plugin","apiID","schema","componentSchemaBase","icon","connection","formattedComponentSchema","category","apiId","createRoutes","createContentApiRoutesFactory","method","path","handler","request","query","response","data","params"],"mappings":"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"}