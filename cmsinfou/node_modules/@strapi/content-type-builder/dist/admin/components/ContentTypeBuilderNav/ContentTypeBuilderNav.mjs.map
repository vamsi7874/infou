{"version":3,"file":"ContentTypeBuilderNav.mjs","sources":["../../../../admin/src/components/ContentTypeBuilderNav/ContentTypeBuilderNav.tsx"],"sourcesContent":["import { Fragment, useState, useEffect } from 'react';\n\nimport { ConfirmDialog, SubNav, tours, useGuidedTour } from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Searchbar,\n  Button,\n  Flex,\n  Typography,\n  Divider,\n  Menu,\n  VisuallyHidden,\n  Dialog,\n} from '@strapi/design-system';\nimport { ArrowClockwise, Cross, More } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { getTrad } from '../../utils/getTrad';\nimport { useDataManager } from '../DataManager/useDataManager';\nimport { Status } from '../Status';\n\nimport { useContentTypeBuilderMenu } from './useContentTypeBuilderMenu';\n\nconst ArrowCounterClockwise = styled(ArrowClockwise)`\n  transform: scaleX(-1);\n`;\n\nconst DiscardAllMenuItem = styled(Menu.Item)`\n  color: ${({ theme }) => theme.colors.danger600};\n\n  &:hover {\n    background: ${({ theme, disabled }) => !disabled && theme.colors.danger100};\n  }\n`;\n\nexport const ContentTypeBuilderNav = () => {\n  const { menu, search } = useContentTypeBuilderMenu();\n  const { saveSchema, isModified, history, isInDevelopmentMode } = useDataManager();\n\n  const { formatMessage } = useIntl();\n\n  const [menuIsOpen, setMenuIsOpen] = useState(false);\n  const [discardConfirmationModalIsOpen, setDiscardConfirmationModalIsOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isInDevelopmentMode) {\n      return;\n    }\n\n    const onKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey || e.metaKey) {\n        if (e.key === 'Enter') {\n          if (isModified) {\n            e.preventDefault();\n            saveSchema();\n          }\n        } else if (e.key === 'z' && !e.shiftKey) {\n          e.preventDefault(); // Prevent browser default undo (e.g., in input fields)\n          history.undo();\n        } else if (e.key === 'y' || (e.shiftKey && e.key === 'z') || e.key === 'Z') {\n          e.preventDefault(); // Prevent browser default redo (e.g., in input fields)\n          history.redo();\n        }\n      }\n    };\n\n    document.addEventListener('keydown', onKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', onKeyDown);\n    };\n  });\n\n  const discardHandler = () => {\n    setDiscardConfirmationModalIsOpen(true);\n  };\n\n  const discardChanges = () => {\n    setMenuIsOpen(false);\n    setDiscardConfirmationModalIsOpen(false);\n    history.discardAllChanges();\n  };\n\n  const undoHandler = () => {\n    history.undo();\n  };\n\n  const redoHandler = () => {\n    history.redo();\n  };\n\n  const pluginName = formatMessage({\n    id: getTrad('plugin.name'),\n    defaultMessage: 'Content-Type Builder',\n  });\n\n  return (\n    <SubNav.Main aria-label={pluginName}>\n      <SubNav.Header label={pluginName} />\n      <Divider background=\"neutral150\" />\n      <Flex padding={5} gap={3} direction={'column'} alignItems={'stretch'}>\n        <tours.contentTypeBuilder.Save>\n          <Flex gap={2}>\n            <Button\n              flex={1}\n              onClick={(e) => {\n                e.preventDefault();\n                saveSchema();\n              }}\n              type=\"submit\"\n              disabled={!isModified || !isInDevelopmentMode}\n              fullWidth\n              size=\"S\"\n            >\n              {formatMessage({\n                id: 'global.save',\n                defaultMessage: 'Save',\n              })}\n            </Button>\n            <Menu.Root open={menuIsOpen} onOpenChange={setMenuIsOpen}>\n              <Menu.Trigger\n                size=\"S\"\n                endIcon={null}\n                paddingTop=\"4px\"\n                paddingLeft=\"7px\"\n                paddingRight=\"7px\"\n                variant=\"tertiary\"\n              >\n                <More fill=\"neutral500\" aria-hidden focusable={false} />\n                <VisuallyHidden tag=\"span\">\n                  {formatMessage({\n                    id: 'global.more.actions',\n                    defaultMessage: 'More actions',\n                  })}\n                </VisuallyHidden>\n              </Menu.Trigger>\n              <Menu.Content zIndex={1}>\n                <Menu.Item\n                  disabled={!history.canUndo || !isInDevelopmentMode}\n                  onSelect={undoHandler}\n                  startIcon={<ArrowCounterClockwise />}\n                >\n                  {formatMessage({\n                    id: 'global.last-change.undo',\n                    defaultMessage: 'Undo last change',\n                  })}\n                </Menu.Item>\n                <Menu.Item\n                  disabled={!history.canRedo || !isInDevelopmentMode}\n                  onSelect={redoHandler}\n                  startIcon={<ArrowClockwise />}\n                >\n                  {formatMessage({\n                    id: 'global.last-change.redo',\n                    defaultMessage: 'Redo last change',\n                  })}\n                </Menu.Item>\n                <Menu.Separator />\n                <DiscardAllMenuItem\n                  disabled={!history.canDiscardAll || !isInDevelopmentMode}\n                  onSelect={discardHandler}\n                >\n                  <Flex gap={2}>\n                    <Cross />\n                    <Typography>\n                      {formatMessage({\n                        id: 'global.last-changes.discard',\n                        defaultMessage: 'Discard last changes',\n                      })}\n                    </Typography>\n                  </Flex>\n                </DiscardAllMenuItem>\n              </Menu.Content>\n            </Menu.Root>\n          </Flex>\n        </tours.contentTypeBuilder.Save>\n\n        <Searchbar\n          value={search.value}\n          onChange={(e) => search.onChange(e.target.value)}\n          onClear={() => search.onChange('')}\n          placeholder={formatMessage({\n            id: getTrad('search.placeholder'),\n            defaultMessage: 'Search',\n          })}\n          size=\"S\"\n          // eslint-disable-next-line react/no-children-prop\n          children={undefined}\n          name={'search_contentType'}\n          clearLabel={formatMessage({ id: 'clearLabel', defaultMessage: 'Clear' })}\n          aria-label={formatMessage({\n            id: getTrad('search.placeholder'),\n            defaultMessage: 'Search',\n          })}\n        />\n      </Flex>\n      <SubNav.Sections>\n        {menu.map((section) => (\n          <Fragment key={section.name}>\n            <SubNav.Section\n              label={formatMessage({\n                id: section.title.id,\n                defaultMessage: section.title.defaultMessage,\n              })}\n              link={\n                section.customLink && {\n                  label: formatMessage({\n                    id: section.customLink?.id,\n                    defaultMessage: section.customLink?.defaultMessage,\n                  }),\n                  onClik: section.customLink?.onClick,\n                }\n              }\n              sectionId={section.name}\n            >\n              {section.links.map((link) => {\n                const linkLabel = formatMessage({ id: link.name, defaultMessage: link.title });\n\n                if ('links' in link) {\n                  return (\n                    <SubNav.SubSection key={link.name} label={link.title}>\n                      {link.links.map((subLink) => {\n                        const label = formatMessage({\n                          id: subLink.name,\n                          defaultMessage: subLink.title,\n                        });\n\n                        return (\n                          <SubNav.Link\n                            to={subLink.to}\n                            key={subLink.name}\n                            label={label}\n                            endAction={\n                              <Box tag=\"span\" textAlign=\"center\" width={'24px'}>\n                                <Status status={subLink.status} />\n                              </Box>\n                            }\n                          />\n                        );\n                      })}\n                    </SubNav.SubSection>\n                  );\n                }\n\n                return (\n                  <SubNav.Link\n                    to={link.to}\n                    key={link.name}\n                    label={linkLabel}\n                    endAction={\n                      <Box tag=\"span\" textAlign=\"center\" width={'24px'}>\n                        <Status status={link.status} />\n                      </Box>\n                    }\n                  />\n                );\n              })}\n            </SubNav.Section>\n          </Fragment>\n        ))}\n      </SubNav.Sections>\n      <Dialog.Root\n        open={discardConfirmationModalIsOpen}\n        onOpenChange={setDiscardConfirmationModalIsOpen}\n      >\n        <ConfirmDialog onConfirm={discardChanges}>\n          {formatMessage({\n            id: getTrad('popUpWarning.discardAll.message'),\n            defaultMessage: 'Are you sure you want to discard all changes?',\n          })}\n        </ConfirmDialog>\n      </Dialog.Root>\n    </SubNav.Main>\n  );\n};\n"],"names":["ArrowCounterClockwise","styled","ArrowClockwise","DiscardAllMenuItem","Menu","Item","theme","colors","danger600","disabled","danger100","ContentTypeBuilderNav","menu","search","useContentTypeBuilderMenu","saveSchema","isModified","history","isInDevelopmentMode","useDataManager","formatMessage","useIntl","menuIsOpen","setMenuIsOpen","useState","discardConfirmationModalIsOpen","setDiscardConfirmationModalIsOpen","useEffect","onKeyDown","e","ctrlKey","metaKey","key","preventDefault","shiftKey","undo","redo","document","addEventListener","removeEventListener","discardHandler","discardChanges","discardAllChanges","undoHandler","redoHandler","pluginName","id","getTrad","defaultMessage","_jsxs","SubNav","Main","aria-label","_jsx","Header","label","Divider","background","Flex","padding","gap","direction","alignItems","tours","contentTypeBuilder","Save","Button","flex","onClick","type","fullWidth","size","Root","open","onOpenChange","Trigger","endIcon","paddingTop","paddingLeft","paddingRight","variant","More","fill","aria-hidden","focusable","VisuallyHidden","tag","Content","zIndex","canUndo","onSelect","startIcon","canRedo","Separator","canDiscardAll","Cross","Typography","Searchbar","value","onChange","target","onClear","placeholder","children","undefined","name","clearLabel","Sections","map","section","Fragment","Section","title","link","customLink","onClik","sectionId","links","linkLabel","SubSection","subLink","Link","to","endAction","Box","textAlign","width","Status","status","Dialog","ConfirmDialog","onConfirm"],"mappings":"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"}