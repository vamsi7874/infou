{"version":3,"file":"builder.js","sources":["../../src/schema/builder.ts"],"sourcesContent":["import { isNil, prop, omit, castArray } from 'lodash/fp';\nimport createDebug from 'debug';\n\nimport type { Knex } from 'knex';\nimport type { Database } from '..';\nimport type { Schema, Table, SchemaDiff, TableDiff, ForeignKey, Index, Column } from './types';\n\nconst debug = createDebug('strapi::database');\n\nexport default (db: Database) => {\n  const helpers = createHelpers(db);\n\n  return {\n    /**\n     * Returns a knex schema builder instance\n     * @param {string} table - table name\n     */\n    getSchemaBuilder(trx: Knex.Transaction) {\n      return db.getSchemaConnection(trx);\n    },\n\n    /**\n     * Creates schema in DB\n     */\n    async createSchema(schema: Schema) {\n      await db.connection.transaction(async (trx) => {\n        await this.createTables(schema.tables, trx);\n      });\n    },\n\n    /**\n     * Creates a list of tables in a schema\n     * @param {KnexInstance} trx\n     * @param {Table[]} tables\n     */\n    async createTables(tables: Table[], trx: Knex.Transaction) {\n      for (const table of tables) {\n        debug(`Creating table: ${table.name}`);\n        const schemaBuilder = this.getSchemaBuilder(trx);\n        await helpers.createTable(schemaBuilder, table);\n      }\n\n      // create FKs once all the tables exist\n      for (const table of tables) {\n        debug(`Creating table foreign keys: ${table.name}`);\n        const schemaBuilder = this.getSchemaBuilder(trx);\n        await helpers.createTableForeignKeys(schemaBuilder, table);\n      }\n    },\n    /**\n     * Drops schema from DB\n     */\n    async dropSchema(schema: Schema, { dropDatabase = false } = {}) {\n      if (dropDatabase) {\n        // TODO: drop database & return as it will drop everything\n        return;\n      }\n\n      await db.connection.transaction(async (trx) => {\n        for (const table of schema.tables.reverse()) {\n          const schemaBuilder = this.getSchemaBuilder(trx);\n          await helpers.dropTable(schemaBuilder, table);\n        }\n      });\n    },\n\n    /**\n     * Applies a schema diff update in the DB\n     * @param {*} schemaDiff\n     */\n    // TODO: implement force option to disable removal in DB\n    async updateSchema(schemaDiff: SchemaDiff['diff']) {\n      const forceMigration = db.config.settings?.forceMigration;\n\n      await db.dialect.startSchemaUpdate();\n\n      // Pre-fetch metadata for all updated tables\n      const existingMetadata: Record<string, { indexes: Index[]; foreignKeys: ForeignKey[] }> = {};\n      const columnTypes: Record<string, Record<string, string | null>> = {};\n\n      for (const table of schemaDiff.tables.updated) {\n        existingMetadata[table.name] = {\n          indexes: await db.dialect.schemaInspector.getIndexes(table.name),\n          foreignKeys: await db.dialect.schemaInspector.getForeignKeys(table.name),\n        };\n\n        // Pre-fetch column types for PostgreSQL to avoid transaction timeouts\n        if (db.config.connection.client === 'postgres') {\n          columnTypes[table.name] = {};\n          for (const updatedColumn of table.columns.updated) {\n            columnTypes[table.name][updatedColumn.name] = await helpers.getCurrentColumnType(\n              table.name,\n              updatedColumn.name\n            );\n          }\n        }\n      }\n\n      await db.connection.transaction(async (trx) => {\n        await this.createTables(schemaDiff.tables.added, trx);\n\n        if (forceMigration) {\n          // drop all delete table foreign keys then delete the tables\n          for (const table of schemaDiff.tables.removed) {\n            debug(`Removing table foreign keys: ${table.name}`);\n\n            const schemaBuilder = this.getSchemaBuilder(trx);\n            await helpers.dropTableForeignKeys(schemaBuilder, table);\n          }\n\n          for (const table of schemaDiff.tables.removed) {\n            debug(`Removing table: ${table.name}`);\n\n            const schemaBuilder = this.getSchemaBuilder(trx);\n            await helpers.dropTable(schemaBuilder, table);\n          }\n        }\n\n        for (const table of schemaDiff.tables.updated) {\n          debug(`Updating table: ${table.name}`);\n\n          // Handle special type conversions before standard alterations\n          await helpers.handleSpecialTypeConversions(trx, table, columnTypes[table.name] || {});\n\n          // alter table\n          const schemaBuilder = this.getSchemaBuilder(trx);\n\n          const { indexes, foreignKeys } = existingMetadata[table.name];\n          await helpers.alterTable(schemaBuilder, table, { indexes, foreignKeys });\n        }\n      });\n\n      await db.dialect.endSchemaUpdate();\n    },\n  };\n};\n\nconst createHelpers = (db: Database) => {\n  /**\n   *  Creates a foreign key on a table\n   */\n  const createForeignKey = (tableBuilder: Knex.TableBuilder, foreignKey: ForeignKey) => {\n    const { name, columns, referencedColumns, referencedTable, onDelete, onUpdate } = foreignKey;\n\n    const constraint = tableBuilder\n      .foreign(columns, name)\n      .references(referencedColumns)\n      .inTable(db.getSchemaName() ? `${db.getSchemaName()}.${referencedTable}` : referencedTable);\n\n    if (onDelete) {\n      constraint.onDelete(onDelete);\n    }\n\n    if (onUpdate) {\n      constraint.onUpdate(onUpdate);\n    }\n  };\n\n  /**\n   * Drops a foreign key from a table\n   */\n  const dropForeignKey = (\n    tableBuilder: Knex.TableBuilder,\n    foreignKey: ForeignKey,\n    existingForeignKeys?: ForeignKey[]\n  ) => {\n    const { name, columns } = foreignKey;\n\n    // Check if the index exists in existingIndexes, and return early if it doesn't\n    if (\n      existingForeignKeys &&\n      !existingForeignKeys.some((existingIndex) => existingIndex?.name === name)\n    ) {\n      debug(`Foreign Key ${name} not found in existing foreign keys. Skipping drop.`);\n      return;\n    }\n\n    tableBuilder.dropForeign(columns, name);\n  };\n\n  /**\n   * Creates an index on a table\n   */\n  const createIndex = (tableBuilder: Knex.TableBuilder, index: Index) => {\n    const { type, columns, name } = index;\n\n    switch (type) {\n      case 'primary': {\n        return tableBuilder.primary(columns, { constraintName: name });\n      }\n      case 'unique': {\n        return tableBuilder.unique(columns, { indexName: name });\n      }\n      default: {\n        return tableBuilder.index(columns, name, type);\n      }\n    }\n  };\n\n  /**\n   * Drops an index from table\n   * @param {Knex.TableBuilder} tableBuilder\n   * @param {Index} index\n   */\n  const dropIndex = (tableBuilder: Knex.TableBuilder, index: Index, existingIndexes?: Index[]) => {\n    if (!db.config.settings?.forceMigration) {\n      return;\n    }\n\n    const { type, columns, name } = index;\n\n    // Check if the index exists in existingIndexes, and return early if it doesn't\n    if (existingIndexes && !existingIndexes.some((existingIndex) => existingIndex?.name === name)) {\n      debug(`Index ${index.name} not found in existingIndexes. Skipping drop.`);\n      return;\n    }\n\n    switch (type) {\n      case 'primary': {\n        return tableBuilder.dropPrimary(name);\n      }\n      case 'unique': {\n        return tableBuilder.dropUnique(columns, name);\n      }\n      default: {\n        return tableBuilder.dropIndex(columns, name);\n      }\n    }\n  };\n\n  /**\n   * Creates a column in a table\n   */\n  const createColumn = (tableBuilder: Knex.TableBuilder, column: Column) => {\n    const { type, name, args = [], defaultTo, unsigned, notNullable } = column;\n\n    const col = (tableBuilder[type as keyof Knex.TableBuilder] as any)(name, ...args);\n\n    if (unsigned === true) {\n      col.unsigned();\n    }\n\n    if (!isNil(defaultTo)) {\n      const [value, opts] = castArray(defaultTo);\n\n      if (prop('isRaw', opts)) {\n        col.defaultTo(db.connection.raw(value), omit('isRaw', opts));\n      } else {\n        col.defaultTo(value, opts);\n      }\n    }\n\n    if (notNullable === true) {\n      col.notNullable();\n    } else {\n      col.nullable();\n    }\n\n    return col;\n  };\n\n  /**\n   * Drops a column from a table\n   */\n  const dropColumn = (tableBuilder: Knex.TableBuilder, column: Column) => {\n    if (!db.config.settings?.forceMigration) {\n      return;\n    }\n\n    return tableBuilder.dropColumn(column.name);\n  };\n\n  /**\n   * Creates a table in a database\n   */\n  const createTable = async (schemaBuilder: Knex.SchemaBuilder, table: Table) => {\n    await schemaBuilder.createTable(table.name, (tableBuilder) => {\n      // columns\n      (table.columns || []).forEach((column) => createColumn(tableBuilder, column));\n\n      // indexes\n      (table.indexes || []).forEach((index) => createIndex(tableBuilder, index));\n\n      // foreign keys\n\n      if (!db.dialect.canAlterConstraints()) {\n        (table.foreignKeys || []).forEach((foreignKey) =>\n          createForeignKey(tableBuilder, foreignKey)\n        );\n      }\n    });\n  };\n\n  /**\n   * Alters a database table by applying a set of schema changes including updates to columns, indexes, and foreign keys.\n   * This function ensures proper ordering of operations to avoid conflicts (e.g., foreign key errors) and handles\n   * MySQL-specific quirks where dropping a foreign key can implicitly drop an associated index.\n   *\n   * @param {Knex.SchemaBuilder} schemaBuilder - Knex SchemaBuilder instance to perform schema operations.\n   * @param {TableDiff['diff']} table - A diff object representing the schema changes to be applied to the table.\n   * @param {{ indexes: Index[]; foreignKeys: ForeignKey[] }} existingMetadata - Metadata about existing indexes and\n   *   foreign keys in the table. Used to ensure safe operations and avoid unnecessary modifications.\n   *   - indexes: Array of existing index definitions.\n   *   - foreignKeys: Array of existing foreign key definitions.\n   */\n  const alterTable = async (\n    schemaBuilder: Knex.SchemaBuilder,\n    table: TableDiff['diff'],\n    existingMetadata: { indexes: Index[]; foreignKeys: ForeignKey[] } = {\n      indexes: [],\n      foreignKeys: [],\n    }\n  ) => {\n    let existingIndexes = [...existingMetadata.indexes];\n    const existingForeignKeys = [...existingMetadata.foreignKeys];\n\n    // Track dropped foreign keys\n    const droppedForeignKeyNames: string[] = [];\n\n    await schemaBuilder.alterTable(table.name, async (tableBuilder) => {\n      // Drop foreign keys first to avoid foreign key errors in the following steps\n      for (const removedForeignKey of table.foreignKeys.removed) {\n        debug(`Dropping foreign key ${removedForeignKey.name} on ${table.name}`);\n        dropForeignKey(tableBuilder, removedForeignKey, existingForeignKeys);\n\n        droppedForeignKeyNames.push(removedForeignKey.name);\n      }\n\n      for (const updatedForeignKey of table.foreignKeys.updated) {\n        debug(`Dropping updated foreign key ${updatedForeignKey.name} on ${table.name}`);\n        dropForeignKey(tableBuilder, updatedForeignKey.object, existingForeignKeys);\n\n        droppedForeignKeyNames.push(updatedForeignKey.object.name);\n      }\n\n      // In MySQL, dropping a foreign key can also implicitly drop an index with the same name\n      // Remove dropped foreign keys from existingIndexes for MySQL\n      if (db.config.connection.client === 'mysql') {\n        existingIndexes = existingIndexes.filter(\n          (index) => !droppedForeignKeyNames.includes(index.name)\n        );\n      }\n\n      for (const removedIndex of table.indexes.removed) {\n        debug(`Dropping index ${removedIndex.name} on ${table.name}`);\n        dropIndex(tableBuilder, removedIndex, existingIndexes);\n      }\n\n      for (const updatedIndex of table.indexes.updated) {\n        debug(`Dropping updated index ${updatedIndex.name} on ${table.name}`);\n        dropIndex(tableBuilder, updatedIndex.object, existingIndexes);\n      }\n\n      // Drop columns after FKs have been removed to avoid FK errors\n      for (const removedColumn of table.columns.removed) {\n        debug(`Dropping column ${removedColumn.name} on ${table.name}`);\n        dropColumn(tableBuilder, removedColumn);\n      }\n\n      // Update existing columns\n      for (const updatedColumn of table.columns.updated) {\n        debug(`Updating column ${updatedColumn.name} on ${table.name}`);\n\n        const { object } = updatedColumn;\n\n        if (object.type === 'increments') {\n          createColumn(tableBuilder, { ...object, type: 'integer' }).alter();\n        } else {\n          createColumn(tableBuilder, object).alter();\n        }\n      }\n\n      // Add any new columns\n      for (const addedColumn of table.columns.added) {\n        debug(`Creating column ${addedColumn.name} on ${table.name}`);\n\n        if (addedColumn.type === 'increments' && !db.dialect.canAddIncrements()) {\n          tableBuilder.integer(addedColumn.name).unsigned();\n          tableBuilder.primary([addedColumn.name]);\n        } else {\n          createColumn(tableBuilder, addedColumn);\n        }\n      }\n\n      // once the columns have all been updated, we can create indexes again\n      for (const updatedForeignKey of table.foreignKeys.updated) {\n        debug(`Recreating updated foreign key ${updatedForeignKey.name} on ${table.name}`);\n        createForeignKey(tableBuilder, updatedForeignKey.object);\n      }\n\n      for (const updatedIndex of table.indexes.updated) {\n        debug(`Recreating updated index ${updatedIndex.name} on ${table.name}`);\n        createIndex(tableBuilder, updatedIndex.object);\n      }\n\n      for (const addedForeignKey of table.foreignKeys.added) {\n        debug(`Creating foreign key ${addedForeignKey.name} on ${table.name}`);\n        createForeignKey(tableBuilder, addedForeignKey);\n      }\n\n      for (const addedIndex of table.indexes.added) {\n        debug(`Creating index ${addedIndex.name} on ${table.name}`);\n        createIndex(tableBuilder, addedIndex);\n      }\n    });\n  };\n\n  /**\n   * Drops a table from a database\n   */\n  const dropTable = (schemaBuilder: Knex.SchemaBuilder, table: Table) => {\n    if (!db.config.settings.forceMigration) {\n      return;\n    }\n\n    return schemaBuilder.dropTableIfExists(table.name);\n  };\n\n  /**\n   * Creates a table foreign keys constraints\n   */\n  const createTableForeignKeys = async (schemaBuilder: Knex.SchemaBuilder, table: Table) => {\n    // foreign keys\n    await schemaBuilder.table(table.name, (tableBuilder) => {\n      (table.foreignKeys || []).forEach((foreignKey) => createForeignKey(tableBuilder, foreignKey));\n    });\n  };\n\n  /**\n   * Drops a table foreign keys constraints\n   */\n  const dropTableForeignKeys = async (schemaBuilder: Knex.SchemaBuilder, table: Table) => {\n    if (!db.config.settings.forceMigration) {\n      return;\n    }\n\n    // foreign keys\n    await schemaBuilder.table(table.name, (tableBuilder) => {\n      (table.foreignKeys || []).forEach((foreignKey) => dropForeignKey(tableBuilder, foreignKey));\n    });\n  };\n\n  /**\n   * Get the current column type from the database\n   */\n  const getCurrentColumnType = async (\n    tableName: string,\n    columnName: string\n  ): Promise<string | null> => {\n    try {\n      const schemaName = db.getSchemaName();\n      const result = await db.connection.raw(\n        `\n        SELECT data_type \n        FROM information_schema.columns \n        WHERE table_name = ? \n          AND column_name = ?\n          ${schemaName ? 'AND table_schema = ?' : ''}\n        LIMIT 1\n      `,\n        schemaName ? [tableName, columnName, schemaName] : [tableName, columnName]\n      );\n\n      return result.rows?.[0]?.data_type || null;\n    } catch (error) {\n      // Log error but don't fail the migration\n      debug(\n        `Failed to get column type for ${tableName}.${columnName}: ${error instanceof Error ? error.message : String(error)}`\n      );\n      return null;\n    }\n  };\n\n  /**\n   * Apply column properties after type conversion\n   */\n  const applyColumnProperties = async (\n    trx: Knex.Transaction,\n    tableName: string,\n    columnName: string,\n    column: Column\n  ) => {\n    // Apply NOT NULL constraint\n    if (column.notNullable) {\n      await trx.raw(`ALTER TABLE ?? ALTER COLUMN ?? SET NOT NULL`, [tableName, columnName]);\n    } else {\n      await trx.raw(`ALTER TABLE ?? ALTER COLUMN ?? DROP NOT NULL`, [tableName, columnName]);\n    }\n\n    // Apply default value\n    if (column.defaultTo !== undefined) {\n      const [defaultValue, defaultOpts] = castArray(column.defaultTo);\n      if (prop('isRaw', defaultOpts)) {\n        await trx.raw(`ALTER TABLE ?? ALTER COLUMN ?? SET DEFAULT ${defaultValue}`, [\n          tableName,\n          columnName,\n        ]);\n      } else {\n        // PostgreSQL doesn't support parameterized SET DEFAULT, so we need to escape the value\n        const escapedDefault =\n          typeof defaultValue === 'string' ? `'${defaultValue.replace(/'/g, \"''\")}'` : defaultValue;\n        await trx.raw(`ALTER TABLE ?? ALTER COLUMN ?? SET DEFAULT ${escapedDefault}`, [\n          tableName,\n          columnName,\n        ]);\n      }\n    }\n  };\n\n  /**\n   * Handle special type conversions that require custom SQL\n   */\n  const handleSpecialTypeConversions = async (\n    trx: Knex.Transaction,\n    table: TableDiff['diff'],\n    preloadedColumnTypes: Record<string, string | null> = {}\n  ) => {\n    // Only PostgreSQL needs special handling for now\n    if (db.config.connection.client !== 'postgres') {\n      return;\n    }\n\n    const conversionsToApply = [];\n\n    // Check each updated column for special type conversions\n    for (const updatedColumn of table.columns.updated) {\n      const { name: columnName, object: column } = updatedColumn;\n\n      // Use pre-loaded column type if available, otherwise fetch it\n      const currentType =\n        preloadedColumnTypes[columnName] ?? (await getCurrentColumnType(table.name, columnName));\n\n      if (currentType) {\n        // Check if dialect has special conversion SQL\n        const conversionSQL = db.dialect.getColumnTypeConversionSQL(currentType, column.type);\n\n        if (conversionSQL) {\n          conversionsToApply.push({\n            column: updatedColumn,\n            sql: conversionSQL.sql,\n            params: [table.name, columnName, columnName],\n            currentType,\n            targetType: column.type,\n            warning: conversionSQL.warning,\n          });\n        }\n      }\n    }\n\n    // Apply conversions\n    for (const conversion of conversionsToApply) {\n      const { column, sql, params, currentType, targetType, warning } = conversion;\n\n      // Log warning about type conversion\n      const warningMessage = warning || 'This conversion may result in data changes.';\n      db.logger.warn(\n        `Database type conversion: \"${table.name}.${column.name}\" from \"${currentType}\" to \"${targetType}\". ${warningMessage}`\n      );\n\n      debug(`Applying special type conversion for column ${column.name} on ${table.name}`);\n      debug(`Executing SQL: ${sql} with params: ${JSON.stringify(params)}`);\n\n      try {\n        // Execute the conversion using the transaction connection\n        await trx.raw(sql, params);\n        debug(`Successfully converted ${column.name} from ${currentType} to ${targetType}`);\n      } catch (conversionError) {\n        db.logger.error(\n          `Failed to convert column ${column.name}: ${conversionError instanceof Error ? conversionError.message : String(conversionError)}`\n        );\n        throw conversionError;\n      }\n\n      // Apply other column properties\n      await applyColumnProperties(trx, table.name, column.name, column.object);\n\n      // Remove from standard updates to prevent double processing\n      table.columns.updated = table.columns.updated.filter((col) => col.name !== column.name);\n    }\n  };\n\n  return {\n    createTable,\n    alterTable,\n    dropTable,\n    createTableForeignKeys,\n    dropTableForeignKeys,\n    handleSpecialTypeConversions,\n    getCurrentColumnType,\n  };\n};\n"],"names":["debug","createDebug","db","helpers","createHelpers","getSchemaBuilder","trx","getSchemaConnection","createSchema","schema","connection","transaction","createTables","tables","table","name","schemaBuilder","createTable","createTableForeignKeys","dropSchema","dropDatabase","reverse","dropTable","updateSchema","schemaDiff","forceMigration","config","settings","dialect","startSchemaUpdate","existingMetadata","columnTypes","updated","indexes","schemaInspector","getIndexes","foreignKeys","getForeignKeys","client","updatedColumn","columns","getCurrentColumnType","added","removed","dropTableForeignKeys","handleSpecialTypeConversions","alterTable","endSchemaUpdate","createForeignKey","tableBuilder","foreignKey","referencedColumns","referencedTable","onDelete","onUpdate","constraint","foreign","references","inTable","getSchemaName","dropForeignKey","existingForeignKeys","some","existingIndex","dropForeign","createIndex","index","type","primary","constraintName","unique","indexName","dropIndex","existingIndexes","dropPrimary","dropUnique","createColumn","column","args","defaultTo","unsigned","notNullable","col","isNil","value","opts","castArray","prop","raw","omit","nullable","dropColumn","forEach","canAlterConstraints","droppedForeignKeyNames","removedForeignKey","push","updatedForeignKey","object","filter","includes","removedIndex","updatedIndex","removedColumn","alter","addedColumn","canAddIncrements","integer","addedForeignKey","addedIndex","dropTableIfExists","tableName","columnName","schemaName","result","rows","data_type","error","Error","message","String","applyColumnProperties","undefined","defaultValue","defaultOpts","escapedDefault","replace","preloadedColumnTypes","conversionsToApply","currentType","conversionSQL","getColumnTypeConversionSQL","sql","params","targetType","warning","conversion","warningMessage","logger","warn","JSON","stringify","conversionError"],"mappings":"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"}