{"version":3,"file":"parameters.js","sources":["../../../../../../src/assemblers/document/path/path-item/operation/parameters.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\nimport type { OpenAPIV3_1 } from 'openapi-types';\nimport type { Assembler } from '../../../..';\n\nimport type { OperationContext } from '../../../../../types';\nimport { createDebugger, zodToOpenAPI } from '../../../../../utils';\n\nconst debug = createDebugger('assembler:parameters');\n\ntype PathParameterObject = OpenAPIV3_1.ParameterObject & { in: 'path' };\ntype QueryParameterObject = OpenAPIV3_1.ParameterObject & { in: 'query' };\n\nexport class OperationParametersAssembler implements Assembler.Operation {\n  assemble(context: OperationContext, route: Core.Route): void {\n    debug('assembling parameters for %o %o...', route.method, route.path);\n\n    const pathParameters = this._getPathParameters(route);\n    debug('found %o path parameters', pathParameters.length);\n\n    const queryParameters = this._getQueryParameters(route);\n    debug('found %o query parameters', queryParameters.length);\n\n    const parameters = [...pathParameters, ...queryParameters];\n    debug('assembled %o parameters for %o %o', parameters.length, route.method, route.path);\n\n    context.output.data.parameters = parameters;\n  }\n\n  private _getPathParameters(route: Core.Route): PathParameterObject[] {\n    const { params } = route.request ?? {};\n\n    // TODO: Allow auto inference (from path) if enabled through configuration\n    if (!params) {\n      return [];\n    }\n\n    const pathParams: PathParameterObject[] = [];\n\n    for (const [name, zodSchema] of Object.entries(params)) {\n      const required = !zodSchema.isOptional();\n      const schema = zodToOpenAPI(zodSchema) as any;\n\n      pathParams.push({ name, in: 'path', required, schema });\n    }\n\n    return pathParams;\n  }\n\n  private _getQueryParameters(route: Core.Route): QueryParameterObject[] {\n    const { query } = route.request ?? {};\n\n    if (!query) {\n      return [];\n    }\n\n    const queryParams: QueryParameterObject[] = [];\n\n    for (const [name, zodSchema] of Object.entries(query)) {\n      const required = !zodSchema.isOptional();\n      const schema = zodToOpenAPI(zodSchema) as any;\n      const param: QueryParameterObject = { name, in: 'query', required, schema };\n\n      // In Strapi, query params are always interpreted as query strings, which isn't supported by the specification\n      // TODO: Make that configurable somehow\n      Object.assign(param, { 'x-strapi-serialize': 'querystring' });\n\n      queryParams.push(param);\n    }\n\n    return queryParams;\n  }\n}\n"],"names":["debug","createDebugger","OperationParametersAssembler","assemble","context","route","method","path","pathParameters","_getPathParameters","length","queryParameters","_getQueryParameters","parameters","output","data","params","request","pathParams","name","zodSchema","Object","entries","required","isOptional","schema","zodToOpenAPI","push","in","query","queryParams","param","assign"],"mappings":";;;;;AAOA,MAAMA,QAAQC,sBAAe,CAAA,sBAAA,CAAA;AAKtB,MAAMC,4BAAAA,CAAAA;IACXC,QAASC,CAAAA,OAAyB,EAAEC,KAAiB,EAAQ;AAC3DL,QAAAA,KAAAA,CAAM,oCAAsCK,EAAAA,KAAAA,CAAMC,MAAM,EAAED,MAAME,IAAI,CAAA;AAEpE,QAAA,MAAMC,cAAiB,GAAA,IAAI,CAACC,kBAAkB,CAACJ,KAAAA,CAAAA;QAC/CL,KAAM,CAAA,0BAAA,EAA4BQ,eAAeE,MAAM,CAAA;AAEvD,QAAA,MAAMC,eAAkB,GAAA,IAAI,CAACC,mBAAmB,CAACP,KAAAA,CAAAA;QACjDL,KAAM,CAAA,2BAAA,EAA6BW,gBAAgBD,MAAM,CAAA;AAEzD,QAAA,MAAMG,UAAa,GAAA;AAAIL,YAAAA,GAAAA,cAAAA;AAAmBG,YAAAA,GAAAA;AAAgB,SAAA;QAC1DX,KAAM,CAAA,mCAAA,EAAqCa,WAAWH,MAAM,EAAEL,MAAMC,MAAM,EAAED,MAAME,IAAI,CAAA;AAEtFH,QAAAA,OAAAA,CAAQU,MAAM,CAACC,IAAI,CAACF,UAAU,GAAGA,UAAAA;AACnC;AAEQJ,IAAAA,kBAAAA,CAAmBJ,KAAiB,EAAyB;AACnE,QAAA,MAAM,EAAEW,MAAM,EAAE,GAAGX,KAAMY,CAAAA,OAAO,IAAI,EAAC;;AAGrC,QAAA,IAAI,CAACD,MAAQ,EAAA;AACX,YAAA,OAAO,EAAE;AACX;AAEA,QAAA,MAAME,aAAoC,EAAE;QAE5C,KAAK,MAAM,CAACC,IAAMC,EAAAA,SAAAA,CAAU,IAAIC,MAAOC,CAAAA,OAAO,CAACN,MAAS,CAAA,CAAA;YACtD,MAAMO,QAAAA,GAAW,CAACH,SAAAA,CAAUI,UAAU,EAAA;AACtC,YAAA,MAAMC,SAASC,gBAAaN,CAAAA,SAAAA,CAAAA;AAE5BF,YAAAA,UAAAA,CAAWS,IAAI,CAAC;AAAER,gBAAAA,IAAAA;gBAAMS,EAAI,EAAA,MAAA;AAAQL,gBAAAA,QAAAA;AAAUE,gBAAAA;AAAO,aAAA,CAAA;AACvD;QAEA,OAAOP,UAAAA;AACT;AAEQN,IAAAA,mBAAAA,CAAoBP,KAAiB,EAA0B;AACrE,QAAA,MAAM,EAAEwB,KAAK,EAAE,GAAGxB,KAAMY,CAAAA,OAAO,IAAI,EAAC;AAEpC,QAAA,IAAI,CAACY,KAAO,EAAA;AACV,YAAA,OAAO,EAAE;AACX;AAEA,QAAA,MAAMC,cAAsC,EAAE;QAE9C,KAAK,MAAM,CAACX,IAAMC,EAAAA,SAAAA,CAAU,IAAIC,MAAOC,CAAAA,OAAO,CAACO,KAAQ,CAAA,CAAA;YACrD,MAAMN,QAAAA,GAAW,CAACH,SAAAA,CAAUI,UAAU,EAAA;AACtC,YAAA,MAAMC,SAASC,gBAAaN,CAAAA,SAAAA,CAAAA;AAC5B,YAAA,MAAMW,KAA8B,GAAA;AAAEZ,gBAAAA,IAAAA;gBAAMS,EAAI,EAAA,OAAA;AAASL,gBAAAA,QAAAA;AAAUE,gBAAAA;AAAO,aAAA;;;YAI1EJ,MAAOW,CAAAA,MAAM,CAACD,KAAO,EAAA;gBAAE,oBAAsB,EAAA;AAAc,aAAA,CAAA;AAE3DD,YAAAA,WAAAA,CAAYH,IAAI,CAACI,KAAAA,CAAAA;AACnB;QAEA,OAAOD,WAAAA;AACT;AACF;;;;"}