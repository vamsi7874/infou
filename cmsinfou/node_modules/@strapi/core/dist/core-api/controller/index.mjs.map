{"version":3,"file":"index.mjs","sources":["../../../src/core-api/controller/index.ts"],"sourcesContent":["import { prop } from 'lodash/fp';\nimport type Koa from 'koa';\nimport { contentTypes as contentTypeUtils } from '@strapi/utils';\nimport type { Core, Struct } from '@strapi/types';\n\nimport { transformResponse } from './transform';\nimport { createSingleTypeController } from './single-type';\nimport { createCollectionTypeController } from './collection-type';\nimport requestCtx from '../../services/request-context';\n\nconst isSingleType = (\n  contentType: Struct.ContentTypeSchema\n): contentType is Struct.SingleTypeSchema => contentTypeUtils.isSingleType(contentType);\n\nconst getAuthFromKoaContext = (ctx: Koa.Context) => prop('state.auth', ctx) ?? {};\n\nfunction createController<T extends Struct.SingleTypeSchema | Struct.CollectionTypeSchema>(opts: {\n  contentType: T;\n}): T extends Struct.SingleTypeSchema\n  ? Core.CoreAPI.Controller.SingleType\n  : Core.CoreAPI.Controller.CollectionType;\nfunction createController({\n  contentType,\n}: {\n  contentType: Struct.SingleTypeSchema | Struct.CollectionTypeSchema;\n}) {\n  // TODO: replace with Base class + SingleType and CollectionType classes\n\n  const proto: Core.CoreAPI.Controller.Base = {\n    transformResponse(data, meta) {\n      const ctx = requestCtx.get();\n      return transformResponse(data, meta, {\n        contentType,\n        useJsonAPIFormat: ctx?.headers?.['strapi-response-format'] === 'v4',\n        encodeSourceMaps: ctx?.headers?.['strapi-encode-source-maps'] === 'true',\n      });\n    },\n\n    async sanitizeOutput(data, ctx) {\n      const auth = getAuthFromKoaContext(ctx);\n\n      return strapi.contentAPI.sanitize.output(data, contentType, { auth });\n    },\n\n    async sanitizeInput(data, ctx) {\n      const auth = getAuthFromKoaContext(ctx);\n\n      return strapi.contentAPI.sanitize.input(data, contentType, { auth });\n    },\n\n    async sanitizeQuery(ctx) {\n      const auth = getAuthFromKoaContext(ctx);\n\n      return strapi.contentAPI.sanitize.query(ctx.query, contentType, { auth });\n    },\n\n    async validateQuery(ctx) {\n      const auth = getAuthFromKoaContext(ctx);\n\n      return strapi.contentAPI.validate.query(ctx.query, contentType, { auth });\n    },\n\n    async validateInput(data, ctx) {\n      const auth = getAuthFromKoaContext(ctx);\n\n      return strapi.contentAPI.validate.input(data, contentType, { auth });\n    },\n  };\n\n  let ctrl;\n\n  if (isSingleType(contentType)) {\n    ctrl = createSingleTypeController({ contentType });\n  } else {\n    ctrl = createCollectionTypeController({ contentType });\n  }\n\n  return Object.assign(Object.create(proto), ctrl);\n}\n\nexport { createController };\n"],"names":["isSingleType","contentType","contentTypeUtils","getAuthFromKoaContext","ctx","prop","createController","proto","transformResponse","data","meta","requestCtx","get","useJsonAPIFormat","headers","encodeSourceMaps","sanitizeOutput","auth","strapi","contentAPI","sanitize","output","sanitizeInput","input","sanitizeQuery","query","validateQuery","validate","validateInput","ctrl","createSingleTypeController","createCollectionTypeController","Object","assign","create"],"mappings":";;;;;;;AAUA,MAAMA,YAAe,GAAA,CACnBC,WAC2CC,GAAAA,YAAAA,CAAiBF,YAAY,CAACC,WAAAA,CAAAA;AAE3E,MAAME,wBAAwB,CAACC,GAAAA,GAAqBC,IAAK,CAAA,YAAA,EAAcD,QAAQ,EAAC;AAOhF,SAASE,gBAAAA,CAAiB,EACxBL,WAAW,EAGZ,EAAA;;AAGC,IAAA,MAAMM,KAAsC,GAAA;QAC1CC,iBAAkBC,CAAAA,CAAAA,IAAI,EAAEC,IAAI,EAAA;YAC1B,MAAMN,GAAAA,GAAMO,WAAWC,GAAG,EAAA;YAC1B,OAAOJ,iBAAAA,CAAkBC,MAAMC,IAAM,EAAA;AACnCT,gBAAAA,WAAAA;AACAY,gBAAAA,gBAAAA,EAAkBT,GAAKU,EAAAA,OAAAA,GAAU,wBAAA,CAAyB,KAAK,IAAA;AAC/DC,gBAAAA,gBAAAA,EAAkBX,GAAKU,EAAAA,OAAAA,GAAU,2BAAA,CAA4B,KAAK;AACpE,aAAA,CAAA;AACF,SAAA;QAEA,MAAME,cAAAA,CAAAA,CAAeP,IAAI,EAAEL,GAAG,EAAA;AAC5B,YAAA,MAAMa,OAAOd,qBAAsBC,CAAAA,GAAAA,CAAAA;YAEnC,OAAOc,MAAAA,CAAOC,UAAU,CAACC,QAAQ,CAACC,MAAM,CAACZ,MAAMR,WAAa,EAAA;AAAEgB,gBAAAA;AAAK,aAAA,CAAA;AACrE,SAAA;QAEA,MAAMK,aAAAA,CAAAA,CAAcb,IAAI,EAAEL,GAAG,EAAA;AAC3B,YAAA,MAAMa,OAAOd,qBAAsBC,CAAAA,GAAAA,CAAAA;YAEnC,OAAOc,MAAAA,CAAOC,UAAU,CAACC,QAAQ,CAACG,KAAK,CAACd,MAAMR,WAAa,EAAA;AAAEgB,gBAAAA;AAAK,aAAA,CAAA;AACpE,SAAA;AAEA,QAAA,MAAMO,eAAcpB,GAAG,EAAA;AACrB,YAAA,MAAMa,OAAOd,qBAAsBC,CAAAA,GAAAA,CAAAA;YAEnC,OAAOc,MAAAA,CAAOC,UAAU,CAACC,QAAQ,CAACK,KAAK,CAACrB,GAAAA,CAAIqB,KAAK,EAAExB,WAAa,EAAA;AAAEgB,gBAAAA;AAAK,aAAA,CAAA;AACzE,SAAA;AAEA,QAAA,MAAMS,eAActB,GAAG,EAAA;AACrB,YAAA,MAAMa,OAAOd,qBAAsBC,CAAAA,GAAAA,CAAAA;YAEnC,OAAOc,MAAAA,CAAOC,UAAU,CAACQ,QAAQ,CAACF,KAAK,CAACrB,GAAAA,CAAIqB,KAAK,EAAExB,WAAa,EAAA;AAAEgB,gBAAAA;AAAK,aAAA,CAAA;AACzE,SAAA;QAEA,MAAMW,aAAAA,CAAAA,CAAcnB,IAAI,EAAEL,GAAG,EAAA;AAC3B,YAAA,MAAMa,OAAOd,qBAAsBC,CAAAA,GAAAA,CAAAA;YAEnC,OAAOc,MAAAA,CAAOC,UAAU,CAACQ,QAAQ,CAACJ,KAAK,CAACd,MAAMR,WAAa,EAAA;AAAEgB,gBAAAA;AAAK,aAAA,CAAA;AACpE;AACF,KAAA;IAEA,IAAIY,IAAAA;AAEJ,IAAA,IAAI7B,aAAaC,WAAc,CAAA,EAAA;AAC7B4B,QAAAA,IAAAA,GAAOC,0BAA2B,CAAA;AAAE7B,YAAAA;AAAY,SAAA,CAAA;KAC3C,MAAA;AACL4B,QAAAA,IAAAA,GAAOE,8BAA+B,CAAA;AAAE9B,YAAAA;AAAY,SAAA,CAAA;AACtD;AAEA,IAAA,OAAO+B,OAAOC,MAAM,CAACD,MAAOE,CAAAA,MAAM,CAAC3B,KAAQsB,CAAAA,EAAAA,IAAAA,CAAAA;AAC7C;;;;"}