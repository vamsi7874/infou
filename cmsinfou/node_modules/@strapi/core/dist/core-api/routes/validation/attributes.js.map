{"version":3,"file":"attributes.js","sources":["../../../../src/core-api/routes/validation/attributes.ts"],"sourcesContent":["/**\n * @file This module provides a set of functions to convert Strapi schema attributes into Zod schemas.\n * It handles various attribute types, including primitive types, components, dynamic zones, media, and relations.\n * The module also provides functions to create input schemas for these attributes, which are used for validation\n * of incoming data.\n */\n\nimport { type Schema, UID } from '@strapi/types';\n\nimport {\n  relations,\n  maybeRequired,\n  maybeReadonly,\n  maybeWithDefault,\n  maybeWithMinMax,\n  augmentSchema,\n} from '@strapi/utils';\nimport { z } from 'zod/v4';\n\nimport { BOOLEAN_LITERAL_VALUES } from './constants';\n\n// eslint-disable-next-line import/no-cycle\nimport { CoreComponentRouteValidator } from './component';\nimport { CoreContentTypeRouteValidator } from './content-type';\n\nimport { safeSchemaCreation } from './utils';\n\n/**\n * Converts a BigInteger attribute to a Zod schema.\n * @param attribute - The BigInteger attribute object from the Strapi schema.\n * @returns A Zod schema representing the BigInteger field.\n */\nexport const bigIntegerToSchema = (attribute: Schema.Attribute.BigInteger): z.Schema => {\n  const { writable, required, min, max, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.string(), [\n    (schema) => (min !== undefined ? schema.min(min as unknown as number) : schema),\n    (schema) => (max !== undefined ? schema.max(max as unknown as number) : schema),\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('A biginteger field');\n};\n\n/**\n * Converts a blocks attribute to a Zod schema.\n * @returns A Zod schema representing the blocks field.\n */\nexport const blocksToSchema = (): z.Schema => {\n  return z.array(z.any()).describe('A blocks field');\n};\n\n/**\n * Converts a boolean attribute to a Zod schema.\n * @param attribute - The Boolean attribute object from the Strapi schema.\n * @returns A Zod schema representing the boolean field.\n */\nexport const booleanToSchema = (attribute: Schema.Attribute.Boolean): z.Schema => {\n  const { writable, required, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.boolean(), [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('A boolean field');\n};\n\n/**\n * Converts a component attribute to a Zod schema.\n * @param attribute - The Component attribute object from the Strapi schema.\n * @returns A Zod schema representing the component field.\n */\nexport const componentToSchema = (\n  attribute: Schema.Attribute.Component<UID.Component, boolean>\n): z.Schema => {\n  const { writable, required, min, max, component, repeatable } = attribute;\n\n  const componentSchema = safeSchemaCreation(\n    component,\n    () => new CoreComponentRouteValidator(strapi, component).entry\n  ) as z.ZodType;\n\n  const baseSchema = repeatable ? z.array(componentSchema) : componentSchema;\n\n  const schema = augmentSchema(baseSchema, [\n    (schema) => (min !== undefined && schema instanceof z.ZodArray ? schema.min(min) : schema),\n    (schema) => (max !== undefined && schema instanceof z.ZodArray ? schema.max(max) : schema),\n    maybeRequired(required),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('A component field');\n};\n\n/**\n * Converts a date attribute to a Zod schema.\n * @param attribute - The Date attribute object from the Strapi schema.\n * @returns A Zod schema representing the date field.\n */\nexport const dateToSchema = (attribute: Schema.Attribute.Date): z.Schema => {\n  const { writable, required, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.string(), [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('A date field');\n};\n\n/**\n * Converts a datetime attribute to a Zod schema.\n * @param attribute - The DateTime attribute object from the Strapi schema.\n * @returns A Zod schema representing the datetime field.\n */\nexport const datetimeToSchema = (attribute: Schema.Attribute.DateTime): z.Schema => {\n  const { writable, required, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.string(), [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('A datetime field');\n};\n\n/**\n * Converts a decimal attribute to a Zod schema.\n * @param attribute - The Decimal attribute object from the Strapi schema.\n * @returns A Zod schema representing the decimal field.\n */\nexport const decimalToSchema = (attribute: Schema.Attribute.Decimal): z.Schema => {\n  const { writable, required, min, max, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.number(), [\n    maybeWithMinMax(min, max),\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('A decimal field');\n};\n\n/**\n * Converts a dynamic zone attribute to a Zod schema.\n * @param attribute - The DynamicZone attribute object from the Strapi schema.\n * @returns A Zod schema representing the dynamic zone field.\n */\nexport const dynamicZoneToSchema = (attribute: Schema.Attribute.DynamicZone): z.Schema => {\n  const { writable, required, min, max } = attribute;\n\n  const baseSchema = z.array(z.any());\n\n  const schema = augmentSchema(baseSchema, [\n    maybeWithMinMax(min, max),\n    maybeRequired(required),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('A dynamic zone field');\n};\n\n/**\n * Converts an email attribute to a Zod schema.\n * @param attribute - The Email attribute object from the Strapi schema.\n * @returns A Zod schema representing the email field.\n */\nexport const emailToSchema = (attribute: Schema.Attribute.Email): z.Schema => {\n  const { writable, required, default: defaultValue, minLength, maxLength } = attribute;\n\n  const baseSchema = z.email();\n\n  const schema = augmentSchema(baseSchema, [\n    maybeWithMinMax(minLength, maxLength),\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('An email field');\n};\n\n/**\n * Converts an enumeration attribute to a Zod schema.\n * @param attribute - The Enumeration attribute object from the Strapi schema.\n * @returns A Zod schema representing the enumeration field.\n */\nexport const enumToSchema = (attribute: Schema.Attribute.Enumeration<string[]>): z.Schema => {\n  const { writable, required, default: defaultValue, enum: enumValues } = attribute;\n\n  const baseSchema = z.enum(enumValues);\n\n  const schema = augmentSchema(baseSchema, [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('An enum field');\n};\n\n/**\n * Converts a float attribute to a Zod schema.\n * @param attribute - The Float attribute object from the Strapi schema.\n * @returns A Zod schema representing the float field.\n */\nexport const floatToSchema = (attribute: Schema.Attribute.Float): z.Schema => {\n  const { writable, required, min, max, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.number(), [\n    maybeWithMinMax(min, max),\n    maybeRequired(required),\n    maybeReadonly(writable),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('A float field');\n};\n\n/**\n * Converts an integer attribute to a Zod schema.\n * @param attribute - The Integer attribute object from the Strapi schema.\n * @returns A Zod schema representing the integer field.\n */\nexport const integerToSchema = (attribute: Schema.Attribute.Integer): z.Schema => {\n  const { writable, required, min, max, default: defaultValue } = attribute;\n\n  const baseSchema = z.number().int();\n\n  const schema = augmentSchema(baseSchema, [\n    maybeWithMinMax(min, max),\n    maybeRequired(required),\n    maybeReadonly(writable),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('An integer field');\n};\n\n/**\n * Converts a JSON attribute to a Zod schema.\n * @param attribute - The JSON attribute object from the Strapi schema.\n * @returns A Zod schema representing the JSON field.\n */\nexport const jsonToSchema = (attribute: Schema.Attribute.JSON): z.Schema => {\n  const { writable, required, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.any(), [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('A JSON field');\n};\n\n/**\n * Converts a media attribute to a Zod schema.\n * @param attribute - The Media attribute object from the Strapi schema.\n * @returns A Zod schema representing the media field.\n */\nexport const mediaToSchema = (\n  attribute: Schema.Attribute.Media<Schema.Attribute.MediaKind | undefined, boolean>\n): z.Schema => {\n  const { writable, required, multiple } = attribute;\n\n  const uploadPlugin = strapi.plugin('upload');\n\n  // @ts-expect-error there is a mismatch between a raw module and a loader module\n  const fileSchema = uploadPlugin.contentTypes.file as Struct.ContentTypeSchema;\n\n  const mediaSchema = safeSchemaCreation(\n    fileSchema.uid,\n    () => new CoreContentTypeRouteValidator(strapi, fileSchema.uid).document\n  ) as z.ZodType;\n\n  const baseSchema = multiple ? z.array(mediaSchema) : mediaSchema;\n\n  const schema = augmentSchema(baseSchema, [maybeRequired(required), maybeReadonly(writable)]);\n\n  return schema.describe('A media field');\n};\n\n/**\n * Converts a relation attribute to a Zod schema.\n * @param attribute - The Relation attribute object from the Strapi schema.\n * @returns A Zod schema representing the relational field.\n */\nexport const relationToSchema = (attribute: Schema.Attribute.Relation): z.Schema => {\n  if (!('target' in attribute)) {\n    return z.any();\n  }\n\n  const { writable, required, target } = attribute as Schema.Attribute.RelationWithTarget;\n\n  const targetSchema = safeSchemaCreation(\n    target,\n    () => new CoreContentTypeRouteValidator(strapi, target).document\n  ) as z.ZodType;\n\n  const baseSchema = relations.isAnyToMany(attribute) ? z.array(targetSchema) : targetSchema;\n\n  const schema = augmentSchema(baseSchema, [maybeRequired(required), maybeReadonly(writable)]);\n\n  return schema.describe('A relational field');\n};\n\n/**\n * Converts a string, text, rich text, or password attribute to a Zod schema.\n * @param attribute - The String, Text, RichText, or Password attribute object from the Strapi schema.\n * @returns A Zod schema representing the field.\n */\nexport const stringToSchema = (\n  attribute:\n    | Schema.Attribute.String\n    | Schema.Attribute.Text\n    | Schema.Attribute.RichText\n    | Schema.Attribute.Password\n): z.Schema => {\n  const { writable, required, default: defaultValue, minLength, maxLength } = attribute;\n\n  const schema = augmentSchema(z.string(), [\n    maybeWithMinMax(minLength, maxLength),\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe(`A ${attribute.type} field`);\n};\n\n/**\n * Converts a time attribute to a Zod schema.\n * @param attribute - The Time attribute object from the Strapi schema.\n * @returns A Zod schema representing the time field.\n */\nexport const timeToSchema = (attribute: Schema.Attribute.Time): z.Schema => {\n  const { writable, required, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.string(), [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('A time field');\n};\n\n/**\n * Converts a timestamp attribute to a Zod schema.\n * @param attribute - The Timestamp attribute object from the Strapi schema.\n * @returns A Zod schema representing the timestamp field.\n */\nexport const timestampToSchema = (attribute: Schema.Attribute.Timestamp): z.Schema => {\n  const { writable, required, default: defaultValue } = attribute;\n\n  const baseSchema = z.union([z.string(), z.number()]);\n\n  const schema = augmentSchema(baseSchema, [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('A timestamp field');\n};\n\n/**\n * Converts a UID attribute to a Zod schema.\n * @param attribute - The UID attribute object from the Strapi schema.\n * @returns A Zod schema representing the UID field.\n */\nexport const uidToSchema = (attribute: Schema.Attribute.UID): z.Schema => {\n  const { writable, required, default: defaultValue, minLength, maxLength } = attribute;\n\n  const schema = augmentSchema(z.string(), [\n    maybeWithMinMax(minLength, maxLength),\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n    maybeReadonly(writable),\n  ]);\n\n  return schema.describe('A UID field');\n};\n\n/**\n * Converts a BigInteger attribute to a Zod schema for input validation.\n * @param attribute - The BigInteger attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the BigInteger field.\n */\nexport const bigIntegerToInputSchema = (attribute: Schema.Attribute.BigInteger) => {\n  const { required, min, max, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.string(), [\n    (schema) => (min !== undefined ? schema.min(min as unknown as number) : schema),\n    (schema) => (max !== undefined ? schema.max(max as unknown as number) : schema),\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('A biginteger field');\n};\n\n/**\n * Converts a blocks attribute to a Zod schema for input validation.\n * @returns A Zod schema for input validation of the blocks field.\n */\nexport const blocksToInputSchema = () => {\n  // TODO: better support blocks data structure\n  return z.array(z.any()).describe('A blocks field');\n};\n\n/**\n * Converts a boolean attribute to a Zod schema for input validation.\n * @param attribute - The Boolean attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the boolean field.\n */\nexport const booleanToInputSchema = (attribute: Schema.Attribute.Boolean) => {\n  const { required, default: defaultValue } = attribute;\n\n  const baseSchema = z.enum(BOOLEAN_LITERAL_VALUES);\n\n  const schema = augmentSchema(baseSchema, [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('A boolean field');\n};\n\n/**\n * Converts a component attribute to a Zod schema for input validation.\n * @param attribute - The Component attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the component field.\n */\nexport const componentToInputSchema = (\n  attribute: Schema.Attribute.Component<UID.Component, boolean>\n) => {\n  const { required, repeatable, min, max } = attribute;\n\n  const baseSchema = repeatable ? z.array(z.any()) : z.any();\n\n  const schema = augmentSchema(baseSchema, [\n    (schema) => (min !== undefined && schema instanceof z.ZodArray ? schema.min(min) : schema),\n    (schema) => (max !== undefined && schema instanceof z.ZodArray ? schema.max(max) : schema),\n    maybeRequired(required),\n  ]);\n\n  return schema.describe('A component field');\n};\n\n/**\n * Converts a date attribute to a Zod schema for input validation.\n * @param attribute - The Date attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the date field.\n */\nexport const dateToInputSchema = (attribute: Schema.Attribute.Date) => {\n  const { required, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.string(), [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('A date field');\n};\n\n/**\n * Converts a datetime attribute to a Zod schema for input validation.\n * @param attribute - The DateTime attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the datetime field.\n */\nexport const datetimeToInputSchema = (attribute: Schema.Attribute.DateTime) => {\n  const { required, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.string(), [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('A datetime field');\n};\n\n/**\n * Converts a decimal attribute to a Zod schema for input validation.\n * @param attribute - The Decimal attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the decimal field.\n */\nexport const decimalToInputSchema = (attribute: Schema.Attribute.Decimal) => {\n  const { required, min, max, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.number(), [\n    maybeWithMinMax(min, max),\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('A decimal field');\n};\n\n/**\n * Converts a dynamic zone attribute to a Zod schema for input validation.\n * @param attribute - The DynamicZone attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the dynamic zone field.\n */\nexport const dynamicZoneToInputSchema = (attribute: Schema.Attribute.DynamicZone) => {\n  const { required, min, max } = attribute;\n\n  const baseSchema = z.array(z.any());\n\n  const schema = augmentSchema(baseSchema, [maybeWithMinMax(min, max), maybeRequired(required)]);\n\n  return schema.describe('A dynamic zone field');\n};\n\n/**\n * Converts an email attribute to a Zod schema for input validation.\n * @param attribute - The Email attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the email field.\n */\nexport const emailToInputSchema = (attribute: Schema.Attribute.Email) => {\n  const { required, default: defaultValue, minLength, maxLength } = attribute;\n\n  const baseSchema = z.email();\n\n  const schema = augmentSchema(baseSchema, [\n    maybeWithMinMax(minLength, maxLength),\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('An email field');\n};\n\n/**\n * Converts an enumeration attribute to a Zod schema for input validation.\n * @param attribute - The Enumeration attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the enumeration field.\n */\nexport const enumerationToInputSchema = (attribute: Schema.Attribute.Enumeration<string[]>) => {\n  const { required, default: defaultValue, enum: enumValues } = attribute;\n\n  const baseSchema = z.enum(enumValues);\n\n  const schema = augmentSchema(baseSchema, [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('An enum field');\n};\n\n/**\n * Converts a float attribute to a Zod schema for input validation.\n * @param attribute - The Float attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the float field.\n */\nexport const floatToInputSchema = (attribute: Schema.Attribute.Float) => {\n  const { required, min, max, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.number(), [\n    maybeWithMinMax(min, max),\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('A float field');\n};\n\n/**\n * Converts an integer attribute to a Zod schema for input validation.\n * @param attribute - The Integer attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the integer field.\n */\nexport const integerToInputSchema = (attribute: Schema.Attribute.Integer) => {\n  const { required, min, max, default: defaultValue } = attribute;\n\n  const baseSchema = z.number().int();\n\n  const schema = augmentSchema(baseSchema, [\n    maybeWithMinMax(min, max),\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('A float field');\n};\n\n/**\n * Converts a JSON attribute to a Zod schema for input validation.\n * @param attribute - The JSON attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the JSON field.\n */\nexport const jsonToInputSchema = (attribute: Schema.Attribute.JSON) => {\n  const { required, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.any(), [maybeRequired(required), maybeWithDefault(defaultValue)]);\n\n  return schema.describe('A JSON field');\n};\n\n/**\n * Converts a media attribute to a Zod schema for input validation.\n * @param attribute - The Media attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the media field.\n */\nexport const mediaToInputSchema = (\n  attribute: Schema.Attribute.Media<Schema.Attribute.MediaKind | undefined, boolean>\n) => {\n  const { required, multiple } = attribute;\n\n  const baseSchema = multiple ? z.array(z.any()) : z.any();\n\n  const schema = augmentSchema(baseSchema, [maybeRequired(required)]);\n\n  return schema.describe('A media field');\n};\n\n/**\n * Converts a relation attribute to a Zod schema for input validation.\n * @param attribute - The Relation attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the relational field.\n */\nexport const relationToInputSchema = (attribute: Schema.Attribute.Relation) => {\n  const { required } = attribute;\n\n  const isToMany = relations.isAnyToMany(attribute);\n  const uuid = z.string().uuid();\n  const baseSchema = isToMany ? z.array(uuid) : uuid;\n\n  const schema = augmentSchema(baseSchema, [maybeRequired(required)]);\n\n  return schema.describe('A relational field');\n};\n\n/**\n * Converts a string, text, rich text, or password attribute to a Zod schema for input validation.\n * @param attribute - The String, Text, RichText, or Password attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the field.\n */\nexport const textToInputSchema = (\n  attribute:\n    | Schema.Attribute.String\n    | Schema.Attribute.Text\n    | Schema.Attribute.RichText\n    | Schema.Attribute.Password\n) => {\n  const { required, default: defaultValue, minLength, maxLength } = attribute;\n\n  const schema = augmentSchema(z.string(), [\n    maybeWithMinMax(minLength, maxLength),\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe(`A ${attribute.type} field`);\n};\n\n/**\n * Converts a time attribute to a Zod schema for input validation.\n * @param attribute - The Time attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the time field.\n */\nexport const timeToInputSchema = (attribute: Schema.Attribute.Time) => {\n  const { required, default: defaultValue } = attribute;\n\n  const schema = augmentSchema(z.string(), [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('A time field');\n};\n\n/**\n * Converts a timestamp attribute to a Zod schema for input validation.\n * @param attribute - The Timestamp attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the timestamp field.\n */\nexport const timestampToInputSchema = (attribute: Schema.Attribute.Timestamp) => {\n  const { required, default: defaultValue } = attribute;\n\n  const baseSchema = z.union([z.string(), z.number()]);\n\n  const schema = augmentSchema(baseSchema, [\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('A timestamp field');\n};\n\n/**\n * Converts a UID attribute to a Zod schema for input validation.\n * @param attribute - The UID attribute object from the Strapi schema.\n * @returns A Zod schema for input validation of the UID field.\n */\nexport const uidToInputSchema = (attribute: Schema.Attribute.UID) => {\n  const { required, default: defaultValue, minLength, maxLength } = attribute;\n\n  const schema = augmentSchema(z.string(), [\n    maybeWithMinMax(minLength, maxLength),\n    maybeRequired(required),\n    maybeWithDefault(defaultValue),\n  ]);\n\n  return schema.describe('A UID field');\n};\n"],"names":["bigIntegerToSchema","attribute","writable","required","min","max","default","defaultValue","schema","augmentSchema","z","string","undefined","maybeRequired","maybeWithDefault","maybeReadonly","describe","blocksToSchema","array","any","booleanToSchema","boolean","componentToSchema","component","repeatable","componentSchema","safeSchemaCreation","CoreComponentRouteValidator","strapi","entry","baseSchema","ZodArray","dateToSchema","datetimeToSchema","decimalToSchema","number","maybeWithMinMax","dynamicZoneToSchema","emailToSchema","minLength","maxLength","email","enumToSchema","enum","enumValues","floatToSchema","integerToSchema","int","jsonToSchema","mediaToSchema","multiple","uploadPlugin","plugin","fileSchema","contentTypes","file","mediaSchema","uid","CoreContentTypeRouteValidator","document","relationToSchema","target","targetSchema","relations","isAnyToMany","stringToSchema","type","timeToSchema","timestampToSchema","union","uidToSchema","bigIntegerToInputSchema","blocksToInputSchema","booleanToInputSchema","BOOLEAN_LITERAL_VALUES","componentToInputSchema","dateToInputSchema","datetimeToInputSchema","decimalToInputSchema","dynamicZoneToInputSchema","emailToInputSchema","enumerationToInputSchema","floatToInputSchema","integerToInputSchema","jsonToInputSchema","mediaToInputSchema","relationToInputSchema","isToMany","uuid","textToInputSchema","timeToInputSchema","timestampToInputSchema","uidToInputSchema"],"mappings":"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"}