{"version":3,"file":"content-type.js","sources":["../../../../src/core-api/routes/validation/content-type.ts"],"sourcesContent":["import type { Schema, UID } from '@strapi/types';\n\nimport { contentTypes } from '@strapi/utils';\nimport * as z from 'zod/v4';\n\n// eslint-disable-next-line import/no-cycle\nimport { createAttributesInputSchema, createAttributesSchema } from './mappers';\nimport { AbstractCoreRouteValidator } from './common';\n\nexport type QueryParam =\n  | 'fields'\n  | 'populate'\n  | 'sort'\n  | 'status'\n  | 'locale'\n  | 'pagination'\n  | 'filters'\n  | '_q';\n\n/**\n * A validator for core content-type routes.\n *\n * Provides validation schemas and utilities for handling content-type-specific route validation.\n * Extends the base AbstractRouteValidator with schema-aware validation for Strapi content types.\n *\n * @example\n * ```ts\n * const strapi = // ... strapi instance\n * const uid = 'api::article.article'\n * const validator = new CoreContentTypeRouteValidator(strapi, uid);\n *\n * // Get validation schema for document\n * const documentSchema = validator.document;\n *\n * // Validate query parameters with schema awareness\n * const querySchema = validator.queryParams(['fields', 'populate', 'sort']);\n * ```\n */\nexport class CoreContentTypeRouteValidator extends AbstractCoreRouteValidator<UID.ContentType> {\n  /**\n   * Generates a validation schema for document IDs\n   *\n   * @returns A schema that validates UUIDs\n   *\n   * @example\n   * ```ts\n   * const validator = new CoreContentTypeRouteValidator(strapi, uid);\n   * const idSchema = validator.documentID;\n   * ```\n   */\n  get documentID() {\n    return z.uuid().describe('The document ID, represented by a UUID');\n  }\n\n  /**\n   * Generates a comprehensive validation schema for a single document.\n   *\n   * Combines scalar fields and populatable fields into a single schema.\n   *\n   * @returns A schema for validating complete documents\n   *\n   * @example\n   * ```ts\n   * const validator = new CoreContentTypeRouteValidator(strapi, uid);\n   * const docSchema = validator.document;\n   * ```\n   */\n  get document() {\n    const entries = Object.entries({ ...this._scalarFields, ...this._populatableFields });\n\n    const sanitizedAttributes = entries\n      // Remove passwords from the attribute list\n      .filter(([, attribute]) => !['password'].includes(attribute.type));\n\n    // Merge all attributes into a single schema\n    const attributesSchema = createAttributesSchema(sanitizedAttributes);\n\n    return z\n      .object({\n        documentId: this.documentID,\n        id: z.number(),\n      })\n      .extend(attributesSchema.shape);\n  }\n\n  /**\n   * Generates a validation schema for an array of documents\n   *\n   * @returns A schema for validating arrays of documents\n   *\n   * @example\n   * ```ts\n   * const validator = new CoreContentTypeRouteValidator(strapi, uid);\n   * const docsSchema = validator.documents;\n   * ```\n   */\n  get documents() {\n    return z.array(this.document);\n  }\n\n  /**\n   * Schema-aware fields validation that restricts to actual model fields\n   */\n  protected get schemaAwareQueryFields() {\n    return this.scalarFieldsArray\n      .readonly()\n      .describe(\n        `The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones`\n      );\n  }\n\n  /**\n   * Schema-aware populate validation that restricts to actual populatable fields\n   */\n  protected get schemaAwareQueryPopulate() {\n    const wildcardPopulate = z\n      .literal('*')\n      .readonly()\n      .describe(\n        'Populate all the first level relations, components, files, and dynamic zones for the entry'\n      );\n\n    const singleFieldPopulate = this.populatableFieldsEnum\n      .readonly()\n      .describe('Populate a single relation, component, file, or dynamic zone');\n\n    const multiPopulate = this.populatableFieldsArray.describe(\n      'Populate a selection of multiple relations, components, files, or dynamic zones'\n    );\n\n    return z.union([wildcardPopulate, singleFieldPopulate, multiPopulate]);\n  }\n\n  /**\n   * Schema-aware sort validation that restricts to actual model fields\n   */\n  protected get schemaAwareQuerySort() {\n    const orderDirection = z.enum(['asc', 'desc']);\n\n    // TODO: Handle nested sorts but very low priority, very little usage\n    return z\n      .union([\n        this.scalarFieldsEnum, // 'name' | 'title'\n        this.scalarFieldsArray, // ['name', 'title']\n        this.fieldRecord(orderDirection), // { name: 'desc' } | { title: 'asc' }\n        z.array(this.fieldRecord(orderDirection)), // [{ name: 'desc'}, { title: 'asc' }]\n      ])\n      .describe('Sort the result');\n  }\n\n  /**\n   * Schema-aware filters validation that restricts to actual model fields\n   */\n  protected get schemaAwareFilters() {\n    return z.record(this.scalarFieldsEnum, z.any()).describe('Filters to apply to the query');\n  }\n\n  get locale() {\n    return z.string().describe('Select a locale');\n  }\n\n  get status() {\n    return z\n      .enum(['draft', 'published'])\n      .describe('Fetch documents based on their status. Default to \"published\" if not specified.');\n  }\n\n  get data() {\n    const isWritableAttribute = ([attributeName]: [string, Schema.Attribute.AnyAttribute]) => {\n      return contentTypes.isWritableAttribute(this._schema, attributeName);\n    };\n\n    const entries = Object.entries({ ...this._scalarFields, ...this._populatableFields });\n\n    const sanitizedAttributes = entries\n      // Remove non-writable attributes\n      .filter(isWritableAttribute);\n\n    return createAttributesInputSchema(sanitizedAttributes);\n  }\n\n  get query() {\n    return z.string();\n  }\n\n  get body() {\n    return z.object({ data: this.data });\n  }\n\n  get partialBody() {\n    return z.object({ data: this.data.partial() });\n  }\n\n  /**\n   * Creates validation schemas for query parameters\n   *\n   * @param params - Array of query parameters to validate ('fields', 'populate', 'sort', ...)\n   * @returns Object containing validation schemas for requested parameters\n   *\n   * @example\n   * ```ts\n   * const validator = new CoreContentTypeRouteValidator(strapi, uid);\n   * const querySchemas = validator.queryParams(['fields', 'populate']);\n   * ```\n   */\n  queryParams(params: QueryParam[]): Partial<Record<QueryParam, z.Schema>> {\n    const map: Record<QueryParam, () => z.Schema> = {\n      fields: () => this.schemaAwareQueryFields.optional(),\n      populate: () => this.schemaAwareQueryPopulate.optional(),\n      sort: () => this.schemaAwareQuerySort.optional(),\n      filters: () => this.schemaAwareFilters.optional(),\n      locale: () => this.locale.optional(),\n      pagination: () => this.pagination.optional(),\n      status: () => this.status.optional(),\n      _q: () => this.query.optional(),\n    } as const;\n\n    return params.reduce(\n      (acc, param) => ({ ...acc, [param]: map[param]() }),\n      {} as Partial<Record<QueryParam, z.Schema>>\n    );\n  }\n}\n"],"names":["CoreContentTypeRouteValidator","AbstractCoreRouteValidator","documentID","z","uuid","describe","document","entries","Object","_scalarFields","_populatableFields","sanitizedAttributes","filter","attribute","includes","type","attributesSchema","createAttributesSchema","object","documentId","id","number","extend","shape","documents","array","schemaAwareQueryFields","scalarFieldsArray","readonly","schemaAwareQueryPopulate","wildcardPopulate","literal","singleFieldPopulate","populatableFieldsEnum","multiPopulate","populatableFieldsArray","union","schemaAwareQuerySort","orderDirection","enum","scalarFieldsEnum","fieldRecord","schemaAwareFilters","record","any","locale","string","status","data","isWritableAttribute","attributeName","contentTypes","_schema","createAttributesInputSchema","query","body","partialBody","partial","queryParams","params","map","fields","optional","populate","sort","filters","pagination","_q","reduce","acc","param"],"mappings":"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"}