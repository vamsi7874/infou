{"version":3,"file":"index.js","sources":["../../../src/core-api/routes/index.ts"],"sourcesContent":["import type { Core, Schema } from '@strapi/types';\n\nimport { contentTypes, contentTypes as contentTypeUtils } from '@strapi/utils';\nimport * as z from 'zod/v4';\nimport type { QueryParam } from './validation/content-type';\n\nimport { CoreContentTypeRouteValidator } from './validation';\n\nexport const createRoutes = ({\n  strapi,\n  contentType,\n}: {\n  strapi: Core.Strapi;\n  contentType: Schema.ContentType;\n}) => {\n  if (contentTypeUtils.isSingleType(contentType)) {\n    return getSingleTypeRoutes(contentType, strapi);\n  }\n\n  return getCollectionTypeRoutes(contentType, strapi);\n};\n\nconst getSingleTypeRoutes = (\n  schema: Schema.ContentType,\n  strapi: Core.Strapi\n): Record<string, Partial<Core.Route>> => {\n  const { uid, info } = schema;\n\n  const validator = new CoreContentTypeRouteValidator(strapi, uid);\n  const conditionalQueryParams = getConditionalQueryParams(schema);\n\n  return {\n    find: {\n      method: 'GET',\n      path: `/${info.singularName}`,\n      handler: `${uid}.find`,\n      request: {\n        query: validator.queryParams(['fields', 'populate', 'filters', ...conditionalQueryParams]),\n      },\n      response: z.object({ data: validator.document }),\n      config: {},\n    },\n    update: {\n      method: 'PUT',\n      path: `/${info.singularName}`,\n      handler: `${uid}.update`,\n      request: {\n        query: validator.queryParams(['fields', 'populate', ...conditionalQueryParams]),\n        body: { 'application/json': validator.partialBody },\n      },\n      response: z.object({ data: validator.document }),\n      config: {},\n    },\n    delete: {\n      method: 'DELETE',\n      path: `/${info.singularName}`,\n      handler: `${uid}.delete`,\n      request: {\n        query: validator.queryParams(['fields', 'populate', ...conditionalQueryParams]),\n      },\n      response: z.object({ data: validator.document }),\n      config: {},\n    },\n  };\n};\n\nconst getCollectionTypeRoutes = (\n  schema: Schema.ContentType,\n  strapi: Core.Strapi\n): Record<string, Partial<Core.Route>> => {\n  const { uid, info } = schema;\n\n  const validator = new CoreContentTypeRouteValidator(strapi, uid);\n  const conditionalQueryParams = getConditionalQueryParams(schema);\n\n  return {\n    find: {\n      method: 'GET',\n      path: `/${info.pluralName}`,\n      handler: `${uid}.find`,\n      request: {\n        query: validator.queryParams([\n          'fields',\n          'filters',\n          '_q',\n          'pagination',\n          'sort',\n          'populate',\n          ...conditionalQueryParams,\n        ]),\n      },\n      response: z.object({ data: validator.documents }),\n      config: {},\n    },\n    findOne: {\n      method: 'GET',\n      path: `/${info.pluralName}/:id`,\n      handler: `${uid}.findOne`,\n      request: {\n        params: { id: validator.documentID },\n        query: validator.queryParams([\n          'fields',\n          'populate',\n          'filters',\n          'sort',\n          ...conditionalQueryParams,\n        ]),\n      },\n      response: z.object({ data: validator.document }),\n    },\n    create: {\n      method: 'POST',\n      path: `/${info.pluralName}`,\n      handler: `${uid}.create`,\n      request: {\n        query: validator.queryParams(['fields', 'populate', ...conditionalQueryParams]),\n        body: { 'application/json': validator.body },\n      },\n      response: z.object({ data: validator.document }),\n      config: {},\n    },\n    update: {\n      method: 'PUT',\n      path: `/${info.pluralName}/:id`,\n      handler: `${uid}.update`,\n      request: {\n        query: validator.queryParams(['fields', 'populate', ...conditionalQueryParams]),\n        params: { id: validator.documentID },\n        body: { 'application/json': validator.partialBody },\n      },\n      response: z.object({ data: validator.document }),\n    },\n    delete: {\n      method: 'DELETE',\n      path: `/${info.pluralName}/:id`,\n      handler: `${uid}.delete`,\n      request: {\n        query: validator.queryParams(['fields', 'populate', 'filters', ...conditionalQueryParams]),\n        params: { id: validator.documentID },\n      },\n      response: z.object({ data: validator.document }),\n    },\n  };\n};\n\nconst getConditionalQueryParams = (schema: Schema.ContentType) => {\n  const isLocalized = strapi.plugin('i18n').service('content-types').isLocalizedContentType(schema);\n  const hasDraftAndPublish = contentTypes.hasDraftAndPublish(schema);\n\n  return [\n    ...(isLocalized ? ['locale'] : []),\n    ...(hasDraftAndPublish ? ['status'] : []),\n  ] as QueryParam[];\n};\n"],"names":["createRoutes","strapi","contentType","contentTypeUtils","isSingleType","getSingleTypeRoutes","getCollectionTypeRoutes","schema","uid","info","validator","CoreContentTypeRouteValidator","conditionalQueryParams","getConditionalQueryParams","find","method","path","singularName","handler","request","query","queryParams","response","z","object","data","document","config","update","body","partialBody","delete","pluralName","documents","findOne","params","id","documentID","create","isLocalized","plugin","service","isLocalizedContentType","hasDraftAndPublish","contentTypes"],"mappings":"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"}