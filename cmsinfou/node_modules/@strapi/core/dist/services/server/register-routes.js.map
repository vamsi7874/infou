{"version":3,"file":"register-routes.js","sources":["../../../src/services/server/register-routes.ts"],"sourcesContent":["import _ from 'lodash';\nimport type { Core } from '@strapi/types';\n\nconst createRouteScopeGenerator = (namespace: string) => (route: Core.RouteInput) => {\n  const prefix = namespace.endsWith('::') ? namespace : `${namespace}.`;\n\n  if (typeof route.handler === 'string') {\n    _.defaultsDeep(route, {\n      config: {\n        auth: {\n          scope: [`${route.handler.startsWith(prefix) ? '' : prefix}${route.handler}`],\n        },\n      },\n    });\n  }\n};\n\n/**\n * Register all routes\n */\nexport default (strapi: Core.Strapi) => {\n  registerAdminRoutes(strapi);\n  registerAPIRoutes(strapi);\n  registerPluginRoutes(strapi);\n};\n\n/**\n * Register admin routes\n * @param {import('../../').Strapi} strapi\n */\nconst registerAdminRoutes = (strapi: Core.Strapi) => {\n  const generateRouteScope = createRouteScopeGenerator(`admin::`);\n\n  // Instantiate function-like routers\n  // Mutate admin.routes in-place and make sure router factories are instantiated correctly\n  strapi.admin.routes = instantiateRouterInputs(strapi.admin.routes, strapi);\n\n  _.forEach(strapi.admin.routes, (router) => {\n    router.type = router.type || 'admin';\n    router.prefix = router.prefix || `/admin`;\n    router.routes.forEach((route) => {\n      generateRouteScope(route);\n      route.info = { pluginName: 'admin' };\n    });\n    strapi.server.routes(router);\n  });\n};\n\n/**\n * Register plugin routes\n * @param {import('../../').Strapi} strapi\n */\nconst registerPluginRoutes = (strapi: Core.Strapi) => {\n  for (const pluginName of Object.keys(strapi.plugins)) {\n    const plugin = strapi.plugins[pluginName];\n\n    const generateRouteScope = createRouteScopeGenerator(`plugin::${pluginName}`);\n\n    if (Array.isArray(plugin.routes)) {\n      plugin.routes.forEach((route) => {\n        generateRouteScope(route);\n        route.info = { pluginName };\n      });\n\n      strapi.server.routes({\n        type: 'admin',\n        prefix: `/${pluginName}`,\n        routes: plugin.routes,\n      });\n    } else {\n      // Instantiate function-like routers\n      // Mutate plugin.routes in-place and make sure router factories are instantiated correctly\n      plugin.routes = instantiateRouterInputs(plugin.routes, strapi);\n\n      _.forEach(plugin.routes, (router) => {\n        router.type = router.type ?? 'admin';\n        router.prefix = router.prefix ?? `/${pluginName}`;\n        router.routes.forEach((route) => {\n          generateRouteScope(route);\n          route.info = { pluginName };\n        });\n\n        strapi.server.routes(router);\n      });\n    }\n  }\n};\n\n/**\n * Register api routes\n */\nconst registerAPIRoutes = (strapi: Core.Strapi) => {\n  for (const apiName of Object.keys(strapi.apis)) {\n    const api = strapi.api(apiName);\n\n    const generateRouteScope = createRouteScopeGenerator(`api::${apiName}`);\n\n    // Mutate api.routes in-place and make sure router factories are instantiated correctly\n    api.routes = instantiateRouterInputs(api.routes, strapi);\n\n    _.forEach(api.routes, (router) => {\n      // TODO: remove once auth setup\n      // pass meta down to compose endpoint\n      router.type = 'content-api';\n      router.routes?.forEach((route) => {\n        generateRouteScope(route);\n        route.info = { apiName };\n      });\n\n      return strapi.server.routes(router);\n    });\n  }\n};\n\nconst instantiateRouterInputs = (\n  routers: Record<string, Core.RouterConfig>,\n  strapi: Core.Strapi\n): Record<string, Core.Router> => {\n  const entries = Object.entries(routers);\n\n  return entries.reduce((record, [key, inputOrCallback]) => {\n    const isCallback = typeof inputOrCallback === 'function';\n\n    return { ...record, [key]: isCallback ? inputOrCallback({ strapi }) : inputOrCallback };\n  }, {});\n};\n"],"names":["createRouteScopeGenerator","namespace","route","prefix","endsWith","handler","_","defaultsDeep","config","auth","scope","startsWith","strapi","registerAdminRoutes","registerAPIRoutes","registerPluginRoutes","generateRouteScope","admin","routes","instantiateRouterInputs","forEach","router","type","info","pluginName","server","Object","keys","plugins","plugin","Array","isArray","apiName","apis","api","routers","entries","reduce","record","key","inputOrCallback","isCallback"],"mappings":"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"}