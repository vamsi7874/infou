{"version":3,"file":"Register.js","sources":["../../../../../../../admin/src/pages/Auth/components/Register.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Box, Button, Flex, Grid, Typography, Link } from '@strapi/design-system';\nimport omit from 'lodash/omit';\nimport { useIntl } from 'react-intl';\nimport { NavLink, Navigate, useNavigate, useMatch, useLocation } from 'react-router-dom';\nimport { styled } from 'styled-components';\nimport * as yup from 'yup';\nimport { ValidationError } from 'yup';\n\nimport {\n  Register as RegisterUser,\n  RegisterAdmin,\n} from '../../../../../shared/contracts/authentication';\nimport { Form, FormHelpers } from '../../../components/Form';\nimport { InputRenderer } from '../../../components/FormInputs/Renderer';\nimport { useNpsSurveySettings } from '../../../components/NpsSurvey';\nimport { Logo } from '../../../components/UnauthenticatedLogo';\nimport { useTypedDispatch } from '../../../core/store/hooks';\nimport { useNotification } from '../../../features/Notifications';\nimport { useTracking } from '../../../features/Tracking';\nimport { useAPIErrorHandler } from '../../../hooks/useAPIErrorHandler';\nimport { LayoutContent, UnauthenticatedLayout } from '../../../layouts/UnauthenticatedLayout';\nimport { login } from '../../../reducer';\nimport {\n  useGetRegistrationInfoQuery,\n  useRegisterAdminMutation,\n  useRegisterUserMutation,\n} from '../../../services/auth';\nimport { isBaseQueryError } from '../../../utils/baseQuery';\nimport { getOrCreateDeviceId } from '../../../utils/deviceId';\nimport { getByteSize } from '../../../utils/strings';\nimport { translatedErrors } from '../../../utils/translatedErrors';\n\nconst REGISTER_USER_SCHEMA = yup.object().shape({\n  firstname: yup.string().trim().required(translatedErrors.required).nullable(),\n  lastname: yup.string().nullable(),\n  password: yup\n    .string()\n    .min(8, {\n      id: translatedErrors.minLength.id,\n      defaultMessage: 'Password must be at least 8 characters',\n      values: { min: 8 },\n    })\n    .test(\n      'max-bytes',\n      {\n        id: 'components.Input.error.contain.maxBytes',\n        defaultMessage: 'Password must be less than 73 bytes',\n      },\n      function (value) {\n        if (!value || typeof value !== 'string') return true; // validated elsewhere\n\n        const byteSize = getByteSize(value);\n        return byteSize <= 72;\n      }\n    )\n    .matches(/[a-z]/, {\n      message: {\n        id: 'components.Input.error.contain.lowercase',\n        defaultMessage: 'Password must contain at least 1 lowercase letter',\n      },\n    })\n    .matches(/[A-Z]/, {\n      message: {\n        id: 'components.Input.error.contain.uppercase',\n        defaultMessage: 'Password must contain at least 1 uppercase letter',\n      },\n    })\n    .matches(/\\d/, {\n      message: {\n        id: 'components.Input.error.contain.number',\n        defaultMessage: 'Password must contain at least 1 number',\n      },\n    })\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'Password is required',\n    })\n    .nullable(),\n  confirmPassword: yup\n    .string()\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'Confirm password is required',\n    })\n    .oneOf([yup.ref('password'), null], {\n      id: 'components.Input.error.password.noMatch',\n      defaultMessage: 'Passwords must match',\n    })\n    .nullable(),\n  registrationToken: yup.string().required({\n    id: translatedErrors.required.id,\n    defaultMessage: 'Registration token is required',\n  }),\n});\n\nconst REGISTER_ADMIN_SCHEMA = yup.object().shape({\n  firstname: yup\n    .string()\n    .trim()\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'Firstname is required',\n    })\n    .nullable(),\n  lastname: yup.string().nullable(),\n  password: yup\n    .string()\n    .min(8, {\n      id: translatedErrors.minLength.id,\n      defaultMessage: 'Password must be at least 8 characters',\n      values: { min: 8 },\n    })\n    .test(\n      'max-bytes',\n      {\n        id: 'components.Input.error.contain.maxBytes',\n        defaultMessage: 'Password must be less than 73 bytes',\n      },\n      function (value) {\n        if (!value) return true;\n        return new TextEncoder().encode(value).length <= 72;\n      }\n    )\n    .matches(/[a-z]/, {\n      message: {\n        id: 'components.Input.error.contain.lowercase',\n        defaultMessage: 'Password must contain at least 1 lowercase letter',\n      },\n    })\n    .matches(/[A-Z]/, {\n      message: {\n        id: 'components.Input.error.contain.uppercase',\n        defaultMessage: 'Password must contain at least 1 uppercase letter',\n      },\n    })\n    .matches(/\\d/, {\n      message: {\n        id: 'components.Input.error.contain.number',\n        defaultMessage: 'Password must contain at least 1 number',\n      },\n    })\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'Password is required',\n    })\n    .nullable(),\n  confirmPassword: yup\n    .string()\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'Confirm password is required',\n    })\n    .nullable()\n    .oneOf([yup.ref('password'), null], {\n      id: 'components.Input.error.password.noMatch',\n      defaultMessage: 'Passwords must match',\n    }),\n  email: yup\n    .string()\n    .email({\n      id: translatedErrors.email.id,\n      defaultMessage: 'Not a valid email',\n    })\n    .strict()\n    .lowercase({\n      id: translatedErrors.lowercase.id,\n      defaultMessage: 'Email must be lowercase',\n    })\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'Email is required',\n    })\n    .nullable(),\n});\n\ninterface RegisterProps {\n  hasAdmin?: boolean;\n}\n\ninterface RegisterFormValues {\n  firstname: string;\n  lastname: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  registrationToken: string | undefined;\n  news: boolean;\n}\n\nconst Register = ({ hasAdmin }: RegisterProps) => {\n  const { toggleNotification } = useNotification();\n  const navigate = useNavigate();\n  const [submitCount, setSubmitCount] = React.useState(0);\n  const [apiError, setApiError] = React.useState<string>();\n  const { trackUsage } = useTracking();\n  const { formatMessage } = useIntl();\n  const { search: searchString } = useLocation();\n  const query = React.useMemo(() => new URLSearchParams(searchString), [searchString]);\n  const match = useMatch('/auth/:authType');\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const { setNpsSurveySettings } = useNpsSurveySettings();\n\n  const registrationToken = query.get('registrationToken');\n\n  const { data: userInfo, error } = useGetRegistrationInfoQuery(registrationToken as string, {\n    skip: !registrationToken,\n  });\n\n  React.useEffect(() => {\n    if (error) {\n      const message: string = isBaseQueryError(error)\n        ? formatAPIError(error)\n        : (error.message ?? '');\n\n      toggleNotification({\n        type: 'danger',\n        message,\n      });\n\n      navigate(`/auth/oops?info=${encodeURIComponent(message)}`);\n    }\n  }, [error, formatAPIError, navigate, toggleNotification]);\n\n  const [registerAdmin] = useRegisterAdminMutation();\n  const [registerUser] = useRegisterUserMutation();\n  const dispatch = useTypedDispatch();\n\n  const handleRegisterAdmin = async (\n    { news, ...body }: RegisterAdmin.Request['body'] & { news: boolean },\n    setFormErrors: FormHelpers<RegisterFormValues>['setErrors']\n  ) => {\n    const res = await registerAdmin({ ...body, deviceId: getOrCreateDeviceId() });\n\n    if ('data' in res) {\n      dispatch(login({ token: res.data.token }));\n\n      if (news) {\n        // Only enable EE survey if user accepted the newsletter\n        setNpsSurveySettings((s) => ({ ...s, enabled: true }));\n\n        navigate({\n          pathname: '/usecase',\n          search: `?hasAdmin=${true}`,\n        });\n      } else {\n        navigate('/');\n      }\n    } else {\n      if (isBaseQueryError(res.error)) {\n        trackUsage('didNotCreateFirstAdmin');\n\n        if (res.error.name === 'ValidationError') {\n          setFormErrors(formatValidationErrors(res.error));\n          return;\n        }\n\n        setApiError(formatAPIError(res.error));\n      }\n    }\n  };\n\n  const handleRegisterUser = async (\n    { news, ...body }: RegisterUser.Request['body'] & { news: boolean },\n    setFormErrors: FormHelpers<RegisterFormValues>['setErrors']\n  ) => {\n    const res = await registerUser({ ...body, deviceId: getOrCreateDeviceId() });\n\n    if ('data' in res) {\n      dispatch(login({ token: res.data.token }));\n\n      if (news) {\n        // Only enable EE survey if user accepted the newsletter\n        setNpsSurveySettings((s) => ({ ...s, enabled: true }));\n\n        navigate({\n          pathname: '/usecase',\n          search: `?hasAdmin=${hasAdmin}`,\n        });\n      } else {\n        navigate('/');\n      }\n    } else {\n      if (isBaseQueryError(res.error)) {\n        trackUsage('didNotCreateFirstAdmin');\n\n        if (res.error.name === 'ValidationError') {\n          setFormErrors(formatValidationErrors(res.error));\n          return;\n        }\n\n        setApiError(formatAPIError(res.error));\n      }\n    }\n  };\n\n  if (\n    !match ||\n    (match.params.authType !== 'register' && match.params.authType !== 'register-admin')\n  ) {\n    return <Navigate to=\"/\" />;\n  }\n\n  const isAdminRegistration = match.params.authType === 'register-admin';\n\n  const schema = isAdminRegistration ? REGISTER_ADMIN_SCHEMA : REGISTER_USER_SCHEMA;\n\n  return (\n    <UnauthenticatedLayout>\n      <LayoutContent>\n        <Flex direction=\"column\" alignItems=\"center\" gap={3}>\n          <Logo />\n\n          <Typography tag=\"h1\" variant=\"alpha\" textAlign=\"center\">\n            {formatMessage({\n              id: 'Auth.form.welcome.title',\n              defaultMessage: 'Welcome to Strapi!',\n            })}\n          </Typography>\n          <Typography variant=\"epsilon\" textColor=\"neutral600\" textAlign=\"center\">\n            {formatMessage({\n              id: 'Auth.form.register.subtitle',\n              defaultMessage:\n                'Credentials are only used to authenticate in Strapi. All saved data will be stored in your database.',\n            })}\n          </Typography>\n          {apiError ? (\n            <Typography id=\"global-form-error\" role=\"alert\" tabIndex={-1} textColor=\"danger600\">\n              {apiError}\n            </Typography>\n          ) : null}\n        </Flex>\n        <Form\n          method=\"POST\"\n          initialValues={\n            {\n              firstname: userInfo?.firstname || '',\n              lastname: userInfo?.lastname || '',\n              email: userInfo?.email || '',\n              password: '',\n              confirmPassword: '',\n              registrationToken: registrationToken || undefined,\n              news: false,\n            } satisfies RegisterFormValues\n          }\n          onSubmit={async (data, helpers) => {\n            const normalizedData = normalizeData(data);\n\n            try {\n              await schema.validate(normalizedData, { abortEarly: false });\n\n              if (submitCount > 0 && isAdminRegistration) {\n                trackUsage('didSubmitWithErrorsFirstAdmin', { count: submitCount.toString() });\n              }\n\n              if (normalizedData.registrationToken) {\n                handleRegisterUser(\n                  {\n                    userInfo: omit(normalizedData, [\n                      'registrationToken',\n                      'confirmPassword',\n                      'email',\n                      'news',\n                    ]),\n                    registrationToken: normalizedData.registrationToken,\n                    news: normalizedData.news,\n                  },\n                  helpers.setErrors\n                );\n              } else {\n                await handleRegisterAdmin(\n                  omit(normalizedData, ['registrationToken', 'confirmPassword']),\n                  helpers.setErrors\n                );\n              }\n            } catch (err) {\n              if (err instanceof ValidationError) {\n                helpers.setErrors(\n                  err.inner.reduce<Record<string, string>>((acc, { message, path }) => {\n                    if (path && typeof message === 'object') {\n                      acc[path] = formatMessage(message);\n                    }\n                    return acc;\n                  }, {})\n                );\n              }\n              setSubmitCount(submitCount + 1);\n            }\n          }}\n        >\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={6} marginTop={7}>\n            <Grid.Root gap={4}>\n              {[\n                {\n                  label: formatMessage({\n                    id: 'Auth.form.firstname.label',\n                    defaultMessage: 'Firstname',\n                  }),\n                  name: 'firstname',\n                  required: true,\n                  size: 6,\n                  type: 'string' as const,\n                },\n                {\n                  label: formatMessage({\n                    id: 'Auth.form.lastname.label',\n                    defaultMessage: 'Lastname',\n                  }),\n                  name: 'lastname',\n                  size: 6,\n                  type: 'string' as const,\n                },\n                {\n                  disabled: !isAdminRegistration,\n                  label: formatMessage({\n                    id: 'Auth.form.email.label',\n                    defaultMessage: 'Email',\n                  }),\n                  name: 'email',\n                  required: true,\n                  size: 12,\n                  type: 'email' as const,\n                },\n                {\n                  hint: formatMessage({\n                    id: 'Auth.form.password.hint',\n                    defaultMessage:\n                      'Must be at least 8 characters, 1 uppercase, 1 lowercase & 1 number',\n                  }),\n                  label: formatMessage({\n                    id: 'global.password',\n                    defaultMessage: 'Password',\n                  }),\n                  name: 'password',\n                  required: true,\n                  size: 12,\n                  type: 'password' as const,\n                },\n                {\n                  label: formatMessage({\n                    id: 'Auth.form.confirmPassword.label',\n                    defaultMessage: 'Confirm Password',\n                  }),\n                  name: 'confirmPassword',\n                  required: true,\n                  size: 12,\n                  type: 'password' as const,\n                },\n                {\n                  label: formatMessage(\n                    {\n                      id: 'Auth.form.register.news.label',\n                      defaultMessage:\n                        'Keep me updated about new features & upcoming improvements (by doing this you accept the {terms} and the {policy}).',\n                    },\n                    {\n                      terms: (\n                        <A target=\"_blank\" href=\"https://strapi.io/terms\" rel=\"noreferrer\">\n                          {formatMessage({\n                            id: 'Auth.privacy-policy-agreement.terms',\n                            defaultMessage: 'terms',\n                          })}\n                        </A>\n                      ),\n                      policy: (\n                        <A target=\"_blank\" href=\"https://strapi.io/privacy\" rel=\"noreferrer\">\n                          {formatMessage({\n                            id: 'Auth.privacy-policy-agreement.policy',\n                            defaultMessage: 'policy',\n                          })}\n                        </A>\n                      ),\n                    }\n                  ),\n                  name: 'news',\n                  size: 12,\n                  type: 'checkbox' as const,\n                },\n              ].map(({ size, ...field }) => (\n                <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n                  <InputRenderer {...field} />\n                </Grid.Item>\n              ))}\n            </Grid.Root>\n            <Button fullWidth size=\"L\" type=\"submit\">\n              {formatMessage({\n                id: 'Auth.form.button.register',\n                defaultMessage: \"Let's start\",\n              })}\n            </Button>\n          </Flex>\n        </Form>\n        {match?.params.authType === 'register' && (\n          <Box paddingTop={4}>\n            <Flex justifyContent=\"center\">\n              <Link tag={NavLink} to=\"/auth/login\">\n                {formatMessage({\n                  id: 'Auth.link.signin.account',\n                  defaultMessage: 'Already have an account?',\n                })}\n              </Link>\n            </Flex>\n          </Box>\n        )}\n      </LayoutContent>\n    </UnauthenticatedLayout>\n  );\n};\n\ninterface RegisterFormValues {\n  firstname: string;\n  lastname: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  registrationToken: string | undefined;\n  news: boolean;\n}\n\ntype StringKeys<T> = {\n  [K in keyof T]: T[K] extends string | undefined ? K : never;\n}[keyof T];\n\n/**\n * @description Trims all values but the password & sets lastName to null if it's a falsey value.\n */\nfunction normalizeData(data: RegisterFormValues) {\n  return Object.entries(data).reduce(\n    (acc, [key, value]) => {\n      type PasswordKeys = Extract<keyof RegisterFormValues, 'password' | 'confirmPassword'>;\n      type RegisterFormStringValues = Exclude<\n        keyof Pick<RegisterFormValues, StringKeys<RegisterFormValues>>,\n        PasswordKeys\n      >;\n\n      if (!['password', 'confirmPassword'].includes(key) && typeof value === 'string') {\n        acc[key as RegisterFormStringValues] = value.trim();\n\n        if (key === 'lastname') {\n          acc[key] = value || undefined;\n        }\n      } else {\n        acc[key as PasswordKeys] = value;\n      }\n\n      return acc;\n    },\n    {} as {\n      firstname: string;\n      lastname: string | undefined;\n      email: string;\n      password: string;\n      confirmPassword: string;\n      registrationToken: string | undefined;\n      news: boolean;\n    }\n  );\n}\n\nconst A = styled.a`\n  color: ${({ theme }) => theme.colors.primary600};\n`;\n\nexport { Register };\nexport type { RegisterProps };\n"],"names":["REGISTER_USER_SCHEMA","yup","object","shape","firstname","string","trim","required","translatedErrors","nullable","lastname","password","min","id","minLength","defaultMessage","values","test","value","byteSize","getByteSize","matches","message","confirmPassword","oneOf","ref","registrationToken","REGISTER_ADMIN_SCHEMA","TextEncoder","encode","length","email","strict","lowercase","Register","hasAdmin","toggleNotification","useNotification","navigate","useNavigate","submitCount","setSubmitCount","React","useState","apiError","setApiError","trackUsage","useTracking","formatMessage","useIntl","search","searchString","useLocation","query","useMemo","URLSearchParams","match","useMatch","_unstableFormatAPIError","formatAPIError","_unstableFormatValidationErrors","formatValidationErrors","useAPIErrorHandler","setNpsSurveySettings","useNpsSurveySettings","get","data","userInfo","error","useGetRegistrationInfoQuery","skip","useEffect","isBaseQueryError","type","encodeURIComponent","registerAdmin","useRegisterAdminMutation","registerUser","useRegisterUserMutation","dispatch","useTypedDispatch","handleRegisterAdmin","news","body","setFormErrors","res","deviceId","getOrCreateDeviceId","login","token","s","enabled","pathname","name","handleRegisterUser","params","authType","_jsx","Navigate","to","isAdminRegistration","schema","UnauthenticatedLayout","_jsxs","LayoutContent","Flex","direction","alignItems","gap","Logo","Typography","tag","variant","textAlign","textColor","role","tabIndex","Form","method","initialValues","undefined","onSubmit","helpers","normalizedData","normalizeData","validate","abortEarly","count","toString","omit","setErrors","err","ValidationError","inner","reduce","acc","path","marginTop","Grid","Root","label","size","disabled","hint","terms","A","target","href","rel","policy","map","field","Item","col","InputRenderer","Button","fullWidth","Box","paddingTop","justifyContent","Link","NavLink","Object","entries","key","includes","styled","a","theme","colors","primary600"],"mappings":"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"}