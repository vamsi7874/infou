{"version":3,"file":"ContentTypeBuilderSteps.js","sources":["../../../../../../../admin/src/components/GuidedTour/Steps/ContentTypeBuilderSteps.tsx"],"sourcesContent":["import { UID } from '@strapi/types';\nimport { useParams } from 'react-router-dom';\n\nimport { useGetGuidedTourMetaQuery } from '../../../services/admin';\nimport { CompletedActions } from '../Context';\nimport { type StepContentProps } from '../Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from '../utils/constants';\n\nimport { GotItAction, StepCount } from './Step';\n\n/* -------------------------------------------------------------------------------------------------\n * Step Components\n * -----------------------------------------------------------------------------------------------*/\n\nconst Introduction = ({ Step }: StepContentProps) => (\n  <Step.Root sideOffset={33} withArrow={false}>\n    <Step.Title\n      id=\"tours.contentTypeBuilder.Introduction.title\"\n      defaultMessage=\"Content-Type Builder\"\n    />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.Introduction.content\"\n      defaultMessage=\"Create and manage your content structure with collection types, single types and components.\"\n    />\n    <Step.Actions showPrevious={false} />\n  </Step.Root>\n);\n\nconst CollectionTypes = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title\n      id=\"tours.contentTypeBuilder.CollectionTypes.title\"\n      defaultMessage=\"Collection Types\"\n    />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.CollectionTypes.content\"\n      defaultMessage=\"A content structure that can manage multiple entries, such as articles or products.\"\n    />\n    <Step.Actions />\n  </Step.Root>\n);\n\nconst SingleTypes = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title id=\"tours.contentTypeBuilder.SingleTypes.title\" defaultMessage=\"Single Types\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.SingleTypes.content\"\n      defaultMessage=\"A content structure that can manage a single entry, such as a homepage or a header.\"\n    />\n    <Step.Actions />\n  </Step.Root>\n);\n\nconst Components = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title id=\"tours.contentTypeBuilder.Components.title\" defaultMessage=\"Components\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.Components.content\"\n      defaultMessage=\"A reusable content structure that can be used across multiple content types, such as buttons, sliders or cards.\"\n    />\n    <Step.Actions />\n  </Step.Root>\n);\n\nconst YourTurn = ({ Step }: StepContentProps) => (\n  <Step.Root side=\"right\" sideOffset={16}>\n    <Step.Title id=\"tours.contentTypeBuilder.YourTurn.title\" defaultMessage=\"Your turn\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.YourTurn.content\"\n      defaultMessage=\"Create a collection type or single type and configure it.\"\n    />\n    <Step.Actions />\n  </Step.Root>\n);\n\nconst AddFields = ({ Step, dispatch }: StepContentProps) => (\n  <Step.Root side=\"bottom\">\n    <Step.Title\n      id=\"tours.contentTypeBuilder.AddFields.title\"\n      defaultMessage=\"Don't forget to add a field to your content type\"\n    />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.AddFields.content\"\n      defaultMessage=\"Add the fields your content needs such as text, media and relations.\"\n    />\n    <Step.Actions>\n      <StepCount tourName=\"contentTypeBuilder\" />\n      <GotItAction onClick={() => dispatch({ type: 'next_step', payload: 'contentTypeBuilder' })} />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Save = ({ Step, dispatch }: StepContentProps) => (\n  <Step.Root side=\"right\">\n    <Step.Title id=\"tours.contentTypeBuilder.Save.title\" defaultMessage=\"Save before you leave!\" />\n    <Step.Content\n      id=\"tours.contentTypeBuilder.Save.content\"\n      defaultMessage=\"Save the changes you made here before leaving this page.\"\n    />\n    <Step.Actions>\n      <StepCount tourName=\"contentTypeBuilder\" />\n      <GotItAction\n        onClick={() => {\n          // Ensure the completed action is removed\n          // in the event the user already has a schema but is still doing the tour\n          dispatch({\n            type: 'remove_completed_action',\n            payload: GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema,\n          });\n          dispatch({ type: 'next_step', payload: 'contentTypeBuilder' });\n        }}\n      />\n    </Step.Actions>\n  </Step.Root>\n);\n\nconst Finish = ({ Step }: StepContentProps) => {\n  const { data: guidedTourMeta } = useGetGuidedTourMetaQuery();\n  const { '*': routeParams } = useParams();\n  // Get the uid from the params\n  const uid = routeParams?.split('/').pop();\n  const contentType = uid ? guidedTourMeta?.data?.schemas?.[uid as UID.ContentType] : null;\n  const contentTypeKindDictionary = {\n    collectionType: 'collection-types',\n    singleType: 'single-types',\n  };\n\n  const to = contentType\n    ? `/content-manager/${contentTypeKindDictionary[contentType.kind]}/${contentType.uid}`\n    : '/content-manager';\n\n  return (\n    <Step.Root side=\"right\">\n      <Step.Title\n        id=\"tours.contentTypeBuilder.Finish.title\"\n        defaultMessage=\"It's time to create content!\"\n      />\n      <Step.Content\n        id=\"tours.contentTypeBuilder.Finish.content\"\n        defaultMessage=\"Now that you created content types, you'll be able to create content in the content manager.\"\n      />\n      <Step.Actions showStepCount={false} showPrevious={false} to={to} />\n    </Step.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Steps\n * -----------------------------------------------------------------------------------------------*/\n\nexport const contentTypeBuilderSteps = [\n  {\n    name: 'Introduction',\n    content: Introduction,\n  },\n  {\n    name: 'CollectionTypes',\n    content: CollectionTypes,\n  },\n  {\n    name: 'SingleTypes',\n    content: SingleTypes,\n  },\n  {\n    name: 'Components',\n    content: Components,\n  },\n  {\n    name: 'YourTurn',\n    content: YourTurn,\n  },\n  {\n    name: 'AddFields',\n    content: AddFields,\n  },\n  {\n    name: 'Save',\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.addField),\n    content: Save,\n  },\n  {\n    name: 'Finish',\n    content: Finish,\n    excludeFromStepCount: true,\n    when: (completedActions: CompletedActions) =>\n      completedActions.includes(GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema),\n  },\n] as const;\n"],"names":["Introduction","Step","_jsxs","Root","sideOffset","withArrow","_jsx","Title","id","defaultMessage","Content","Actions","showPrevious","CollectionTypes","side","SingleTypes","Components","YourTurn","AddFields","dispatch","StepCount","tourName","GotItAction","onClick","type","payload","Save","GUIDED_TOUR_REQUIRED_ACTIONS","contentTypeBuilder","createSchema","Finish","data","guidedTourMeta","useGetGuidedTourMetaQuery","routeParams","useParams","uid","split","pop","contentType","schemas","contentTypeKindDictionary","collectionType","singleType","to","kind","showStepCount","contentTypeBuilderSteps","name","content","when","completedActions","includes","addField","excludeFromStepCount"],"mappings":"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"}