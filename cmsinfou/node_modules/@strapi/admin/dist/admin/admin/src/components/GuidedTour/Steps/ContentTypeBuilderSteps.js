'use strict';

var jsxRuntime = require('react/jsx-runtime');
var reactRouterDom = require('react-router-dom');
var admin = require('../../../services/admin.js');
var constants = require('../utils/constants.js');
var Step = require('./Step.js');

/* -------------------------------------------------------------------------------------------------
 * Step Components
 * -----------------------------------------------------------------------------------------------*/ const Introduction = ({ Step })=>/*#__PURE__*/ jsxRuntime.jsxs(Step.Root, {
        sideOffset: 33,
        withArrow: false,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(Step.Title, {
                id: "tours.contentTypeBuilder.Introduction.title",
                defaultMessage: "Content-Type Builder"
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step.Content, {
                id: "tours.contentTypeBuilder.Introduction.content",
                defaultMessage: "Create and manage your content structure with collection types, single types and components."
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step.Actions, {
                showPrevious: false
            })
        ]
    });
const CollectionTypes = ({ Step })=>/*#__PURE__*/ jsxRuntime.jsxs(Step.Root, {
        side: "right",
        sideOffset: 16,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(Step.Title, {
                id: "tours.contentTypeBuilder.CollectionTypes.title",
                defaultMessage: "Collection Types"
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step.Content, {
                id: "tours.contentTypeBuilder.CollectionTypes.content",
                defaultMessage: "A content structure that can manage multiple entries, such as articles or products."
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step.Actions, {})
        ]
    });
const SingleTypes = ({ Step })=>/*#__PURE__*/ jsxRuntime.jsxs(Step.Root, {
        side: "right",
        sideOffset: 16,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(Step.Title, {
                id: "tours.contentTypeBuilder.SingleTypes.title",
                defaultMessage: "Single Types"
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step.Content, {
                id: "tours.contentTypeBuilder.SingleTypes.content",
                defaultMessage: "A content structure that can manage a single entry, such as a homepage or a header."
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step.Actions, {})
        ]
    });
const Components = ({ Step })=>/*#__PURE__*/ jsxRuntime.jsxs(Step.Root, {
        side: "right",
        sideOffset: 16,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(Step.Title, {
                id: "tours.contentTypeBuilder.Components.title",
                defaultMessage: "Components"
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step.Content, {
                id: "tours.contentTypeBuilder.Components.content",
                defaultMessage: "A reusable content structure that can be used across multiple content types, such as buttons, sliders or cards."
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step.Actions, {})
        ]
    });
const YourTurn = ({ Step })=>/*#__PURE__*/ jsxRuntime.jsxs(Step.Root, {
        side: "right",
        sideOffset: 16,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(Step.Title, {
                id: "tours.contentTypeBuilder.YourTurn.title",
                defaultMessage: "Your turn"
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step.Content, {
                id: "tours.contentTypeBuilder.YourTurn.content",
                defaultMessage: "Create a collection type or single type and configure it."
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step.Actions, {})
        ]
    });
const AddFields = ({ Step: Step$1, dispatch })=>/*#__PURE__*/ jsxRuntime.jsxs(Step$1.Root, {
        side: "bottom",
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(Step$1.Title, {
                id: "tours.contentTypeBuilder.AddFields.title",
                defaultMessage: "Don't forget to add a field to your content type"
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step$1.Content, {
                id: "tours.contentTypeBuilder.AddFields.content",
                defaultMessage: "Add the fields your content needs such as text, media and relations."
            }),
            /*#__PURE__*/ jsxRuntime.jsxs(Step$1.Actions, {
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(Step.StepCount, {
                        tourName: "contentTypeBuilder"
                    }),
                    /*#__PURE__*/ jsxRuntime.jsx(Step.GotItAction, {
                        onClick: ()=>dispatch({
                                type: 'next_step',
                                payload: 'contentTypeBuilder'
                            })
                    })
                ]
            })
        ]
    });
const Save = ({ Step: Step$1, dispatch })=>/*#__PURE__*/ jsxRuntime.jsxs(Step$1.Root, {
        side: "right",
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(Step$1.Title, {
                id: "tours.contentTypeBuilder.Save.title",
                defaultMessage: "Save before you leave!"
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step$1.Content, {
                id: "tours.contentTypeBuilder.Save.content",
                defaultMessage: "Save the changes you made here before leaving this page."
            }),
            /*#__PURE__*/ jsxRuntime.jsxs(Step$1.Actions, {
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(Step.StepCount, {
                        tourName: "contentTypeBuilder"
                    }),
                    /*#__PURE__*/ jsxRuntime.jsx(Step.GotItAction, {
                        onClick: ()=>{
                            // Ensure the completed action is removed
                            // in the event the user already has a schema but is still doing the tour
                            dispatch({
                                type: 'remove_completed_action',
                                payload: constants.GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema
                            });
                            dispatch({
                                type: 'next_step',
                                payload: 'contentTypeBuilder'
                            });
                        }
                    })
                ]
            })
        ]
    });
const Finish = ({ Step })=>{
    const { data: guidedTourMeta } = admin.useGetGuidedTourMetaQuery();
    const { '*': routeParams } = reactRouterDom.useParams();
    // Get the uid from the params
    const uid = routeParams?.split('/').pop();
    const contentType = uid ? guidedTourMeta?.data?.schemas?.[uid] : null;
    const contentTypeKindDictionary = {
        collectionType: 'collection-types',
        singleType: 'single-types'
    };
    const to = contentType ? `/content-manager/${contentTypeKindDictionary[contentType.kind]}/${contentType.uid}` : '/content-manager';
    return /*#__PURE__*/ jsxRuntime.jsxs(Step.Root, {
        side: "right",
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(Step.Title, {
                id: "tours.contentTypeBuilder.Finish.title",
                defaultMessage: "It's time to create content!"
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step.Content, {
                id: "tours.contentTypeBuilder.Finish.content",
                defaultMessage: "Now that you created content types, you'll be able to create content in the content manager."
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Step.Actions, {
                showStepCount: false,
                showPrevious: false,
                to: to
            })
        ]
    });
};
/* -------------------------------------------------------------------------------------------------
 * Steps
 * -----------------------------------------------------------------------------------------------*/ const contentTypeBuilderSteps = [
    {
        name: 'Introduction',
        content: Introduction
    },
    {
        name: 'CollectionTypes',
        content: CollectionTypes
    },
    {
        name: 'SingleTypes',
        content: SingleTypes
    },
    {
        name: 'Components',
        content: Components
    },
    {
        name: 'YourTurn',
        content: YourTurn
    },
    {
        name: 'AddFields',
        content: AddFields
    },
    {
        name: 'Save',
        when: (completedActions)=>completedActions.includes(constants.GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.addField),
        content: Save
    },
    {
        name: 'Finish',
        content: Finish,
        excludeFromStepCount: true,
        when: (completedActions)=>completedActions.includes(constants.GUIDED_TOUR_REQUIRED_ACTIONS.contentTypeBuilder.createSchema)
    }
];

exports.contentTypeBuilderSteps = contentTypeBuilderSteps;
//# sourceMappingURL=ContentTypeBuilderSteps.js.map
