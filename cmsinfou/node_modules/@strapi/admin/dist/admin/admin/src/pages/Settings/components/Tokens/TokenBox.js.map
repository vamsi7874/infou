{"version":3,"file":"TokenBox.js","sources":["../../../../../../../../admin/src/pages/Settings/components/Tokens/TokenBox.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { IconButton, Flex, Box, Typography, Button } from '@strapi/design-system';\nimport { Duplicate, Key } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { ContentBox } from '../../../../components/ContentBox';\nimport { useGuidedTour } from '../../../../components/GuidedTour/Context';\nimport { tours } from '../../../../components/GuidedTour/Tours';\nimport { GUIDED_TOUR_REQUIRED_ACTIONS } from '../../../../components/GuidedTour/utils/constants';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useClipboard } from '../../../../hooks/useClipboard';\n\ninterface TokenBoxProps {\n  token?: string;\n  tokenType: 'transfer-token' | 'api-token';\n}\n\nconst TypographyWordBreak = styled(Typography)`\n  word-break: break-all;\n`;\n\nexport const ApiTokenBox = ({ token, tokenType }: TokenBoxProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { trackUsage } = useTracking();\n  const dispatch = useGuidedTour('TokenBox', (s) => s.dispatch);\n\n  const { copy } = useClipboard();\n\n  const handleCopyToken = async (token: TokenBoxProps['token']) => {\n    if (token) {\n      const didCopy = await copy(token);\n\n      if (didCopy) {\n        trackUsage('didCopyTokenKey', {\n          tokenType,\n        });\n        dispatch({\n          type: 'set_completed_actions',\n          payload: [GUIDED_TOUR_REQUIRED_ACTIONS.apiTokens.copyToken],\n        });\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'Settings.tokens.notification.copied' }),\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      <Flex\n        shadow=\"tableShadow\"\n        direction=\"column\"\n        alignItems=\"start\"\n        hasRadius\n        padding={6}\n        background=\"neutral0\"\n      >\n        <Flex direction=\"column\" alignItems=\"start\" gap={1} paddingBottom={4}>\n          <Typography fontWeight=\"bold\">\n            {formatMessage({\n              id: 'Settings.tokens.copy.title',\n              defaultMessage: 'Token',\n            })}\n          </Typography>\n          <Typography>\n            {formatMessage({\n              id: 'Settings.apiTokens.copy.lastWarning',\n              defaultMessage: 'Copy your API token',\n            })}\n          </Typography>\n        </Flex>\n        <Box background=\"neutral100\" hasRadius padding={2} borderColor=\"neutral150\">\n          <TypographyWordBreak fontWeight=\"semiBold\" variant=\"pi\">\n            {token}\n          </TypographyWordBreak>\n        </Box>\n        <tours.apiTokens.CopyAPIToken>\n          <Button\n            startIcon={<Duplicate />}\n            variant=\"secondary\"\n            onClick={(e: React.MouseEvent) => {\n              e.preventDefault();\n              handleCopyToken(token);\n            }}\n            marginTop={6}\n          >\n            {formatMessage({ id: 'Settings.tokens.copy.copy', defaultMessage: 'Copy' })}\n          </Button>\n        </tours.apiTokens.CopyAPIToken>\n      </Flex>\n    </>\n  );\n};\n\nexport const TokenBox = ({ token, tokenType }: TokenBoxProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { trackUsage } = useTracking();\n\n  const { copy } = useClipboard();\n\n  const handleClick = (token: TokenBoxProps['token']) => async () => {\n    if (token) {\n      const didCopy = await copy(token);\n\n      if (didCopy) {\n        trackUsage('didCopyTokenKey', {\n          tokenType,\n        });\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'Settings.tokens.notification.copied' }),\n        });\n      }\n    }\n  };\n\n  return (\n    <ContentBox\n      endAction={\n        token && (\n          <span style={{ alignSelf: 'start' }}>\n            <IconButton\n              label={formatMessage({\n                id: 'app.component.CopyToClipboard.label',\n                defaultMessage: 'Copy to clipboard',\n              })}\n              onClick={handleClick(token)}\n              variant=\"ghost\"\n              type=\"button\"\n              style={{ padding: 0, height: '1.6rem' }}\n            >\n              <Duplicate />\n            </IconButton>\n          </span>\n        )\n      }\n      title={\n        token ||\n        formatMessage({\n          id: 'Settings.tokens.copy.editTitle',\n          defaultMessage: 'This token isn’t accessible anymore.',\n        })\n      }\n      subtitle={\n        token\n          ? formatMessage(\n              tokenType === 'api-token'\n                ? {\n                    id: 'Settings.tokens.copy.subtitle',\n                    defaultMessage: 'Copy this token for use elsewhere',\n                  }\n                : {\n                    id: 'Settings.tokens.copy.lastWarning',\n                    defaultMessage:\n                      'Make sure to copy this token, you won’t be able to see it again!',\n                  }\n            )\n          : formatMessage({\n              id: 'Settings.tokens.copy.editMessage',\n              defaultMessage: 'For security reasons, you can only see your token once.',\n            })\n      }\n      icon={<Key />}\n      iconBackground=\"neutral100\"\n    />\n  );\n};\n"],"names":["TypographyWordBreak","styled","Typography","ApiTokenBox","token","tokenType","formatMessage","useIntl","toggleNotification","useNotification","trackUsage","useTracking","dispatch","useGuidedTour","s","copy","useClipboard","handleCopyToken","didCopy","type","payload","GUIDED_TOUR_REQUIRED_ACTIONS","apiTokens","copyToken","message","id","_jsx","_Fragment","_jsxs","Flex","shadow","direction","alignItems","hasRadius","padding","background","gap","paddingBottom","fontWeight","defaultMessage","Box","borderColor","variant","tours","CopyAPIToken","Button","startIcon","Duplicate","onClick","e","preventDefault","marginTop","TokenBox","handleClick","ContentBox","endAction","span","style","alignSelf","IconButton","label","height","title","subtitle","icon","Key","iconBackground"],"mappings":";;;;;;;;;;;;;;;;AAoBA,MAAMA,mBAAAA,GAAsBC,aAAOC,CAAAA,uBAAAA,CAAW;;AAE9C,CAAC;MAEYC,WAAc,GAAA,CAAC,EAAEC,KAAK,EAAEC,SAAS,EAAiB,GAAA;IAC7D,MAAM,EAAEC,aAAa,EAAE,GAAGC,iBAAAA,EAAAA;IAC1B,MAAM,EAAEC,kBAAkB,EAAE,GAAGC,6BAAAA,EAAAA;IAC/B,MAAM,EAAEC,UAAU,EAAE,GAAGC,oBAAAA,EAAAA;AACvB,IAAA,MAAMC,WAAWC,qBAAc,CAAA,UAAA,EAAY,CAACC,CAAAA,GAAMA,EAAEF,QAAQ,CAAA;IAE5D,MAAM,EAAEG,IAAI,EAAE,GAAGC,yBAAAA,EAAAA;AAEjB,IAAA,MAAMC,kBAAkB,OAAOb,KAAAA,GAAAA;AAC7B,QAAA,IAAIA,KAAO,EAAA;YACT,MAAMc,OAAAA,GAAU,MAAMH,IAAKX,CAAAA,KAAAA,CAAAA;AAE3B,YAAA,IAAIc,OAAS,EAAA;AACXR,gBAAAA,UAAAA,CAAW,iBAAmB,EAAA;AAC5BL,oBAAAA;AACF,iBAAA,CAAA;gBACAO,QAAS,CAAA;oBACPO,IAAM,EAAA,uBAAA;oBACNC,OAAS,EAAA;wBAACC,sCAA6BC,CAAAA,SAAS,CAACC;AAAU;AAC7D,iBAAA,CAAA;gBACAf,kBAAmB,CAAA;oBACjBW,IAAM,EAAA,SAAA;AACNK,oBAAAA,OAAAA,EAASlB,aAAc,CAAA;wBAAEmB,EAAI,EAAA;AAAsC,qBAAA;AACrE,iBAAA,CAAA;AACF;AACF;AACF,KAAA;IAEA,qBACEC,cAAA,CAAAC,mBAAA,EAAA;AACE,QAAA,QAAA,gBAAAC,eAACC,CAAAA,iBAAAA,EAAAA;YACCC,MAAO,EAAA,aAAA;YACPC,SAAU,EAAA,QAAA;YACVC,UAAW,EAAA,OAAA;YACXC,SAAS,EAAA,IAAA;YACTC,OAAS,EAAA,CAAA;YACTC,UAAW,EAAA,UAAA;;8BAEXP,eAACC,CAAAA,iBAAAA,EAAAA;oBAAKE,SAAU,EAAA,QAAA;oBAASC,UAAW,EAAA,OAAA;oBAAQI,GAAK,EAAA,CAAA;oBAAGC,aAAe,EAAA,CAAA;;sCACjEX,cAACxB,CAAAA,uBAAAA,EAAAA;4BAAWoC,UAAW,EAAA,MAAA;sCACpBhC,aAAc,CAAA;gCACbmB,EAAI,EAAA,4BAAA;gCACJc,cAAgB,EAAA;AAClB,6BAAA;;sCAEFb,cAACxB,CAAAA,uBAAAA,EAAAA;sCACEI,aAAc,CAAA;gCACbmB,EAAI,EAAA,qCAAA;gCACJc,cAAgB,EAAA;AAClB,6BAAA;;;;8BAGJb,cAACc,CAAAA,gBAAAA,EAAAA;oBAAIL,UAAW,EAAA,YAAA;oBAAaF,SAAS,EAAA,IAAA;oBAACC,OAAS,EAAA,CAAA;oBAAGO,WAAY,EAAA,YAAA;AAC7D,oBAAA,QAAA,gBAAAf,cAAC1B,CAAAA,mBAAAA,EAAAA;wBAAoBsC,UAAW,EAAA,UAAA;wBAAWI,OAAQ,EAAA,IAAA;AAChDtC,wBAAAA,QAAAA,EAAAA;;;8BAGLsB,cAACiB,CAAAA,WAAAA,CAAMrB,SAAS,CAACsB,YAAY,EAAA;AAC3B,oBAAA,QAAA,gBAAAlB,cAACmB,CAAAA,mBAAAA,EAAAA;AACCC,wBAAAA,SAAAA,gBAAWpB,cAACqB,CAAAA,eAAAA,EAAAA,EAAAA,CAAAA;wBACZL,OAAQ,EAAA,WAAA;AACRM,wBAAAA,OAAAA,EAAS,CAACC,CAAAA,GAAAA;AACRA,4BAAAA,CAAAA,CAAEC,cAAc,EAAA;4BAChBjC,eAAgBb,CAAAA,KAAAA,CAAAA;AAClB,yBAAA;wBACA+C,SAAW,EAAA,CAAA;kCAEV7C,aAAc,CAAA;4BAAEmB,EAAI,EAAA,2BAAA;4BAA6Bc,cAAgB,EAAA;AAAO,yBAAA;;;;;;AAMrF;MAEaa,QAAW,GAAA,CAAC,EAAEhD,KAAK,EAAEC,SAAS,EAAiB,GAAA;IAC1D,MAAM,EAAEC,aAAa,EAAE,GAAGC,iBAAAA,EAAAA;IAC1B,MAAM,EAAEC,kBAAkB,EAAE,GAAGC,6BAAAA,EAAAA;IAC/B,MAAM,EAAEC,UAAU,EAAE,GAAGC,oBAAAA,EAAAA;IAEvB,MAAM,EAAEI,IAAI,EAAE,GAAGC,yBAAAA,EAAAA;IAEjB,MAAMqC,WAAAA,GAAc,CAACjD,KAAkC,GAAA,UAAA;AACrD,YAAA,IAAIA,KAAO,EAAA;gBACT,MAAMc,OAAAA,GAAU,MAAMH,IAAKX,CAAAA,KAAAA,CAAAA;AAE3B,gBAAA,IAAIc,OAAS,EAAA;AACXR,oBAAAA,UAAAA,CAAW,iBAAmB,EAAA;AAC5BL,wBAAAA;AACF,qBAAA,CAAA;oBACAG,kBAAmB,CAAA;wBACjBW,IAAM,EAAA,SAAA;AACNK,wBAAAA,OAAAA,EAASlB,aAAc,CAAA;4BAAEmB,EAAI,EAAA;AAAsC,yBAAA;AACrE,qBAAA,CAAA;AACF;AACF;AACF,SAAA;AAEA,IAAA,qBACEC,cAAC4B,CAAAA,qBAAAA,EAAAA;AACCC,QAAAA,SAAAA,EACEnD,uBACEsB,cAAC8B,CAAAA,MAAAA,EAAAA;YAAKC,KAAO,EAAA;gBAAEC,SAAW,EAAA;AAAQ,aAAA;AAChC,YAAA,QAAA,gBAAAhC,cAACiC,CAAAA,uBAAAA,EAAAA;AACCC,gBAAAA,KAAAA,EAAOtD,aAAc,CAAA;oBACnBmB,EAAI,EAAA,qCAAA;oBACJc,cAAgB,EAAA;AAClB,iBAAA,CAAA;AACAS,gBAAAA,OAAAA,EAASK,WAAYjD,CAAAA,KAAAA,CAAAA;gBACrBsC,OAAQ,EAAA,OAAA;gBACRvB,IAAK,EAAA,QAAA;gBACLsC,KAAO,EAAA;oBAAEvB,OAAS,EAAA,CAAA;oBAAG2B,MAAQ,EAAA;AAAS,iBAAA;AAEtC,gBAAA,QAAA,gBAAAnC,cAACqB,CAAAA,eAAAA,EAAAA,EAAAA;;;AAKTe,QAAAA,KAAAA,EACE1D,SACAE,aAAc,CAAA;YACZmB,EAAI,EAAA,gCAAA;YACJc,cAAgB,EAAA;AAClB,SAAA,CAAA;QAEFwB,QACE3D,EAAAA,KAAAA,GACIE,aACED,CAAAA,SAAAA,KAAc,WACV,GAAA;YACEoB,EAAI,EAAA,+BAAA;YACJc,cAAgB,EAAA;SAElB,GAAA;YACEd,EAAI,EAAA,kCAAA;YACJc,cACE,EAAA;AACJ,SAAA,CAAA,GAENjC,aAAc,CAAA;YACZmB,EAAI,EAAA,kCAAA;YACJc,cAAgB,EAAA;AAClB,SAAA,CAAA;AAENyB,QAAAA,IAAAA,gBAAMtC,cAACuC,CAAAA,SAAAA,EAAAA,EAAAA,CAAAA;QACPC,cAAe,EAAA;;AAGrB;;;;;"}