{"version":3,"file":"ListPage.js","sources":["../../../../../../../../admin/src/pages/Settings/pages/Users/ListPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Flex, Typography, Status, IconButton, Dialog } from '@strapi/design-system';\nimport { Pencil, Trash } from '@strapi/icons';\nimport * as qs from 'qs';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { NavLink, useLocation, useNavigate } from 'react-router-dom';\n\nimport { SanitizedAdminUser } from '../../../../../../shared/contracts/shared';\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { Filters } from '../../../../components/Filters';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { Pagination } from '../../../../components/Pagination';\nimport { SearchInput } from '../../../../components/SearchInput';\nimport { Table } from '../../../../components/Table';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport { useAdminUsers, useDeleteManyUsersMutation } from '../../../../services/users';\nimport { getDisplayName } from '../../../../utils/users';\n\nimport { CreateActionCE } from './components/CreateActionCE';\nimport { ModalForm } from './components/NewUserForm';\n\n/* -------------------------------------------------------------------------------------------------\n * ListPageCE\n * -----------------------------------------------------------------------------------------------*/\n\nconst ListPageCE = () => {\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const [isModalOpened, setIsModalOpen] = React.useState(false);\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\n  const {\n    allowedActions: { canCreate, canDelete, canRead },\n  } = useRBAC(permissions.settings?.users);\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { search } = useLocation();\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = React.useState(false);\n  const [idsToDelete, setIdsToDelete] = React.useState<Array<SanitizedAdminUser['id']>>([]);\n  const { data, isError, isLoading } = useAdminUsers(qs.parse(search, { ignoreQueryPrefix: true }));\n\n  const { pagination, users = [] } = data ?? {};\n\n  const CreateAction = useEnterprise(\n    CreateActionCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/CreateActionEE'\n        )\n      ).CreateActionEE\n  );\n\n  const headers = TABLE_HEADERS.map((header) => ({\n    ...header,\n    label: formatMessage(header.label),\n  }));\n\n  const title = formatMessage({\n    id: 'global.users',\n    defaultMessage: 'Users',\n  });\n\n  const handleToggle = () => {\n    setIsModalOpen((prev) => !prev);\n  };\n\n  const [deleteAll] = useDeleteManyUsersMutation();\n  const handleDeleteAll = async (ids: Array<SanitizedAdminUser['id']>) => {\n    try {\n      const res = await deleteAll({ ids });\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n      }\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'global.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n  };\n\n  const handleRowClick = (id: SanitizedAdminUser['id']) => () => {\n    if (canRead) {\n      navigate(id.toString());\n    }\n  };\n\n  const handleDeleteClick = (id: SanitizedAdminUser['id']) => async () => {\n    setIdsToDelete([id]);\n    setShowDeleteConfirmation(true);\n  };\n\n  const confirmDelete = async () => {\n    await handleDeleteAll(idsToDelete);\n    setShowDeleteConfirmation(false);\n  };\n\n  // block rendering until the EE component is fully loaded\n  if (!CreateAction) {\n    return null;\n  }\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Page.Main aria-busy={isLoading}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Users',\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        primaryAction={canCreate && <CreateAction onClick={handleToggle} />}\n        title={title}\n        subtitle={formatMessage({\n          id: 'Settings.permissions.users.listview.header.subtitle',\n          defaultMessage: 'All the users who have access to the Strapi admin panel',\n        })}\n      />\n      <Layouts.Action\n        startActions={\n          <>\n            <SearchInput\n              label={formatMessage(\n                { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                { target: title }\n              )}\n            />\n            <Filters.Root options={FILTERS}>\n              <Filters.Trigger />\n              <Filters.Popover zIndex={499} />\n              <Filters.List />\n            </Filters.Root>\n          </>\n        }\n      />\n      <Layouts.Content>\n        <Table.Root rows={users} headers={headers}>\n          <Table.ActionBar />\n          <Table.Content>\n            <Table.Head>\n              {canDelete ? <Table.HeaderCheckboxCell /> : null}\n              {headers.map((header) => (\n                <Table.HeaderCell key={header.name} {...header} />\n              ))}\n            </Table.Head>\n            <Table.Empty />\n            <Table.Loading />\n            <Table.Body>\n              {users.map((user) => (\n                <Table.Row\n                  key={user.id}\n                  onClick={handleRowClick(user.id)}\n                  cursor={canRead ? 'pointer' : 'default'}\n                >\n                  {canDelete ? <Table.CheckboxCell id={user.id} /> : null}\n                  {headers.map(({ cellFormatter, name, ...rest }) => {\n                    return (\n                      <Table.Cell key={name}>\n                        {typeof cellFormatter === 'function' ? (\n                          cellFormatter(user, { name, ...rest })\n                        ) : (\n                          // @ts-expect-error â€“ name === \"roles\" has the data value of `AdminRole[]` but the header has a cellFormatter value so this shouldn't be called.\n                          <Typography textColor=\"neutral800\">{user[name] || '-'}</Typography>\n                        )}\n                      </Table.Cell>\n                    );\n                  })}\n                  {canRead || canDelete ? (\n                    <Table.Cell onClick={(e) => e.stopPropagation()}>\n                      <Flex justifyContent=\"end\">\n                        {canRead ? (\n                          <IconButton\n                            tag={NavLink}\n                            to={user.id.toString()}\n                            label={formatMessage(\n                              { id: 'app.component.table.edit', defaultMessage: 'Edit {target}' },\n                              { target: getDisplayName(user) }\n                            )}\n                            variant=\"ghost\"\n                          >\n                            <Pencil />\n                          </IconButton>\n                        ) : null}\n                        {canDelete ? (\n                          <IconButton\n                            onClick={handleDeleteClick(user.id)}\n                            label={formatMessage(\n                              { id: 'global.delete-target', defaultMessage: 'Delete {target}' },\n                              { target: getDisplayName(user) }\n                            )}\n                            variant=\"ghost\"\n                          >\n                            <Trash />\n                          </IconButton>\n                        ) : null}\n                      </Flex>\n                    </Table.Cell>\n                  ) : null}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table.Content>\n        </Table.Root>\n        <Pagination.Root {...pagination}>\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Layouts.Content>\n      {isModalOpened && <ModalForm onToggle={handleToggle} />}\n      <Dialog.Root open={showDeleteConfirmation} onOpenChange={setShowDeleteConfirmation}>\n        <ConfirmDialog onConfirm={confirmDelete} />\n      </Dialog.Root>\n    </Page.Main>\n  );\n};\n\nconst TABLE_HEADERS: Array<\n  Omit<Table.Header<SanitizedAdminUser, any>, 'label'> & { label: MessageDescriptor }\n> = [\n  {\n    name: 'firstname',\n    label: {\n      id: 'Settings.permissions.users.firstname',\n      defaultMessage: 'Firstname',\n    },\n    sortable: true,\n  },\n  {\n    name: 'lastname',\n    label: {\n      id: 'Settings.permissions.users.lastname',\n      defaultMessage: 'Lastname',\n    },\n    sortable: true,\n  },\n  {\n    name: 'email',\n    label: { id: 'Settings.permissions.users.email', defaultMessage: 'Email' },\n    sortable: true,\n  },\n  {\n    name: 'roles',\n    label: {\n      id: 'Settings.permissions.users.roles',\n      defaultMessage: 'Roles',\n    },\n    sortable: false,\n    cellFormatter({ roles }) {\n      return (\n        <Typography textColor=\"neutral800\">{roles.map((role) => role.name).join(',\\n')}</Typography>\n      );\n    },\n  },\n  {\n    name: 'username',\n    label: {\n      id: 'Settings.permissions.users.username',\n      defaultMessage: 'Username',\n    },\n    sortable: true,\n  },\n  {\n    name: 'isActive',\n    label: {\n      id: 'Settings.permissions.users.user-status',\n      defaultMessage: 'User status',\n    },\n    sortable: false,\n    cellFormatter({ isActive }) {\n      return (\n        <Flex>\n          <Status size=\"S\" variant={isActive ? 'success' : 'danger'}>\n            <Typography tag=\"span\" variant=\"omega\" fontWeight=\"bold\">\n              {isActive ? 'Active' : 'Inactive'}\n            </Typography>\n          </Status>\n        </Flex>\n      );\n    },\n  },\n];\n\nconst FILTERS = [\n  {\n    name: 'firstname',\n    label: 'Firstname',\n    type: 'string',\n  },\n  {\n    name: 'lastname',\n    label: 'Lastname',\n    type: 'string',\n  },\n  {\n    name: 'email',\n    label: 'Email',\n    type: 'email',\n  },\n  {\n    name: 'username',\n    label: 'Username',\n    type: 'string',\n  },\n  {\n    name: 'isActive',\n    label: 'Active user',\n    type: 'boolean',\n  },\n] satisfies Filters.Filter[];\n\n/* -------------------------------------------------------------------------------------------------\n * ListPage\n * -----------------------------------------------------------------------------------------------*/\n\n// component which determines whether this page should render the CE or EE page\nconst ListPage = () => {\n  const UsersListPage = useEnterprise(\n    ListPageCE,\n    async () =>\n      // eslint-disable-next-line import/no-cycle\n      (await import('../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/ListPage'))\n        .UserListPageEE\n  );\n\n  // block rendering until the EE component is fully loaded\n  if (!UsersListPage) {\n    return null;\n  }\n\n  return <UsersListPage />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListPage = () => {\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.users.read);\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedListPage, ListPage, ListPageCE };\n"],"names":["ListPageCE","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","isModalOpened","setIsModalOpen","React","useState","permissions","useTypedSelector","state","admin_app","allowedActions","canCreate","canDelete","canRead","useRBAC","settings","users","navigate","useNavigate","toggleNotification","useNotification","formatMessage","useIntl","search","useLocation","showDeleteConfirmation","setShowDeleteConfirmation","idsToDelete","setIdsToDelete","data","isError","isLoading","useAdminUsers","qs","parse","ignoreQueryPrefix","pagination","CreateAction","useEnterprise","CreateActionCE","CreateActionEE","headers","TABLE_HEADERS","map","header","label","title","id","defaultMessage","handleToggle","prev","deleteAll","useDeleteManyUsersMutation","handleDeleteAll","ids","res","type","message","error","err","handleRowClick","toString","handleDeleteClick","confirmDelete","_jsx","Page","Error","_jsxs","Main","aria-busy","Title","name","Layouts","Header","primaryAction","onClick","subtitle","Action","startActions","_Fragment","SearchInput","target","Filters","Root","options","FILTERS","Trigger","Popover","zIndex","List","Content","Table","rows","ActionBar","Head","HeaderCheckboxCell","HeaderCell","Empty","Loading","Body","user","Row","cursor","CheckboxCell","cellFormatter","rest","Cell","Typography","textColor","e","stopPropagation","Flex","justifyContent","IconButton","tag","NavLink","to","getDisplayName","variant","Pencil","Trash","Pagination","PageSize","Links","ModalForm","onToggle","Dialog","open","onOpenChange","ConfirmDialog","onConfirm","sortable","roles","role","join","isActive","Status","size","fontWeight","ListPage","UsersListPage","UserListPageEE","ProtectedListPage","read","Protect"],"mappings":"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"}