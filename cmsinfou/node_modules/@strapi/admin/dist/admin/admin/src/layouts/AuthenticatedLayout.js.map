{"version":3,"file":"AuthenticatedLayout.js","sources":["../../../../../admin/src/layouts/AuthenticatedLayout.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport packageInfo from '@strapi/admin/package.json';\nimport { Box, Flex, SkipToContent } from '@strapi/design-system';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { Outlet } from 'react-router-dom';\nimport lt from 'semver/functions/lt';\nimport valid from 'semver/functions/valid';\n\nimport { LeftMenu } from '../components/LeftMenu';\nimport { NpsSurvey } from '../components/NpsSurvey';\nimport { Page } from '../components/PageHelpers';\nimport { PluginsInitializer } from '../components/PluginsInitializer';\nimport { PrivateRoute } from '../components/PrivateRoute';\nimport { UpsellBanner } from '../components/UpsellBanner';\nimport { AppInfoProvider } from '../features/AppInfo';\nimport { useAuth } from '../features/Auth';\nimport { useConfiguration } from '../features/Configuration';\nimport { useStrapiApp } from '../features/StrapiApp';\nimport { useTracking } from '../features/Tracking';\nimport { useMenu } from '../hooks/useMenu';\nimport { useInformationQuery } from '../services/admin';\nimport { hashAdminUserEmail } from '../utils/users';\n\nconst { version: strapiVersion } = packageInfo;\n\nconst AdminLayout = () => {\n  const { formatMessage } = useIntl();\n  const userInfo = useAuth('AuthenticatedApp', (state) => state.user);\n  const [userId, setUserId] = React.useState<string>();\n  const { showReleaseNotification } = useConfiguration('AuthenticatedApp');\n\n  const { data: appInfo, isLoading: isLoadingAppInfo } = useInformationQuery();\n  const [tagName, setTagName] = React.useState<string>(strapiVersion);\n\n  React.useEffect(() => {\n    if (showReleaseNotification) {\n      fetch('https://api.github.com/repos/strapi/strapi/releases/latest')\n        .then(async (res) => {\n          if (!res.ok) {\n            return;\n          }\n\n          const response = (await res.json()) as { tag_name: string | null | undefined };\n\n          if (!response.tag_name) {\n            throw new Error();\n          }\n\n          setTagName(response.tag_name);\n        })\n        .catch(() => {\n          /**\n           * silence is golden & we'll use the strapiVersion as a fallback\n           */\n        });\n    }\n  }, [showReleaseNotification]);\n\n  React.useEffect(() => {\n    hashAdminUserEmail(userInfo).then((id) => {\n      if (id) {\n        setUserId(id);\n      }\n    });\n  }, [userInfo]);\n\n  const { trackUsage } = useTracking();\n\n  const {\n    isLoading: isLoadingMenu,\n    generalSectionLinks,\n    pluginsSectionLinks,\n  } = useMenu(checkLatestStrapiVersion(strapiVersion, tagName));\n\n  const getAllWidgets = useStrapiApp('TrackingProvider', (state) => state.widgets.getAll);\n  const projectId = appInfo?.projectId;\n  React.useEffect(() => {\n    if (projectId) {\n      trackUsage('didAccessAuthenticatedAdministration', {\n        registeredWidgets: getAllWidgets().map((widget) => widget.uid),\n        projectId,\n      });\n    }\n  }, [projectId, getAllWidgets, trackUsage]);\n\n  // We don't need to wait for the release query to be fetched before rendering the plugins\n  // however, we need the appInfos and the permissions\n  if (isLoadingMenu || isLoadingAppInfo) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <AppInfoProvider\n      {...appInfo}\n      userId={userId}\n      latestStrapiReleaseTag={tagName}\n      shouldUpdateStrapi={checkLatestStrapiVersion(strapiVersion, tagName)}\n    >\n      <NpsSurvey />\n      <PluginsInitializer>\n        <DndProvider backend={HTML5Backend}>\n          <Box background=\"neutral100\">\n            <SkipToContent>\n              {formatMessage({ id: 'skipToContent', defaultMessage: 'Skip to content' })}\n            </SkipToContent>\n            <Flex alignItems=\"flex-start\">\n              <LeftMenu\n                generalSectionLinks={generalSectionLinks}\n                pluginsSectionLinks={pluginsSectionLinks}\n              />\n              <Box flex={1}>\n                <UpsellBanner />\n                <Outlet />\n              </Box>\n            </Flex>\n          </Box>\n        </DndProvider>\n      </PluginsInitializer>\n    </AppInfoProvider>\n  );\n};\n\nconst PrivateAdminLayout = () => {\n  return (\n    <PrivateRoute>\n      <AdminLayout />\n    </PrivateRoute>\n  );\n};\n\nconst checkLatestStrapiVersion = (\n  currentPackageVersion: string,\n  latestPublishedVersion: string = ''\n): boolean => {\n  if (!valid(currentPackageVersion) || !valid(latestPublishedVersion)) {\n    return false;\n  }\n\n  return lt(currentPackageVersion, latestPublishedVersion);\n};\n\nexport { AdminLayout, PrivateAdminLayout };\n"],"names":["version","strapiVersion","packageInfo","AdminLayout","formatMessage","useIntl","userInfo","useAuth","state","user","userId","setUserId","React","useState","showReleaseNotification","useConfiguration","data","appInfo","isLoading","isLoadingAppInfo","useInformationQuery","tagName","setTagName","useEffect","fetch","then","res","ok","response","json","tag_name","Error","catch","hashAdminUserEmail","id","trackUsage","useTracking","isLoadingMenu","generalSectionLinks","pluginsSectionLinks","useMenu","checkLatestStrapiVersion","getAllWidgets","useStrapiApp","widgets","getAll","projectId","registeredWidgets","map","widget","uid","_jsx","Page","Loading","_jsxs","AppInfoProvider","latestStrapiReleaseTag","shouldUpdateStrapi","NpsSurvey","PluginsInitializer","DndProvider","backend","HTML5Backend","Box","background","SkipToContent","defaultMessage","Flex","alignItems","LeftMenu","flex","UpsellBanner","Outlet","PrivateAdminLayout","PrivateRoute","currentPackageVersion","latestPublishedVersion","valid","lt"],"mappings":"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"}