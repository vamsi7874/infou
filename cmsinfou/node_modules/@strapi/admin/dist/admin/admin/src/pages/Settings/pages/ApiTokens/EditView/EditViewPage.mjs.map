{"version":3,"file":"EditViewPage.mjs","sources":["../../../../../../../../../admin/src/pages/Settings/pages/ApiTokens/EditView/EditViewPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Flex } from '@strapi/design-system';\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { useLocation, useMatch, useNavigate } from 'react-router-dom';\n\nimport { Layouts } from '../../../../../components/Layouts/Layout';\nimport { Page } from '../../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../../core/store/hooks';\nimport { useNotification } from '../../../../../features/Notifications';\nimport { useTracking } from '../../../../../features/Tracking';\nimport { useAPIErrorHandler } from '../../../../../hooks/useAPIErrorHandler';\nimport { useRBAC } from '../../../../../hooks/useRBAC';\nimport {\n  useCreateAPITokenMutation,\n  useGetAPITokenQuery,\n  useUpdateAPITokenMutation,\n} from '../../../../../services/apiTokens';\nimport { useGetPermissionsQuery, useGetRoutesQuery } from '../../../../../services/contentApi';\nimport { isBaseQueryError } from '../../../../../utils/baseQuery';\nimport { API_TOKEN_TYPE } from '../../../components/Tokens/constants';\nimport { FormHead } from '../../../components/Tokens/FormHead';\nimport { ApiTokenBox } from '../../../components/Tokens/TokenBox';\n\nimport {\n  ApiTokenPermissionsContextValue,\n  ApiTokenPermissionsProvider,\n} from './apiTokenPermissions';\nimport { FormApiTokenContainer } from './components/FormApiTokenContainer';\nimport { Permissions } from './components/Permissions';\nimport { schema } from './constants';\nimport { initialState, reducer } from './reducer';\n\nimport type { Get, ApiToken } from '../../../../../../../shared/contracts/api-token';\n\n/**\n * TODO: this could definitely be refactored to avoid using redux and instead just use the\n * server response as the source of the truth for the data.\n */\nexport const EditView = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { state: locationState } = useLocation();\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\n  const [apiToken, setApiToken] = React.useState<ApiToken | null>(\n    locationState?.apiToken?.accessKey\n      ? {\n          ...locationState.apiToken,\n        }\n      : null\n  );\n\n  const [showToken, setShowToken] = React.useState(Boolean(locationState?.apiToken?.accessKey));\n  const hideTimerRef = React.useRef<ReturnType<typeof setTimeout> | null>(null);\n  const { trackUsage } = useTracking();\n  const {\n    allowedActions: { canCreate, canUpdate, canRegenerate },\n  } = useRBAC(permissions.settings?.['api-tokens']);\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const match = useMatch('/settings/api-tokens/:id');\n  const id = match?.params?.id;\n  const isCreating = id === 'create';\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidtionErrors,\n  } = useAPIErrorHandler();\n\n  const navigate = useNavigate();\n\n  const contentAPIPermissionsQuery = useGetPermissionsQuery();\n  const contentAPIRoutesQuery = useGetRoutesQuery();\n  /**\n   * Separate effects otherwise we could end\n   * up duplicating the same notification.\n   */\n  React.useEffect(() => {\n    if (contentAPIPermissionsQuery.error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(contentAPIPermissionsQuery.error),\n      });\n    }\n  }, [contentAPIPermissionsQuery.error, formatAPIError, toggleNotification]);\n\n  React.useEffect(() => {\n    if (contentAPIRoutesQuery.error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(contentAPIRoutesQuery.error),\n      });\n    }\n  }, [contentAPIRoutesQuery.error, formatAPIError, toggleNotification]);\n\n  React.useEffect(() => {\n    if (contentAPIPermissionsQuery.data) {\n      dispatch({\n        type: 'UPDATE_PERMISSIONS_LAYOUT',\n        value: contentAPIPermissionsQuery.data,\n      });\n    }\n  }, [contentAPIPermissionsQuery.data]);\n\n  React.useEffect(() => {\n    if (contentAPIRoutesQuery.data) {\n      dispatch({\n        type: 'UPDATE_ROUTES',\n        value: contentAPIRoutesQuery.data,\n      });\n    }\n  }, [contentAPIRoutesQuery.data]);\n\n  React.useEffect(() => {\n    if (apiToken) {\n      if (apiToken.type === 'read-only') {\n        dispatch({\n          type: 'ON_CHANGE_READ_ONLY',\n        });\n      }\n      if (apiToken.type === 'full-access') {\n        dispatch({\n          type: 'SELECT_ALL_ACTIONS',\n        });\n      }\n      if (apiToken.type === 'custom') {\n        dispatch({\n          type: 'UPDATE_PERMISSIONS',\n          value: apiToken?.permissions,\n        });\n      }\n    }\n  }, [apiToken]);\n\n  React.useEffect(() => {\n    trackUsage(isCreating ? 'didAddTokenFromList' : 'didEditTokenFromList', {\n      tokenType: API_TOKEN_TYPE,\n    });\n  }, [isCreating, trackUsage]);\n\n  const { data, error, isLoading } = useGetAPITokenQuery(id!, {\n    skip: !id || isCreating || !!apiToken,\n  });\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  React.useEffect(() => {\n    if (data) {\n      setApiToken(data);\n\n      if (data.type === 'read-only') {\n        dispatch({\n          type: 'ON_CHANGE_READ_ONLY',\n        });\n      }\n      if (data.type === 'full-access') {\n        dispatch({\n          type: 'SELECT_ALL_ACTIONS',\n        });\n      }\n      if (data.type === 'custom') {\n        dispatch({\n          type: 'UPDATE_PERMISSIONS',\n          value: data?.permissions,\n        });\n      }\n    }\n  }, [data]);\n\n  React.useEffect(() => {\n    // Only set up timer when token is shown\n    if (showToken) {\n      hideTimerRef.current = setTimeout(() => {\n        setShowToken(false);\n      }, 30000); // 30 seconds\n\n      // Cleanup on unmount or when showToken changes\n      return () => {\n        if (hideTimerRef.current) {\n          clearTimeout(hideTimerRef.current);\n          hideTimerRef.current = null;\n        }\n      };\n    }\n  }, [showToken]);\n\n  const [createToken] = useCreateAPITokenMutation();\n  const [updateToken] = useUpdateAPITokenMutation();\n\n  interface FormValues extends Pick<Get.Response['data'], 'name' | 'description'> {\n    lifespan: Get.Response['data']['lifespan'] | undefined;\n    type: Get.Response['data']['type'] | undefined;\n  }\n\n  const handleSubmit = async (body: FormValues, formik: FormikHelpers<FormValues>) => {\n    trackUsage(isCreating ? 'willCreateToken' : 'willEditToken', {\n      tokenType: API_TOKEN_TYPE,\n    });\n\n    try {\n      if (isCreating) {\n        const res = await createToken({\n          ...body,\n          // lifespan must be \"null\" for unlimited (0 would mean instantly expired and isn't accepted)\n          lifespan:\n            body?.lifespan && body.lifespan !== '0' ? parseInt(body.lifespan.toString(), 10) : null,\n          permissions: body.type === 'custom' ? state.selectedActions : null,\n        });\n\n        if ('error' in res) {\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n            formik.setErrors(formatValidtionErrors(res.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(res.error),\n            });\n          }\n\n          return;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: 'notification.success.apitokencreated',\n            defaultMessage: 'API Token successfully created',\n          }),\n        });\n\n        trackUsage('didCreateToken', {\n          type: res.data.type,\n          tokenType: API_TOKEN_TYPE,\n        });\n\n        navigate(`../api-tokens/${res.data.id.toString()}`, {\n          state: { apiToken: res.data },\n          replace: true,\n        });\n      } else {\n        const res = await updateToken({\n          id: id!,\n          name: body.name,\n          description: body.description,\n          type: body.type,\n          permissions: body.type === 'custom' ? state.selectedActions : null,\n        });\n\n        if ('error' in res) {\n          if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n            formik.setErrors(formatValidtionErrors(res.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(res.error),\n            });\n          }\n\n          return;\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: 'notification.success.apitokenedited',\n            defaultMessage: 'API Token successfully edited',\n          }),\n        });\n\n        trackUsage('didEditToken', {\n          type: res.data.type,\n          tokenType: API_TOKEN_TYPE,\n        });\n      }\n    } catch {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'Something went wrong',\n        }),\n      });\n    }\n  };\n\n  const [hasChangedPermissions, setHasChangedPermissions] = React.useState(false);\n\n  const handleChangeCheckbox = ({\n    target: { value },\n  }: Parameters<ApiTokenPermissionsContextValue['value']['onChange']>[0]) => {\n    setHasChangedPermissions(true);\n    dispatch({\n      type: 'ON_CHANGE',\n      value,\n    });\n  };\n\n  const handleChangeSelectAllCheckbox = ({\n    target: { value },\n  }: Parameters<ApiTokenPermissionsContextValue['value']['onChangeSelectAll']>[0]) => {\n    setHasChangedPermissions(true);\n    dispatch({\n      type: 'SELECT_ALL_IN_PERMISSION',\n      value,\n    });\n  };\n\n  const setSelectedAction = ({\n    target: { value },\n  }: Parameters<ApiTokenPermissionsContextValue['value']['setSelectedAction']>[0]) => {\n    dispatch({\n      type: 'SET_SELECTED_ACTION',\n      value,\n    });\n  };\n\n  const toggleToken = () => {\n    setShowToken((prev) => !prev);\n    if (hideTimerRef.current) {\n      clearTimeout(hideTimerRef.current);\n      hideTimerRef.current = null;\n    }\n  };\n\n  const providerValue = {\n    ...state,\n    onChange: handleChangeCheckbox,\n    onChangeSelectAll: handleChangeSelectAllCheckbox,\n    setSelectedAction,\n  };\n\n  const canEditInputs = (canUpdate && !isCreating) || (canCreate && isCreating);\n  const canShowToken = !!apiToken?.accessKey;\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <ApiTokenPermissionsProvider value={providerValue}>\n      <Page.Main>\n        <Page.Title>\n          {formatMessage(\n            { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n            { name: 'API Tokens' }\n          )}\n        </Page.Title>\n        <Formik\n          validationSchema={schema}\n          validateOnChange={false}\n          initialValues={{\n            name: apiToken?.name || '',\n            description: apiToken?.description || '',\n            type: apiToken?.type,\n            lifespan: apiToken?.lifespan,\n          }}\n          enableReinitialize\n          onSubmit={(body, actions) => handleSubmit(body, actions)}\n        >\n          {({ errors, handleChange, isSubmitting, values, setFieldValue }) => {\n            if (hasChangedPermissions && values?.type !== 'custom') {\n              setFieldValue('type', 'custom');\n            }\n\n            return (\n              <Form>\n                <FormHead\n                  title={{\n                    id: 'Settings.apiTokens.createPage.title',\n                    defaultMessage: 'Create API Token',\n                  }}\n                  token={apiToken}\n                  setToken={setApiToken}\n                  toggleToken={toggleToken}\n                  showToken={showToken}\n                  canEditInputs={canEditInputs}\n                  canRegenerate={canRegenerate}\n                  canShowToken={canShowToken}\n                  isSubmitting={isSubmitting}\n                  regenerateUrl=\"/admin/api-tokens/\"\n                />\n\n                <Layouts.Content>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    {apiToken?.accessKey && showToken && (\n                      <>\n                        <ApiTokenBox token={apiToken.accessKey} tokenType={API_TOKEN_TYPE} />\n                      </>\n                    )}\n\n                    <FormApiTokenContainer\n                      errors={errors}\n                      onChange={handleChange}\n                      canEditInputs={canEditInputs}\n                      isCreating={isCreating}\n                      values={values}\n                      apiToken={apiToken}\n                      onDispatch={dispatch}\n                      setHasChangedPermissions={setHasChangedPermissions}\n                    />\n                    <Permissions\n                      disabled={\n                        !canEditInputs ||\n                        values?.type === 'read-only' ||\n                        values?.type === 'full-access'\n                      }\n                    />\n                  </Flex>\n                </Layouts.Content>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Page.Main>\n    </ApiTokenPermissionsProvider>\n  );\n};\n\nexport const ProtectedEditView = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['api-tokens'].read\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditView />\n    </Page.Protect>\n  );\n};\n"],"names":["EditView","formatMessage","useIntl","toggleNotification","useNotification","state","locationState","useLocation","permissions","useTypedSelector","admin_app","apiToken","setApiToken","React","useState","accessKey","showToken","setShowToken","Boolean","hideTimerRef","useRef","trackUsage","useTracking","allowedActions","canCreate","canUpdate","canRegenerate","useRBAC","settings","dispatch","useReducer","reducer","initialState","match","useMatch","id","params","isCreating","_unstableFormatAPIError","formatAPIError","_unstableFormatValidationErrors","formatValidtionErrors","useAPIErrorHandler","navigate","useNavigate","contentAPIPermissionsQuery","useGetPermissionsQuery","contentAPIRoutesQuery","useGetRoutesQuery","useEffect","error","type","message","data","value","tokenType","API_TOKEN_TYPE","isLoading","useGetAPITokenQuery","skip","current","setTimeout","clearTimeout","createToken","useCreateAPITokenMutation","updateToken","useUpdateAPITokenMutation","handleSubmit","body","formik","res","lifespan","parseInt","toString","selectedActions","isBaseQueryError","name","setErrors","defaultMessage","replace","description","hasChangedPermissions","setHasChangedPermissions","handleChangeCheckbox","target","handleChangeSelectAllCheckbox","setSelectedAction","toggleToken","prev","providerValue","onChange","onChangeSelectAll","canEditInputs","canShowToken","_jsx","Page","Loading","ApiTokenPermissionsProvider","_jsxs","Main","Title","Formik","validationSchema","schema","validateOnChange","initialValues","enableReinitialize","onSubmit","actions","errors","handleChange","isSubmitting","values","setFieldValue","Form","FormHead","title","token","setToken","regenerateUrl","Layouts","Content","Flex","direction","alignItems","gap","_Fragment","ApiTokenBox","FormApiTokenContainer","onDispatch","Permissions","disabled","ProtectedEditView","read","Protect"],"mappings":"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"}