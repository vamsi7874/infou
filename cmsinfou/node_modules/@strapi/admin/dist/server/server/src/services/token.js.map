{"version":3,"file":"token.js","sources":["../../../../../server/src/services/token.ts"],"sourcesContent":["import crypto from 'crypto';\nimport _ from 'lodash';\nimport type { Algorithm } from 'jsonwebtoken';\nimport type { AdminUser } from '../../../shared/contracts/shared';\n\nconst defaultJwtOptions = { expiresIn: '30d' };\n\nexport type TokenOptions = {\n  expiresIn?: string;\n  algorithm?: Algorithm;\n  privateKey?: string;\n  publicKey?: string;\n  [key: string]: unknown;\n};\n\nexport type TokenPayload = {\n  id: AdminUser['id'];\n};\n\nexport type AdminAuthConfig = {\n  secret: string;\n  options: TokenOptions;\n};\n\nconst getTokenOptions = () => {\n  const { options, secret } = strapi.config.get<AdminAuthConfig>(\n    'admin.auth',\n    {} as AdminAuthConfig\n  );\n\n  // Check for new sessions.options configuration\n  const sessionsOptions = strapi.config.get('admin.auth.sessions.options', {});\n\n  // Merge with legacy options for backward compatibility\n  const mergedOptions = _.merge({}, defaultJwtOptions, options, sessionsOptions);\n\n  return {\n    secret,\n    options: mergedOptions,\n  };\n};\n\n/**\n * Create a random token\n */\nconst createToken = (): string => {\n  return crypto.randomBytes(20).toString('hex');\n};\n\nconst checkSecretIsDefined = () => {\n  if (strapi.config.get('admin.serveAdminPanel') && !strapi.config.get('admin.auth.secret')) {\n    throw new Error(\n      `Missing auth.secret. Please set auth.secret in config/admin.js (ex: you can generate one using Node with \\`crypto.randomBytes(16).toString('base64')\\`).\nFor security reasons, prefer storing the secret in an environment variable and read it in config/admin.js. See https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/configurations/optional/environment.html#configuration-using-environment-variables.`\n    );\n  }\n};\n\nexport { createToken, getTokenOptions, checkSecretIsDefined };\n\n/**\n * Convert an expiresIn value (string or number) into seconds.\n * Supported formats:\n * - number: treated as seconds\n * - numeric string (e.g. \"180\"): treated as seconds\n * - shorthand string: \"Xs\", \"Xm\", \"Xh\", \"Xd\", \"Xw\" (case-insensitive)\n * Returns undefined when value is not set or invalid.\n */\nexport const expiresInToSeconds = (expiresIn: unknown): number | undefined => {\n  if (expiresIn == null) return undefined;\n\n  // Numeric input => seconds\n  if (typeof expiresIn === 'number' && Number.isFinite(expiresIn)) {\n    return Math.max(0, Math.floor(expiresIn));\n  }\n\n  if (typeof expiresIn !== 'string') return undefined;\n\n  const value = expiresIn.trim().toLowerCase();\n\n  // Pure numeric string => seconds\n  if (/^\\d+$/.test(value)) {\n    const seconds = Number.parseInt(value, 10);\n    return Number.isFinite(seconds) ? Math.max(0, seconds) : undefined;\n  }\n\n  // Shorthand formats (s, m, h, d, w)\n  const match = value.match(/^(\\d+)\\s*(ms|s|m|h|d|w)$/i);\n  if (!match) return undefined;\n\n  const amount = Number.parseInt(match[1], 10);\n  if (!Number.isFinite(amount)) return undefined;\n\n  const unit = match[2];\n  switch (unit) {\n    case 'ms':\n      return Math.max(0, Math.floor(amount / 1000));\n    case 's':\n      return Math.max(0, amount);\n    case 'm':\n      return Math.max(0, amount * 60);\n    case 'h':\n      return Math.max(0, amount * 60 * 60);\n    case 'd':\n      return Math.max(0, amount * 24 * 60 * 60);\n    case 'w':\n      return Math.max(0, amount * 7 * 24 * 60 * 60);\n    default:\n      return undefined;\n  }\n};\n"],"names":["defaultJwtOptions","expiresIn","getTokenOptions","options","secret","strapi","config","get","sessionsOptions","mergedOptions","_","merge","createToken","crypto","randomBytes","toString","checkSecretIsDefined","Error","expiresInToSeconds","undefined","Number","isFinite","Math","max","floor","value","trim","toLowerCase","test","seconds","parseInt","match","amount","unit"],"mappings":"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"}