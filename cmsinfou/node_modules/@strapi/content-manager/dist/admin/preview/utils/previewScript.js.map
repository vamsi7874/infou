{"version":3,"file":"previewScript.js","sources":["../../../../admin/src/preview/utils/previewScript.ts"],"sourcesContent":["// NOTE: This override is for the properties on _user's site_, it's not about Strapi Admin.\ndeclare global {\n  interface Window {\n    __strapi_previewCleanup?: () => void;\n    STRAPI_HIGHLIGHT_HOVER_COLOR?: string;\n    STRAPI_HIGHLIGHT_ACTIVE_COLOR?: string;\n    STRAPI_DISABLE_STEGA_DECODING?: boolean;\n  }\n}\n\n/**\n * previewScript will be injected into the preview iframe after being stringified.\n * Therefore it CANNOT use any imports, or refer to any variables outside of its own scope.\n * It's why many functions are defined within previewScript, it's the only way to avoid going full spaghetti.\n * To get a better overview of everything previewScript does, go to the orchestration part at its end.\n */\nconst previewScript = (shouldRun = true) => {\n  /* -----------------------------------------------------------------------------------------------\n   * Params\n   * ---------------------------------------------------------------------------------------------*/\n  const HIGHLIGHT_PADDING = 2; // in pixels\n  const HIGHLIGHT_HOVER_COLOR = window.STRAPI_HIGHLIGHT_HOVER_COLOR ?? '#4945ff'; // dark primary500\n  const HIGHLIGHT_ACTIVE_COLOR = window.STRAPI_HIGHLIGHT_ACTIVE_COLOR ?? '#7b79ff'; // dark primary600\n  const HIGHLIGHT_STYLES_ID = 'strapi-preview-highlight-styles';\n  const DOUBLE_CLICK_TIMEOUT = 300; // milliseconds to wait for potential double-click\n\n  const DISABLE_STEGA_DECODING = window.STRAPI_DISABLE_STEGA_DECODING ?? false;\n  const SOURCE_ATTRIBUTE = 'data-strapi-source';\n  const OVERLAY_ID = 'strapi-preview-overlay';\n  const INTERNAL_EVENTS = {\n    STRAPI_FIELD_FOCUS: 'strapiFieldFocus',\n    STRAPI_FIELD_BLUR: 'strapiFieldBlur',\n    STRAPI_FIELD_CHANGE: 'strapiFieldChange',\n    STRAPI_FIELD_FOCUS_INTENT: 'strapiFieldFocusIntent',\n    STRAPI_FIELD_SINGLE_CLICK_HINT: 'strapiFieldSingleClickHint',\n  } as const;\n\n  /**\n   * Calling the function in no-run mode lets us retrieve the constants from other files and keep\n   * a single source of truth for them. It's the only way to do this because this script can't\n   * refer to any variables outside of its own scope, because it's stringified before it's run.\n   */\n  if (!shouldRun) {\n    return { INTERNAL_EVENTS };\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * Utils\n   * ---------------------------------------------------------------------------------------------*/\n\n  const sendMessage = (\n    type: (typeof INTERNAL_EVENTS)[keyof typeof INTERNAL_EVENTS],\n    payload: unknown\n  ) => {\n    window.parent.postMessage({ type, payload }, '*');\n  };\n\n  const getElementsByPath = (path: string) => {\n    return document.querySelectorAll(`[${SOURCE_ATTRIBUTE}*=\"path=${path}\"]`);\n  };\n\n  /* -----------------------------------------------------------------------------------------------\n   * Functionality pieces\n   * ---------------------------------------------------------------------------------------------*/\n\n  const setupStegaDOMObserver = async () => {\n    if (DISABLE_STEGA_DECODING) {\n      return;\n    }\n\n    const { vercelStegaDecode: stegaDecode, vercelStegaClean: stegaClean } = await import(\n      // @ts-expect-error it's not a local dependency\n      // eslint-disable-next-line import/no-unresolved\n      'https://cdn.jsdelivr.net/npm/@vercel/stega@0.1.2/+esm'\n    );\n\n    const applyStegaToElement = (element: Element) => {\n      const directTextNodes = Array.from(element.childNodes).filter(\n        (node) => node.nodeType === Node.TEXT_NODE\n      );\n\n      const directTextContent = directTextNodes.map((node) => node.textContent || '').join('');\n\n      if (directTextContent) {\n        try {\n          // TODO: check if we can call split instead of decode+clean\n          const result = stegaDecode(directTextContent);\n          if (result && 'strapiSource' in result) {\n            element.setAttribute(SOURCE_ATTRIBUTE, result.strapiSource);\n\n            // Remove encoded part from DOM text content (to avoid breaking links for example)\n            directTextNodes.forEach((node) => {\n              if (node.textContent) {\n                const cleanedText = stegaClean(node.textContent);\n                if (cleanedText !== node.textContent) {\n                  node.textContent = cleanedText;\n                }\n              }\n            });\n          }\n        } catch (error) {}\n      }\n    };\n\n    // Process all existing elements\n    const allElements = document.querySelectorAll('*');\n    Array.from(allElements).forEach(applyStegaToElement);\n\n    // Create observer for new elements and text changes\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        // Handle added nodes\n        if (mutation.type === 'childList') {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              const element = node as Element;\n              // Process the added element\n              applyStegaToElement(element);\n              // Process all child elements\n              const childElements = element.querySelectorAll('*');\n              Array.from(childElements).forEach(applyStegaToElement);\n            }\n          });\n        }\n\n        // Handle text content changes\n        if (mutation.type === 'characterData' && mutation.target.parentElement) {\n          applyStegaToElement(mutation.target.parentElement);\n        }\n      });\n    });\n\n    observer.observe(document, {\n      childList: true,\n      subtree: true,\n      characterData: true,\n    });\n\n    return observer;\n  };\n\n  const createHighlightStyles = () => {\n    const existingStyles = document.getElementById(HIGHLIGHT_STYLES_ID);\n    // Remove existing styles to avoid duplicates\n    if (existingStyles) {\n      existingStyles.remove();\n    }\n\n    const styleElement = document.createElement('style');\n    styleElement.id = HIGHLIGHT_STYLES_ID;\n    styleElement.textContent = `\n      .strapi-highlight {\n        position: absolute;\n        outline: 2px solid transparent;\n        pointer-events: auto;\n        border-radius: 2px;\n        background-color: transparent;\n        will-change: transform;\n        transition: outline-color 0.1s ease-in-out;\n      }\n\n      .strapi-highlight:hover {\n        outline-color: ${HIGHLIGHT_HOVER_COLOR} !important;\n      }\n\n      .strapi-highlight.strapi-highlight-focused {\n        outline-color: ${HIGHLIGHT_ACTIVE_COLOR} !important;\n        outline-width: 3px !important;\n      }\n    `;\n\n    document.head.appendChild(styleElement);\n    return styleElement;\n  };\n\n  const createOverlaySystem = () => {\n    // Clean up before creating a new overlay so we can safely call previewScript multiple times\n    window.__strapi_previewCleanup?.();\n    document.getElementById(OVERLAY_ID)?.remove();\n\n    const overlay = document.createElement('div');\n    overlay.id = OVERLAY_ID;\n    overlay.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n      z-index: 9999;\n    `;\n\n    window.document.body.appendChild(overlay);\n    return overlay;\n  };\n\n  type EventListenersList = Array<{\n    element: HTMLElement | Window;\n    type: keyof HTMLElementEventMap | 'message';\n    handler: EventListener;\n  }>;\n\n  const createHighlightManager = (overlay: HTMLElement) => {\n    const elementsToHighlight = new Map<Element, HTMLElement>();\n    const eventListeners: EventListenersList = [];\n    const focusedHighlights: HTMLElement[] = [];\n    const pendingClicks = new Map<Element, number>(); // number is timeout id\n    let focusedField: string | null = null;\n\n    const drawHighlight = (target: Element, highlight: HTMLElement) => {\n      if (!highlight) return;\n\n      const rect = target.getBoundingClientRect();\n      highlight.style.width = `${rect.width + HIGHLIGHT_PADDING * 2}px`;\n      highlight.style.height = `${rect.height + HIGHLIGHT_PADDING * 2}px`;\n      highlight.style.transform = `translate(${rect.left - HIGHLIGHT_PADDING}px, ${rect.top - HIGHLIGHT_PADDING}px)`;\n    };\n\n    const updateAllHighlights = () => {\n      elementsToHighlight.forEach((highlight, element) => {\n        drawHighlight(element, highlight);\n      });\n    };\n\n    const createHighlightForElement = (element: HTMLElement) => {\n      if (elementsToHighlight.has(element)) {\n        // Already has a highlight\n        return;\n      }\n\n      const highlight = document.createElement('div');\n      highlight.className = 'strapi-highlight';\n      const clickHandler = (event: MouseEvent) => {\n        // Skip if this is a re-dispatched event from our delayed handler to avoid infinite loops\n        if ((event as any).__strapi_redispatched) {\n          return;\n        }\n\n        // Prevent the immediate action for interactive elements\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Clear any existing timeout for this element\n        const existingTimeout = pendingClicks.get(element);\n        if (existingTimeout) {\n          window.clearTimeout(existingTimeout);\n          pendingClicks.delete(element);\n        }\n\n        // Set up a delayed single-click handler\n        const timeout = window.setTimeout(() => {\n          pendingClicks.delete(element);\n\n          // Send single-click hint notification\n          sendMessage(INTERNAL_EVENTS.STRAPI_FIELD_SINGLE_CLICK_HINT, null);\n\n          // Re-trigger the click on the underlying element after the double-click timeout\n          // Create a new event to dispatch with a marker to prevent re-handling\n          const newEvent = new MouseEvent('click', {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n            detail: 1,\n            button: event.button,\n            buttons: event.buttons,\n            clientX: event.clientX,\n            clientY: event.clientY,\n            ctrlKey: event.ctrlKey,\n            altKey: event.altKey,\n            shiftKey: event.shiftKey,\n            metaKey: event.metaKey,\n          });\n          (newEvent as any).__strapi_redispatched = true;\n          element.dispatchEvent(newEvent);\n        }, DOUBLE_CLICK_TIMEOUT);\n\n        pendingClicks.set(element, timeout);\n      };\n\n      const doubleClickHandler = (event: MouseEvent) => {\n        // Prevent the default behavior on double-click\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Clear any pending single-click action\n        const existingTimeout = pendingClicks.get(element);\n        if (existingTimeout) {\n          clearTimeout(existingTimeout);\n          pendingClicks.delete(element);\n        }\n\n        const sourceAttribute = element.getAttribute(SOURCE_ATTRIBUTE);\n        if (sourceAttribute) {\n          const rect = element.getBoundingClientRect();\n          sendMessage(INTERNAL_EVENTS.STRAPI_FIELD_FOCUS_INTENT, {\n            path: sourceAttribute,\n            position: {\n              top: rect.top,\n              left: rect.left,\n              right: rect.right,\n              bottom: rect.bottom,\n              width: rect.width,\n              height: rect.height,\n            },\n          });\n        }\n      };\n\n      const mouseDownHandler = (event: MouseEvent) => {\n        // Prevent default multi click to select behavior\n        if (event.detail >= 2) {\n          event.preventDefault();\n        }\n      };\n\n      highlight.addEventListener('click', clickHandler);\n      highlight.addEventListener('dblclick', doubleClickHandler);\n      highlight.addEventListener('mousedown', mouseDownHandler);\n\n      // Store event listeners for cleanup\n      eventListeners.push(\n        { element: highlight, type: 'click', handler: clickHandler as EventListener },\n        { element: highlight, type: 'dblclick', handler: doubleClickHandler as EventListener },\n        { element: highlight, type: 'mousedown', handler: mouseDownHandler as EventListener }\n      );\n\n      elementsToHighlight.set(element, highlight);\n      overlay.appendChild(highlight);\n      drawHighlight(element, highlight);\n    };\n\n    const removeHighlightForElement = (element: Element) => {\n      const highlight = elementsToHighlight.get(element);\n\n      if (!highlight) return;\n\n      // Clear any pending click timeout for this element\n      const pendingTimeout = pendingClicks.get(element);\n      if (pendingTimeout) {\n        window.clearTimeout(pendingTimeout);\n        pendingClicks.delete(element);\n      }\n\n      highlight.remove();\n      elementsToHighlight.delete(element);\n\n      // Remove event listeners for this highlight\n      const listenersToRemove = eventListeners.filter((listener) => listener.element === highlight);\n      listenersToRemove.forEach(({ element, type, handler }) => {\n        element.removeEventListener(type, handler);\n      });\n\n      // Mutate eventListeners to remove listeners for this highlight\n      eventListeners.splice(\n        0,\n        eventListeners.length,\n        ...eventListeners.filter((listener) => listener.element !== highlight)\n      );\n    };\n\n    // Process all existing elements with source attributes\n    const initialElements = window.document.querySelectorAll(`[${SOURCE_ATTRIBUTE}]`);\n    Array.from(initialElements).forEach((element) => {\n      if (element instanceof HTMLElement) {\n        createHighlightForElement(element);\n      }\n    });\n\n    return {\n      get elements() {\n        return Array.from(elementsToHighlight.keys());\n      },\n      get highlights() {\n        return Array.from(elementsToHighlight.values());\n      },\n      updateAllHighlights,\n      eventListeners,\n      focusedHighlights,\n      createHighlightForElement,\n      removeHighlightForElement,\n      setFocusedField: (field: string | null) => {\n        focusedField = field;\n      },\n      getFocusedField: () => focusedField,\n      clearAllPendingClicks: () => {\n        pendingClicks.forEach((timeout) => clearTimeout(timeout));\n        pendingClicks.clear();\n      },\n    };\n  };\n\n  type HighlightManager = ReturnType<typeof createHighlightManager>;\n\n  /**\n   * We need to track scroll in all the element parents in order to keep the highlight position\n   * in sync with the element position. Listening to window scroll is not enough because the\n   * element can be inside one or more scrollable containers.\n   */\n  const setupScrollManagement = (highlightManager: HighlightManager) => {\n    const updateOnScroll = () => {\n      highlightManager.updateAllHighlights();\n    };\n\n    const scrollableElements = new Set<Element | Window>();\n    scrollableElements.add(window);\n\n    // Find all scrollable ancestors for all tracked elements and set up scroll listeners\n    highlightManager.elements.forEach((element) => {\n      let parent = element.parentElement;\n      while (parent) {\n        const computedStyle = window.getComputedStyle(parent);\n        const overflow = computedStyle.overflow + computedStyle.overflowX + computedStyle.overflowY;\n\n        if (overflow.includes('scroll') || overflow.includes('auto')) {\n          scrollableElements.add(parent);\n        }\n\n        parent = parent.parentElement;\n      }\n    });\n\n    // Add scroll listeners to all scrollable elements\n    scrollableElements.forEach((element) => {\n      if (element === window) {\n        window.addEventListener('scroll', updateOnScroll);\n        window.addEventListener('resize', updateOnScroll);\n      } else {\n        element.addEventListener('scroll', updateOnScroll);\n      }\n    });\n\n    const cleanup = () => {\n      scrollableElements.forEach((element) => {\n        if (element === window) {\n          window.removeEventListener('scroll', updateOnScroll);\n          window.removeEventListener('resize', updateOnScroll);\n        } else {\n          (element as Element).removeEventListener('scroll', updateOnScroll);\n        }\n      });\n    };\n\n    return { cleanup };\n  };\n\n  const setupObservers = (\n    highlightManager: HighlightManager,\n    stegaObserver: MutationObserver | undefined\n  ) => {\n    const resizeObserver = new ResizeObserver(() => {\n      highlightManager.updateAllHighlights();\n    });\n\n    const observeElementForResize = (element: Element) => {\n      resizeObserver.observe(element);\n    };\n\n    // Observe existing elements\n    highlightManager.elements.forEach(observeElementForResize);\n    resizeObserver.observe(document.documentElement);\n\n    // Create highlight observer to watch for new elements with source attributes\n    const highlightObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'attributes' && mutation.attributeName === SOURCE_ATTRIBUTE) {\n          const target = mutation.target as HTMLElement;\n          if (target.hasAttribute(SOURCE_ATTRIBUTE)) {\n            highlightManager.createHighlightForElement(target);\n            observeElementForResize(target);\n          } else {\n            highlightManager.removeHighlightForElement(target);\n          }\n        }\n\n        if (mutation.type === 'childList') {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              const element = node as Element;\n              // Check if the added element has source attribute\n              if (element.hasAttribute(SOURCE_ATTRIBUTE) && element instanceof HTMLElement) {\n                highlightManager.createHighlightForElement(element);\n                observeElementForResize(element);\n              }\n              // Check all child elements for source attributes\n              const elementsWithSource = element.querySelectorAll(`[${SOURCE_ATTRIBUTE}]`);\n              Array.from(elementsWithSource).forEach((childElement) => {\n                if (childElement instanceof HTMLElement) {\n                  highlightManager.createHighlightForElement(childElement);\n                  observeElementForResize(childElement);\n                }\n              });\n            }\n          });\n\n          mutation.removedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              const element = node as Element;\n              highlightManager.removeHighlightForElement(element);\n            }\n          });\n        }\n      });\n    });\n\n    highlightObserver.observe(document, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: [SOURCE_ATTRIBUTE],\n    });\n\n    return {\n      resizeObserver,\n      highlightObserver,\n      stegaObserver,\n    };\n  };\n\n  const setupEventHandlers = (highlightManager: HighlightManager) => {\n    const handleMessage = (event: MessageEvent) => {\n      if (!event.data?.type) return;\n\n      // The user typed in an input, reflect the change in the preview\n      if (event.data.type === INTERNAL_EVENTS.STRAPI_FIELD_CHANGE) {\n        const { field, value } = event.data.payload;\n        if (!field) return;\n\n        getElementsByPath(field).forEach((element) => {\n          if (element instanceof HTMLElement) {\n            element.textContent = value || '';\n          }\n        });\n\n        // Update highlight dimensions since the new text content may affect them\n        highlightManager.updateAllHighlights();\n        return;\n      }\n\n      // The user focused a new input, update the highlights in the preview\n      if (event.data.type === INTERNAL_EVENTS.STRAPI_FIELD_FOCUS) {\n        const { field } = event.data.payload;\n        if (!field) return;\n\n        // Clear existing focused highlights\n        highlightManager.focusedHighlights.forEach((highlight: HTMLElement) => {\n          highlight.classList.remove('strapi-highlight-focused');\n        });\n        highlightManager.focusedHighlights.length = 0;\n\n        // Set new focused field and highlight matching elements\n        highlightManager.setFocusedField(field);\n        getElementsByPath(field).forEach((element, index) => {\n          if (index === 0) {\n            element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          }\n          const highlight =\n            highlightManager.highlights[Array.from(highlightManager.elements).indexOf(element)];\n          if (highlight) {\n            highlight.classList.add('strapi-highlight-focused');\n            highlightManager.focusedHighlights.push(highlight);\n          }\n        });\n        return;\n      }\n\n      // The user is no longer focusing an input, remove the highlights\n      if (event.data.type === INTERNAL_EVENTS.STRAPI_FIELD_BLUR) {\n        const { field } = event.data.payload;\n        if (field !== highlightManager.getFocusedField()) return;\n\n        highlightManager.focusedHighlights.forEach((highlight: HTMLElement) => {\n          highlight.classList.remove('strapi-highlight-focused');\n        });\n        highlightManager.focusedHighlights.length = 0;\n        highlightManager.setFocusedField(null);\n      }\n    };\n\n    window.addEventListener('message', handleMessage);\n\n    // Add the message handler to the cleanup list\n    const messageEventListener = {\n      element: window,\n      type: 'message' as keyof HTMLElementEventMap,\n      handler: handleMessage as EventListener,\n    };\n\n    return [...highlightManager.eventListeners, messageEventListener];\n  };\n\n  const createCleanupSystem = (\n    overlay: HTMLElement,\n    observers: ReturnType<typeof setupObservers>,\n    scrollManager: ReturnType<typeof setupScrollManagement>,\n    eventHandlers: EventListenersList,\n    highlightManager: HighlightManager\n  ) => {\n    window.__strapi_previewCleanup = () => {\n      observers.resizeObserver.disconnect();\n      observers.highlightObserver.disconnect();\n      observers.stegaObserver?.disconnect();\n\n      // Clean up scroll listeners\n      scrollManager.cleanup();\n\n      // Clear all pending click timeouts\n      highlightManager.clearAllPendingClicks();\n\n      // Remove highlight event listeners\n      eventHandlers.forEach(({ element, type, handler }) => {\n        element.removeEventListener(type, handler);\n      });\n\n      // Clean up CSS styles\n      const existingStyles = document.getElementById(HIGHLIGHT_STYLES_ID);\n      if (existingStyles) {\n        existingStyles.remove();\n      }\n\n      overlay.remove();\n    };\n  };\n\n  /* -----------------------------------------------------------------------------------------------\n   * Orchestration\n   * ---------------------------------------------------------------------------------------------*/\n\n  setupStegaDOMObserver().then((stegaObserver) => {\n    createHighlightStyles();\n    const overlay = createOverlaySystem();\n    const highlightManager = createHighlightManager(overlay);\n    const observers = setupObservers(highlightManager, stegaObserver);\n    const scrollManager = setupScrollManagement(highlightManager);\n    const eventHandlers = setupEventHandlers(highlightManager);\n    createCleanupSystem(overlay, observers, scrollManager, eventHandlers, highlightManager);\n  });\n};\n\nexport { previewScript };\n"],"names":["previewScript","shouldRun","HIGHLIGHT_PADDING","HIGHLIGHT_HOVER_COLOR","window","STRAPI_HIGHLIGHT_HOVER_COLOR","HIGHLIGHT_ACTIVE_COLOR","STRAPI_HIGHLIGHT_ACTIVE_COLOR","HIGHLIGHT_STYLES_ID","DOUBLE_CLICK_TIMEOUT","DISABLE_STEGA_DECODING","STRAPI_DISABLE_STEGA_DECODING","SOURCE_ATTRIBUTE","OVERLAY_ID","INTERNAL_EVENTS","STRAPI_FIELD_FOCUS","STRAPI_FIELD_BLUR","STRAPI_FIELD_CHANGE","STRAPI_FIELD_FOCUS_INTENT","STRAPI_FIELD_SINGLE_CLICK_HINT","sendMessage","type","payload","parent","postMessage","getElementsByPath","path","document","querySelectorAll","setupStegaDOMObserver","vercelStegaDecode","stegaDecode","vercelStegaClean","stegaClean","applyStegaToElement","element","directTextNodes","Array","from","childNodes","filter","node","nodeType","Node","TEXT_NODE","directTextContent","map","textContent","join","result","setAttribute","strapiSource","forEach","cleanedText","error","allElements","observer","MutationObserver","mutations","mutation","addedNodes","ELEMENT_NODE","childElements","target","parentElement","observe","childList","subtree","characterData","createHighlightStyles","existingStyles","getElementById","remove","styleElement","createElement","id","head","appendChild","createOverlaySystem","__strapi_previewCleanup","overlay","style","cssText","body","createHighlightManager","elementsToHighlight","Map","eventListeners","focusedHighlights","pendingClicks","focusedField","drawHighlight","highlight","rect","getBoundingClientRect","width","height","transform","left","top","updateAllHighlights","createHighlightForElement","has","className","clickHandler","event","__strapi_redispatched","preventDefault","stopPropagation","existingTimeout","get","clearTimeout","delete","timeout","setTimeout","newEvent","MouseEvent","bubbles","cancelable","view","detail","button","buttons","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","dispatchEvent","set","doubleClickHandler","sourceAttribute","getAttribute","position","right","bottom","mouseDownHandler","addEventListener","push","handler","removeHighlightForElement","pendingTimeout","listenersToRemove","listener","removeEventListener","splice","length","initialElements","HTMLElement","elements","keys","highlights","values","setFocusedField","field","getFocusedField","clearAllPendingClicks","clear","setupScrollManagement","highlightManager","updateOnScroll","scrollableElements","Set","add","computedStyle","getComputedStyle","overflow","overflowX","overflowY","includes","cleanup","setupObservers","stegaObserver","resizeObserver","ResizeObserver","observeElementForResize","documentElement","highlightObserver","attributeName","hasAttribute","elementsWithSource","childElement","removedNodes","attributes","attributeFilter","setupEventHandlers","handleMessage","data","value","classList","index","scrollIntoView","behavior","block","indexOf","messageEventListener","createCleanupSystem","observers","scrollManager","eventHandlers","disconnect","then"],"mappings":"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"}